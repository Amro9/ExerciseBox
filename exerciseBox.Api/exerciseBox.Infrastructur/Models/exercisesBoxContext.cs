// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace exerciseBox.Infrastructur.Models;

public partial class exercisesBoxContext : DbContext
{
    public exercisesBoxContext(DbContextOptions<exercisesBoxContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BranchSubjectJunction> BranchSubjectJunctions { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionDifficultyLevel> QuestionDifficultyLevels { get; set; }

    public virtual DbSet<Schools> Schools { get; set; }

    public virtual DbSet<SchoolBranch> SchoolBranches { get; set; }

    public virtual DbSet<SchoolLevel> SchoolLevels { get; set; }

    public virtual DbSet<SchoolType> SchoolTypes { get; set; }

    public virtual DbSet<SchoolsBranchesJunction> SchoolsBranchesJunctions { get; set; }

    public virtual DbSet<SchoolsLevelsJunction> SchoolsLevelsJunctions { get; set; }

    public virtual DbSet<SchoolsSubjectsJunction> SchoolsSubjectsJunctions { get; set; }

    public virtual DbSet<Subject> Subjects { get; set; }

    public virtual DbSet<Teacher> Teachers { get; set; }

    public virtual DbSet<TeachersSchoolLevelsJunction> TeachersSchoolLevelsJunctions { get; set; }

    public virtual DbSet<TeachersSubjectsJunction> TeachersSubjectsJunctions { get; set; }

    public virtual DbSet<Topic> Topics { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BranchSubjectJunction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BranchSu__3213E83FA614003D");

            entity.ToTable("BranchSubjectJunction");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Branch)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("branch");
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("subject");

            entity.HasOne(d => d.BranchNavigation).WithMany(p => p.BranchSubjectJunctions)
                .HasForeignKey(d => d.Branch)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchSubjectJunction_SchoolBranch");

            entity.HasOne(d => d.SubjectNavigation).WithMany(p => p.BranchSubjectJunctions)
                .HasForeignKey(d => d.Subject)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BranchSubjectJunction_Subject");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3213E83FE270C59C");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Answer)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("answer");
            entity.Property(e => e.Author)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("author");
            entity.Property(e => e.Content)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("content");
            entity.Property(e => e.DifficultyLevel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("difficultyLevel");
            entity.Property(e => e.SchoolLevel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("schoolLevel");
            entity.Property(e => e.Topic)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("topic");

            entity.HasOne(d => d.AuthorNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.Author)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questions_Teacher");

            entity.HasOne(d => d.DifficultyLevelNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.DifficultyLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questions_QuestionDifficultyLevel");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Question)
                .HasForeignKey<Question>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questions_topics");

            entity.HasOne(d => d.SchoolLevelNavigation).WithMany(p => p.Questions)
                .HasForeignKey(d => d.SchoolLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Questions_SchoolLevels");
        });

        modelBuilder.Entity<QuestionDifficultyLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Question__3213E83F87383249");

            entity.ToTable("QuestionDifficultyLevel");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Schools>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Schools__3213E83F6448D8B3");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.SchoolType)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("schoolType");
        });

        modelBuilder.Entity<SchoolBranch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SchoolBr__3213E83F8A499D30");

            entity.ToTable("SchoolBranch");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SchoolLevel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SchoolLe__3213E83F9B40A2F8");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SchoolType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SchoolTy__3213E83F5B096B3E");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SchoolsBranchesJunction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SchoolBr__3213E83F342AC604");

            entity.ToTable("SchoolsBranchesJunction");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Branch)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("branch");
            entity.Property(e => e.School)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("school");

            entity.HasOne(d => d.BranchNavigation).WithMany(p => p.SchoolsBranchesJunctions)
                .HasForeignKey(d => d.Branch)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SchoolBranchesJunction_SchoolBranch");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.SchoolsBranchesJunctions)
                .HasForeignKey(d => d.School)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SchoolBranchesJunction_Schools");
        });

        modelBuilder.Entity<SchoolsLevelsJunction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SchoolLe__3213E83F18FF1263");

            entity.ToTable("SchoolsLevelsJunction");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.School)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("school");
            entity.Property(e => e.SchoolLevel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("schoolLevel");
        });

        modelBuilder.Entity<SchoolsSubjectsJunction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SchoolSu__3213E83F951C3653");

            entity.ToTable("SchoolsSubjectsJunction");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.School)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("school");
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("subject");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.SchoolsSubjectsJunctions)
                .HasForeignKey(d => d.School)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SchoolsSubjectsJunction_SchoolsSubjectsJunction");

            entity.HasOne(d => d.SubjectNavigation).WithMany(p => p.SchoolsSubjectsJunctions)
                .HasForeignKey(d => d.Subject)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SchoolsSubjectsJunction_Subject");
        });

        modelBuilder.Entity<Subject>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subject__3213E83F267525CF");

            entity.ToTable("Subject");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Teacher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Teacher__3213E83F92A904E3");

            entity.ToTable("Teacher");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FamilyName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("familyName");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.School)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("school");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("surname");

            entity.HasOne(d => d.SchoolNavigation).WithMany(p => p.Teachers)
                .HasForeignKey(d => d.School)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Teacher_Schools");
        });

        modelBuilder.Entity<TeachersSchoolLevelsJunction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Teachers__3213E83F9B0C3F1A");

            entity.ToTable("TeachersSchoolLevelsJunction");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.SchoolLevel)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("schoolLevel");
            entity.Property(e => e.Teacher)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("teacher");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TeachersSchoolLevelsJunction)
                .HasForeignKey<TeachersSchoolLevelsJunction>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeachersSchoolLevelsJunction_Teacher");

            entity.HasOne(d => d.SchoolLevelNavigation).WithMany(p => p.TeachersSchoolLevelsJunctions)
                .HasForeignKey(d => d.SchoolLevel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeachersSchoolLevelsJunction_SchoolLevels");
        });

        modelBuilder.Entity<TeachersSubjectsJunction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Teachers__3213E83F7583CB84");

            entity.ToTable("TeachersSubjectsJunction");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.Teacher)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("teacher");

            entity.HasOne(d => d.SubjectNavigation).WithMany(p => p.TeachersSubjectsJunctions)
                .HasForeignKey(d => d.Subject)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeachersSubjectsJunction_Subject");

            entity.HasOne(d => d.TeacherNavigation).WithMany(p => p.TeachersSubjectsJunctions)
                .HasForeignKey(d => d.Teacher)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeachersSubjectsJunction_Teacher");
        });

        modelBuilder.Entity<Topic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__topics__3213E83FCC31C10D");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("id");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Subject)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("subject");

            entity.HasOne(d => d.SubjectNavigation).WithMany(p => p.Topics)
                .HasForeignKey(d => d.Subject)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_topics_Subject");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}