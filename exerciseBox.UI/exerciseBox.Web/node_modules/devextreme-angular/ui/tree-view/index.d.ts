/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { DataStructure, ScrollDirection, SearchMode, SingleOrMultiple } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Properties as dxTextBoxOptions } from 'devextreme/ui/text_box';
import { ContentReadyEvent, DisposingEvent, InitializedEvent, ItemClickEvent, ItemCollapsedEvent, ItemContextMenuEvent, ItemExpandedEvent, ItemHoldEvent, ItemRenderedEvent, ItemSelectionChangedEvent, OptionChangedEvent, SelectAllValueChangedEvent, SelectionChangedEvent, TreeViewCheckBoxMode, TreeViewExpandEvent } from 'devextreme/ui/tree_view';
import DxTreeView from 'devextreme/ui/tree_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import type * as DxTreeViewTypes from "devextreme/ui/tree_view_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
export { ExplicitTypes } from 'devextreme/ui/tree_view';
/**
 * [descr:dxTreeView]

 */
export declare class DxTreeViewComponent<TKey = any> extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTreeView<TKey>;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxTreeViewOptions.animationEnabled]
    
     */
    get animationEnabled(): boolean;
    set animationEnabled(value: boolean);
    /**
     * [descr:dxTreeViewOptions.collapseIcon]
    
     */
    get collapseIcon(): null | string;
    set collapseIcon(value: null | string);
    /**
     * [descr:dxTreeViewOptions.createChildren]
    
     */
    get createChildren(): Function;
    set createChildren(value: Function);
    /**
     * [descr:dxTreeViewOptions.dataSource]
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxTreeViewItem>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxTreeViewItem>);
    /**
     * [descr:dxTreeViewOptions.dataStructure]
    
     */
    get dataStructure(): DataStructure;
    set dataStructure(value: DataStructure);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.disabledExpr]
    
     */
    get disabledExpr(): Function | string;
    set disabledExpr(value: Function | string);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.displayExpr]
    
     */
    get displayExpr(): Function | string;
    set displayExpr(value: Function | string);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxTreeViewOptions.expandAllEnabled]
    
     */
    get expandAllEnabled(): boolean;
    set expandAllEnabled(value: boolean);
    /**
     * [descr:dxTreeViewOptions.expandedExpr]
    
     */
    get expandedExpr(): Function | string;
    set expandedExpr(value: Function | string);
    /**
     * [descr:dxTreeViewOptions.expandEvent]
    
     */
    get expandEvent(): TreeViewExpandEvent;
    set expandEvent(value: TreeViewExpandEvent);
    /**
     * [descr:dxTreeViewOptions.expandIcon]
    
     */
    get expandIcon(): null | string;
    set expandIcon(value: null | string);
    /**
     * [descr:dxTreeViewOptions.expandNodesRecursive]
    
     */
    get expandNodesRecursive(): boolean;
    set expandNodesRecursive(value: boolean);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxTreeViewOptions.hasItemsExpr]
    
     */
    get hasItemsExpr(): Function | string;
    set hasItemsExpr(value: Function | string);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:CollectionWidgetOptions.itemHoldTimeout]
    
     */
    get itemHoldTimeout(): number;
    set itemHoldTimeout(value: number);
    /**
     * [descr:dxTreeViewOptions.items]
    
     */
    get items(): Array<DevExpress.ui.dxTreeViewItem>;
    set items(value: Array<DevExpress.ui.dxTreeViewItem>);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.itemsExpr]
    
     */
    get itemsExpr(): Function | string;
    set itemsExpr(value: Function | string);
    /**
     * [descr:CollectionWidgetOptions.itemTemplate]
    
     */
    get itemTemplate(): any;
    set itemTemplate(value: any);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.keyExpr]
    
     */
    get keyExpr(): Function | string;
    set keyExpr(value: Function | string);
    /**
     * [descr:CollectionWidgetOptions.noDataText]
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * [descr:dxTreeViewOptions.parentIdExpr]
    
     */
    get parentIdExpr(): Function | string;
    set parentIdExpr(value: Function | string);
    /**
     * [descr:dxTreeViewOptions.rootValue]
    
     */
    get rootValue(): any;
    set rootValue(value: any);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxTreeViewOptions.scrollDirection]
    
     */
    get scrollDirection(): ScrollDirection;
    set scrollDirection(value: ScrollDirection);
    /**
     * [descr:SearchBoxMixinOptions.searchEditorOptions]
    
     */
    get searchEditorOptions(): dxTextBoxOptions;
    set searchEditorOptions(value: dxTextBoxOptions);
    /**
     * [descr:SearchBoxMixinOptions.searchEnabled]
    
     */
    get searchEnabled(): boolean;
    set searchEnabled(value: boolean);
    /**
     * [descr:SearchBoxMixinOptions.searchExpr]
    
     */
    get searchExpr(): Function | string | Array<Function | string>;
    set searchExpr(value: Function | string | Array<Function | string>);
    /**
     * [descr:SearchBoxMixinOptions.searchMode]
    
     */
    get searchMode(): SearchMode;
    set searchMode(value: SearchMode);
    /**
     * [descr:SearchBoxMixinOptions.searchTimeout]
    
     */
    get searchTimeout(): number | undefined;
    set searchTimeout(value: number | undefined);
    /**
     * [descr:SearchBoxMixinOptions.searchValue]
    
     */
    get searchValue(): string;
    set searchValue(value: string);
    /**
     * [descr:dxTreeViewOptions.selectAllText]
    
     */
    get selectAllText(): string;
    set selectAllText(value: string);
    /**
     * [descr:dxTreeViewOptions.selectByClick]
    
     */
    get selectByClick(): boolean;
    set selectByClick(value: boolean);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.selectedExpr]
    
     */
    get selectedExpr(): Function | string;
    set selectedExpr(value: Function | string);
    /**
     * [descr:dxTreeViewOptions.selectionMode]
    
     */
    get selectionMode(): SingleOrMultiple;
    set selectionMode(value: SingleOrMultiple);
    /**
     * [descr:dxTreeViewOptions.selectNodesRecursive]
    
     */
    get selectNodesRecursive(): boolean;
    set selectNodesRecursive(value: boolean);
    /**
     * [descr:dxTreeViewOptions.showCheckBoxesMode]
    
     */
    get showCheckBoxesMode(): TreeViewCheckBoxMode;
    set showCheckBoxesMode(value: TreeViewCheckBoxMode);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxTreeViewOptions.useNativeScrolling]
    
     */
    get useNativeScrolling(): boolean;
    set useNativeScrolling(value: boolean);
    /**
     * [descr:dxTreeViewOptions.virtualModeEnabled]
    
     */
    get virtualModeEnabled(): boolean;
    set virtualModeEnabled(value: boolean);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxTreeViewOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemClick]
    
    
     */
    onItemClick: EventEmitter<ItemClickEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemCollapsed]
    
    
     */
    onItemCollapsed: EventEmitter<ItemCollapsedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemContextMenu]
    
    
     */
    onItemContextMenu: EventEmitter<ItemContextMenuEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemExpanded]
    
    
     */
    onItemExpanded: EventEmitter<ItemExpandedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemHold]
    
    
     */
    onItemHold: EventEmitter<ItemHoldEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemRendered]
    
    
     */
    onItemRendered: EventEmitter<ItemRenderedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onItemSelectionChanged]
    
    
     */
    onItemSelectionChanged: EventEmitter<ItemSelectionChangedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onSelectAllValueChanged]
    
    
     */
    onSelectAllValueChanged: EventEmitter<SelectAllValueChangedEvent>;
    /**
    
     * [descr:dxTreeViewOptions.onSelectionChanged]
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    collapseIconChange: EventEmitter<null | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    createChildrenChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxTreeViewItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataStructureChange: EventEmitter<DataStructure>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandAllEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandedExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandEventChange: EventEmitter<TreeViewExpandEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandIconChange: EventEmitter<null | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    expandNodesRecursiveChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hasItemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<DevExpress.ui.dxTreeViewItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    parentIdExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollDirectionChange: EventEmitter<ScrollDirection>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEditorOptionsChange: EventEmitter<dxTextBoxOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<SearchMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchValueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectAllTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectByClickChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<SingleOrMultiple>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectNodesRecursiveChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCheckBoxesModeChange: EventEmitter<TreeViewCheckBoxMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    virtualModeEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxTreeView<any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeViewComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxTreeViewComponent<any>, "dx-tree-view", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "animationEnabled": "animationEnabled"; "collapseIcon": "collapseIcon"; "createChildren": "createChildren"; "dataSource": "dataSource"; "dataStructure": "dataStructure"; "disabled": "disabled"; "disabledExpr": "disabledExpr"; "displayExpr": "displayExpr"; "elementAttr": "elementAttr"; "expandAllEnabled": "expandAllEnabled"; "expandedExpr": "expandedExpr"; "expandEvent": "expandEvent"; "expandIcon": "expandIcon"; "expandNodesRecursive": "expandNodesRecursive"; "focusStateEnabled": "focusStateEnabled"; "hasItemsExpr": "hasItemsExpr"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemsExpr": "itemsExpr"; "itemTemplate": "itemTemplate"; "keyExpr": "keyExpr"; "noDataText": "noDataText"; "parentIdExpr": "parentIdExpr"; "rootValue": "rootValue"; "rtlEnabled": "rtlEnabled"; "scrollDirection": "scrollDirection"; "searchEditorOptions": "searchEditorOptions"; "searchEnabled": "searchEnabled"; "searchExpr": "searchExpr"; "searchMode": "searchMode"; "searchTimeout": "searchTimeout"; "searchValue": "searchValue"; "selectAllText": "selectAllText"; "selectByClick": "selectByClick"; "selectedExpr": "selectedExpr"; "selectionMode": "selectionMode"; "selectNodesRecursive": "selectNodesRecursive"; "showCheckBoxesMode": "showCheckBoxesMode"; "tabIndex": "tabIndex"; "useNativeScrolling": "useNativeScrolling"; "virtualModeEnabled": "virtualModeEnabled"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemCollapsed": "onItemCollapsed"; "onItemContextMenu": "onItemContextMenu"; "onItemExpanded": "onItemExpanded"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onItemSelectionChanged": "onItemSelectionChanged"; "onOptionChanged": "onOptionChanged"; "onSelectAllValueChanged": "onSelectAllValueChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationEnabledChange": "animationEnabledChange"; "collapseIconChange": "collapseIconChange"; "createChildrenChange": "createChildrenChange"; "dataSourceChange": "dataSourceChange"; "dataStructureChange": "dataStructureChange"; "disabledChange": "disabledChange"; "disabledExprChange": "disabledExprChange"; "displayExprChange": "displayExprChange"; "elementAttrChange": "elementAttrChange"; "expandAllEnabledChange": "expandAllEnabledChange"; "expandedExprChange": "expandedExprChange"; "expandEventChange": "expandEventChange"; "expandIconChange": "expandIconChange"; "expandNodesRecursiveChange": "expandNodesRecursiveChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "hasItemsExprChange": "hasItemsExprChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemsExprChange": "itemsExprChange"; "itemTemplateChange": "itemTemplateChange"; "keyExprChange": "keyExprChange"; "noDataTextChange": "noDataTextChange"; "parentIdExprChange": "parentIdExprChange"; "rootValueChange": "rootValueChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollDirectionChange": "scrollDirectionChange"; "searchEditorOptionsChange": "searchEditorOptionsChange"; "searchEnabledChange": "searchEnabledChange"; "searchExprChange": "searchExprChange"; "searchModeChange": "searchModeChange"; "searchTimeoutChange": "searchTimeoutChange"; "searchValueChange": "searchValueChange"; "selectAllTextChange": "selectAllTextChange"; "selectByClickChange": "selectByClickChange"; "selectedExprChange": "selectedExprChange"; "selectionModeChange": "selectionModeChange"; "selectNodesRecursiveChange": "selectNodesRecursiveChange"; "showCheckBoxesModeChange": "showCheckBoxesModeChange"; "tabIndexChange": "tabIndexChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "virtualModeEnabledChange": "virtualModeEnabledChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never>;
}
export declare class DxTreeViewModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeViewModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxTreeViewModule, [typeof DxTreeViewComponent], [typeof i1.DxiItemModule, typeof i1.DxoSearchEditorOptionsModule, typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxTreeViewComponent, typeof i1.DxiItemModule, typeof i1.DxoSearchEditorOptionsModule, typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxTreeViewModule>;
}
export { DxTreeViewTypes };
