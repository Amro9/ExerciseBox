/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import { ExportFormat, HorizontalAlignment, SingleMultipleOrNone, VerticalEdge } from 'devextreme/common';
import { DashStyle, Font, Palette, PaletteExtensionMode, TextOverflow, Theme, WordWrap } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { ClickEvent, DisposingEvent, DrawnEvent, DrillEvent, ExportedEvent, ExportingEvent, FileSavingEvent, HoverChangedEvent, IncidentOccurredEvent, InitializedEvent, NodesInitializedEvent, NodesRenderingEvent, OptionChangedEvent, SelectionChangedEvent, TreeMapColorizerType, TreeMapLayoutAlgorithm, TreeMapLayoutDirection } from 'devextreme/viz/tree_map';
import DxTreeMap from 'devextreme/viz/tree_map';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import type * as DxTreeMapTypes from "devextreme/viz/tree_map_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxTreeMap]

 */
export declare class DxTreeMapComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTreeMap;
    /**
     * [descr:dxTreeMapOptions.childrenField]
    
     */
    get childrenField(): string;
    set childrenField(value: string);
    /**
     * [descr:dxTreeMapOptions.colorField]
    
     */
    get colorField(): string;
    set colorField(value: string);
    /**
     * [descr:dxTreeMapOptions.colorizer]
    
     */
    get colorizer(): {
        colorCodeField?: string | undefined;
        colorizeGroups?: boolean;
        palette?: Palette | string | Array<string>;
        paletteExtensionMode?: PaletteExtensionMode;
        range?: Array<number>;
        type?: TreeMapColorizerType | undefined;
    };
    set colorizer(value: {
        colorCodeField?: string | undefined;
        colorizeGroups?: boolean;
        palette?: Palette | string | Array<string>;
        paletteExtensionMode?: PaletteExtensionMode;
        range?: Array<number>;
        type?: TreeMapColorizerType | undefined;
    });
    /**
     * [descr:dxTreeMapOptions.dataSource]
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<any>);
    /**
     * [descr:BaseWidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:BaseWidgetOptions.export]
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * [descr:dxTreeMapOptions.group]
    
     */
    get group(): {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number | undefined;
        hoverEnabled?: boolean | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: TextOverflow;
            visible?: boolean;
        };
        padding?: number;
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    };
    set group(value: {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number | undefined;
        hoverEnabled?: boolean | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: TextOverflow;
            visible?: boolean;
        };
        padding?: number;
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    });
    /**
     * [descr:dxTreeMapOptions.hoverEnabled]
    
     */
    get hoverEnabled(): boolean | undefined;
    set hoverEnabled(value: boolean | undefined);
    /**
     * [descr:dxTreeMapOptions.idField]
    
     */
    get idField(): string | undefined;
    set idField(value: string | undefined);
    /**
     * [descr:dxTreeMapOptions.interactWithGroup]
    
     */
    get interactWithGroup(): boolean;
    set interactWithGroup(value: boolean);
    /**
     * [descr:dxTreeMapOptions.labelField]
    
     */
    get labelField(): string;
    set labelField(value: string);
    /**
     * [descr:dxTreeMapOptions.layoutAlgorithm]
    
     */
    get layoutAlgorithm(): TreeMapLayoutAlgorithm | Function;
    set layoutAlgorithm(value: TreeMapLayoutAlgorithm | Function);
    /**
     * [descr:dxTreeMapOptions.layoutDirection]
    
     */
    get layoutDirection(): TreeMapLayoutDirection;
    set layoutDirection(value: TreeMapLayoutDirection);
    /**
     * [descr:BaseWidgetOptions.loadingIndicator]
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * [descr:dxTreeMapOptions.maxDepth]
    
     */
    get maxDepth(): number | undefined;
    set maxDepth(value: number | undefined);
    /**
     * [descr:dxTreeMapOptions.parentField]
    
     */
    get parentField(): string | undefined;
    set parentField(value: string | undefined);
    /**
     * [descr:BaseWidgetOptions.pathModified]
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxTreeMapOptions.selectionMode]
    
     */
    get selectionMode(): SingleMultipleOrNone | undefined;
    set selectionMode(value: SingleMultipleOrNone | undefined);
    /**
     * [descr:BaseWidgetOptions.size]
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * [descr:BaseWidgetOptions.theme]
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * [descr:dxTreeMapOptions.tile]
    
     */
    get tile(): {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    };
    set tile(value: {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    });
    /**
     * [descr:BaseWidgetOptions.title]
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * [descr:dxTreeMapOptions.tooltip]
    
     */
    get tooltip(): {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    });
    /**
     * [descr:dxTreeMapOptions.valueField]
    
     */
    get valueField(): string;
    set valueField(value: string);
    /**
    
     * [descr:dxTreeMapOptions.onClick]
    
    
     */
    onClick: EventEmitter<ClickEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onDrawn]
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onDrill]
    
    
     */
    onDrill: EventEmitter<DrillEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onExported]
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onExporting]
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onFileSaving]
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onHoverChanged]
    
    
     */
    onHoverChanged: EventEmitter<HoverChangedEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onIncidentOccurred]
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onNodesInitialized]
    
    
     */
    onNodesInitialized: EventEmitter<NodesInitializedEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onNodesRendering]
    
    
     */
    onNodesRendering: EventEmitter<NodesRenderingEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxTreeMapOptions.onSelectionChanged]
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    childrenFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colorFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colorizerChange: EventEmitter<{
        colorCodeField?: string | undefined;
        colorizeGroups?: boolean;
        palette?: Palette | string | Array<string>;
        paletteExtensionMode?: PaletteExtensionMode;
        range?: Array<number>;
        type?: TreeMapColorizerType | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupChange: EventEmitter<{
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number | undefined;
        hoverEnabled?: boolean | undefined;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: TextOverflow;
            visible?: boolean;
        };
        padding?: number;
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverEnabledChange: EventEmitter<boolean | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    idFieldChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    interactWithGroupChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelFieldChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    layoutAlgorithmChange: EventEmitter<TreeMapLayoutAlgorithm | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    layoutDirectionChange: EventEmitter<TreeMapLayoutDirection>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxDepthChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    parentFieldChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<SingleMultipleOrNone | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tileChange: EventEmitter<{
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string | undefined;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
        label?: {
            font?: Font;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number | undefined;
            };
            color?: string | undefined;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueFieldChange: EventEmitter<string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxTreeMap;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxTreeMapComponent, "dx-tree-map", never, { "childrenField": "childrenField"; "colorField": "colorField"; "colorizer": "colorizer"; "dataSource": "dataSource"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "group": "group"; "hoverEnabled": "hoverEnabled"; "idField": "idField"; "interactWithGroup": "interactWithGroup"; "labelField": "labelField"; "layoutAlgorithm": "layoutAlgorithm"; "layoutDirection": "layoutDirection"; "loadingIndicator": "loadingIndicator"; "maxDepth": "maxDepth"; "parentField": "parentField"; "pathModified": "pathModified"; "redrawOnResize": "redrawOnResize"; "rtlEnabled": "rtlEnabled"; "selectionMode": "selectionMode"; "size": "size"; "theme": "theme"; "tile": "tile"; "title": "title"; "tooltip": "tooltip"; "valueField": "valueField"; }, { "onClick": "onClick"; "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onDrill": "onDrill"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onHoverChanged": "onHoverChanged"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onNodesInitialized": "onNodesInitialized"; "onNodesRendering": "onNodesRendering"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "childrenFieldChange": "childrenFieldChange"; "colorFieldChange": "colorFieldChange"; "colorizerChange": "colorizerChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "groupChange": "groupChange"; "hoverEnabledChange": "hoverEnabledChange"; "idFieldChange": "idFieldChange"; "interactWithGroupChange": "interactWithGroupChange"; "labelFieldChange": "labelFieldChange"; "layoutAlgorithmChange": "layoutAlgorithmChange"; "layoutDirectionChange": "layoutDirectionChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "maxDepthChange": "maxDepthChange"; "parentFieldChange": "parentFieldChange"; "pathModifiedChange": "pathModifiedChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectionModeChange": "selectionModeChange"; "sizeChange": "sizeChange"; "themeChange": "themeChange"; "tileChange": "tileChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "valueFieldChange": "valueFieldChange"; }, never, never>;
}
export declare class DxTreeMapModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxTreeMapModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxTreeMapModule, [typeof DxTreeMapComponent], [typeof i1.DxoColorizerModule, typeof i1.DxoExportModule, typeof i1.DxoGroupModule, typeof i1.DxoBorderModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoLabelModule, typeof i1.DxoFontModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoSizeModule, typeof i1.DxoTileModule, typeof i1.DxoTitleModule, typeof i1.DxoMarginModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoFormatModule, typeof i1.DxoShadowModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxTreeMapComponent, typeof i1.DxoColorizerModule, typeof i1.DxoExportModule, typeof i1.DxoGroupModule, typeof i1.DxoBorderModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoLabelModule, typeof i1.DxoFontModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoSizeModule, typeof i1.DxoTileModule, typeof i1.DxoTitleModule, typeof i1.DxoMarginModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoFormatModule, typeof i1.DxoShadowModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxTreeMapModule>;
}
export { DxTreeMapTypes };
