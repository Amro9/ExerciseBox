/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Orientation, PageOrientation } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { ContentReadyEvent, CustomCommandEvent, DiagramAutoZoomMode, DiagramCommand, DiagramConnectorLineEnd, DiagramConnectorLineType, DiagramDataLayoutType, DiagramPanelVisibility, DiagramShapeCategory, DiagramShapeType, DiagramToolboxDisplayMode, DiagramUnits, DisposingEvent, InitializedEvent, ItemClickEvent, ItemDblClickEvent, OptionChangedEvent, RequestEditOperationEvent, RequestLayoutUpdateEvent, SelectionChangedEvent } from 'devextreme/ui/diagram';
import DxDiagram from 'devextreme/ui/diagram';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiCustomShapeComponent } from 'devextreme-angular/ui/nested';
import type * as DxDiagramTypes from "devextreme/ui/diagram_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxDiagram]

 */
export declare class DxDiagramComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDiagram;
    /**
     * [descr:dxDiagramOptions.autoZoomMode]
    
     */
    get autoZoomMode(): DiagramAutoZoomMode;
    set autoZoomMode(value: DiagramAutoZoomMode);
    /**
     * [descr:dxDiagramOptions.contextMenu]
    
     */
    get contextMenu(): {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        enabled?: boolean;
    };
    set contextMenu(value: {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        enabled?: boolean;
    });
    /**
     * [descr:dxDiagramOptions.contextToolbox]
    
     */
    get contextToolbox(): {
        category?: DiagramShapeCategory | string;
        displayMode?: DiagramToolboxDisplayMode;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<DiagramShapeType | string>;
        width?: number;
    };
    set contextToolbox(value: {
        category?: DiagramShapeCategory | string;
        displayMode?: DiagramToolboxDisplayMode;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<DiagramShapeType | string>;
        width?: number;
    });
    /**
     * [descr:dxDiagramOptions.customShapes]
    
     */
    get customShapes(): Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: DiagramShapeType | string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>;
    set customShapes(value: Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: DiagramShapeType | string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>);
    /**
     * [descr:dxDiagramOptions.customShapeTemplate]
    
     */
    get customShapeTemplate(): any;
    set customShapeTemplate(value: any);
    /**
     * [descr:dxDiagramOptions.customShapeToolboxTemplate]
    
     */
    get customShapeToolboxTemplate(): any;
    set customShapeToolboxTemplate(value: any);
    /**
     * [descr:dxDiagramOptions.defaultItemProperties]
    
     */
    get defaultItemProperties(): {
        connectorLineEnd?: DiagramConnectorLineEnd;
        connectorLineStart?: DiagramConnectorLineEnd;
        connectorLineType?: DiagramConnectorLineType;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    };
    set defaultItemProperties(value: {
        connectorLineEnd?: DiagramConnectorLineEnd;
        connectorLineStart?: DiagramConnectorLineEnd;
        connectorLineType?: DiagramConnectorLineType;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    });
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:dxDiagramOptions.edges]
    
     */
    get edges(): {
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    };
    set edges(value: {
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    });
    /**
     * [descr:dxDiagramOptions.editing]
    
     */
    get editing(): {
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    };
    set editing(value: {
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    });
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxDiagramOptions.export]
    
     */
    get export(): {
        fileName?: string;
    };
    set export(value: {
        fileName?: string;
    });
    /**
     * [descr:dxDiagramOptions.fullScreen]
    
     */
    get fullScreen(): boolean;
    set fullScreen(value: boolean);
    /**
     * [descr:dxDiagramOptions.gridSize]
    
     */
    get gridSize(): number | {
        items?: Array<number>;
        value?: number;
    };
    set gridSize(value: number | {
        items?: Array<number>;
        value?: number;
    });
    /**
     * [descr:dxDiagramOptions.hasChanges]
    
     */
    get hasChanges(): boolean;
    set hasChanges(value: boolean);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:dxDiagramOptions.historyToolbar]
    
     */
    get historyToolbar(): {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    };
    set historyToolbar(value: {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    });
    /**
     * [descr:dxDiagramOptions.mainToolbar]
    
     */
    get mainToolbar(): {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    };
    set mainToolbar(value: {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    });
    /**
     * [descr:dxDiagramOptions.nodes]
    
     */
    get nodes(): {
        autoLayout?: DiagramDataLayoutType | {
            orientation?: Orientation;
            type?: DiagramDataLayoutType;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    };
    set nodes(value: {
        autoLayout?: DiagramDataLayoutType | {
            orientation?: Orientation;
            type?: DiagramDataLayoutType;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    });
    /**
     * [descr:dxDiagramOptions.pageColor]
    
     */
    get pageColor(): string;
    set pageColor(value: string);
    /**
     * [descr:dxDiagramOptions.pageOrientation]
    
     */
    get pageOrientation(): PageOrientation;
    set pageOrientation(value: PageOrientation);
    /**
     * [descr:dxDiagramOptions.pageSize]
    
     */
    get pageSize(): {
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    };
    set pageSize(value: {
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    });
    /**
     * [descr:dxDiagramOptions.propertiesPanel]
    
     */
    get propertiesPanel(): {
        tabs?: Array<any | {
            commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
            groups?: Array<any | {
                commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: DiagramPanelVisibility;
    };
    set propertiesPanel(value: {
        tabs?: Array<any | {
            commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
            groups?: Array<any | {
                commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: DiagramPanelVisibility;
    });
    /**
     * [descr:dxDiagramOptions.readOnly]
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxDiagramOptions.showGrid]
    
     */
    get showGrid(): boolean;
    set showGrid(value: boolean);
    /**
     * [descr:dxDiagramOptions.simpleView]
    
     */
    get simpleView(): boolean;
    set simpleView(value: boolean);
    /**
     * [descr:dxDiagramOptions.snapToGrid]
    
     */
    get snapToGrid(): boolean;
    set snapToGrid(value: boolean);
    /**
     * [descr:dxDiagramOptions.toolbox]
    
     */
    get toolbox(): {
        groups?: Array<DiagramShapeCategory | any | {
            category?: DiagramShapeCategory | string;
            displayMode?: DiagramToolboxDisplayMode;
            expanded?: boolean;
            shapes?: Array<DiagramShapeType | string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: DiagramPanelVisibility;
        width?: number | undefined;
    };
    set toolbox(value: {
        groups?: Array<DiagramShapeCategory | any | {
            category?: DiagramShapeCategory | string;
            displayMode?: DiagramToolboxDisplayMode;
            expanded?: boolean;
            shapes?: Array<DiagramShapeType | string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: DiagramPanelVisibility;
        width?: number | undefined;
    });
    /**
     * [descr:dxDiagramOptions.units]
    
     */
    get units(): DiagramUnits;
    set units(value: DiagramUnits);
    /**
     * [descr:dxDiagramOptions.useNativeScrolling]
    
     */
    get useNativeScrolling(): boolean;
    set useNativeScrolling(value: boolean);
    /**
     * [descr:dxDiagramOptions.viewToolbar]
    
     */
    get viewToolbar(): {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    };
    set viewToolbar(value: {
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    });
    /**
     * [descr:dxDiagramOptions.viewUnits]
    
     */
    get viewUnits(): DiagramUnits;
    set viewUnits(value: DiagramUnits);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
     * [descr:dxDiagramOptions.zoomLevel]
    
     */
    get zoomLevel(): number | {
        items?: Array<number>;
        value?: number | undefined;
    };
    set zoomLevel(value: number | {
        items?: Array<number>;
        value?: number | undefined;
    });
    /**
    
     * [descr:dxDiagramOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxDiagramOptions.onCustomCommand]
    
    
     */
    onCustomCommand: EventEmitter<CustomCommandEvent>;
    /**
    
     * [descr:dxDiagramOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxDiagramOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxDiagramOptions.onItemClick]
    
    
     */
    onItemClick: EventEmitter<ItemClickEvent>;
    /**
    
     * [descr:dxDiagramOptions.onItemDblClick]
    
    
     */
    onItemDblClick: EventEmitter<ItemDblClickEvent>;
    /**
    
     * [descr:dxDiagramOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxDiagramOptions.onRequestEditOperation]
    
    
     */
    onRequestEditOperation: EventEmitter<RequestEditOperationEvent>;
    /**
    
     * [descr:dxDiagramOptions.onRequestLayoutUpdate]
    
    
     */
    onRequestLayoutUpdate: EventEmitter<RequestLayoutUpdateEvent>;
    /**
    
     * [descr:dxDiagramOptions.onSelectionChanged]
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoZoomModeChange: EventEmitter<DiagramAutoZoomMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<{
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextToolboxChange: EventEmitter<{
        category?: DiagramShapeCategory | string;
        displayMode?: DiagramToolboxDisplayMode;
        enabled?: boolean;
        shapeIconsPerRow?: number;
        shapes?: Array<DiagramShapeType | string>;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapesChange: EventEmitter<Array<any | {
        allowEditImage?: boolean;
        allowEditText?: boolean;
        allowResize?: boolean;
        backgroundImageHeight?: number;
        backgroundImageLeft?: number;
        backgroundImageToolboxUrl?: string;
        backgroundImageTop?: number;
        backgroundImageUrl?: string;
        backgroundImageWidth?: number;
        baseType?: DiagramShapeType | string;
        category?: string;
        connectionPoints?: Array<any | {
            x?: number;
            y?: number;
        }>;
        defaultHeight?: number;
        defaultImageUrl?: string;
        defaultText?: string;
        defaultWidth?: number;
        imageHeight?: number;
        imageLeft?: number;
        imageTop?: number;
        imageWidth?: number;
        keepRatioOnAutoSize?: boolean;
        maxHeight?: number;
        maxWidth?: number;
        minHeight?: number;
        minWidth?: number;
        template?: any;
        templateHeight?: number;
        templateLeft?: number;
        templateTop?: number;
        templateWidth?: number;
        textHeight?: number;
        textLeft?: number;
        textTop?: number;
        textWidth?: number;
        title?: string;
        toolboxTemplate?: any;
        toolboxWidthToHeightRatio?: number;
        type?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapeTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customShapeToolboxTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    defaultItemPropertiesChange: EventEmitter<{
        connectorLineEnd?: DiagramConnectorLineEnd;
        connectorLineStart?: DiagramConnectorLineEnd;
        connectorLineType?: DiagramConnectorLineType;
        shapeMaxHeight?: number | undefined;
        shapeMaxWidth?: number | undefined;
        shapeMinHeight?: number | undefined;
        shapeMinWidth?: number | undefined;
        style?: any;
        textStyle?: any;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    edgesChange: EventEmitter<{
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        fromExpr?: Function | string;
        fromLineEndExpr?: Function | string | undefined;
        fromPointIndexExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        lineTypeExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        pointsExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string | undefined;
        textStyleExpr?: Function | string | undefined;
        toExpr?: Function | string;
        toLineEndExpr?: Function | string | undefined;
        toPointIndexExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowAddShape?: boolean;
        allowChangeConnection?: boolean;
        allowChangeConnectorPoints?: boolean;
        allowChangeConnectorText?: boolean;
        allowChangeShapeText?: boolean;
        allowDeleteConnector?: boolean;
        allowDeleteShape?: boolean;
        allowMoveShape?: boolean;
        allowResizeShape?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        fileName?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fullScreenChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    gridSizeChange: EventEmitter<number | {
        items?: Array<number>;
        value?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hasChangesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    historyToolbarChange: EventEmitter<{
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mainToolbarChange: EventEmitter<{
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nodesChange: EventEmitter<{
        autoLayout?: DiagramDataLayoutType | {
            orientation?: Orientation;
            type?: DiagramDataLayoutType;
        };
        autoSizeEnabled?: boolean;
        containerChildrenExpr?: Function | string | undefined;
        containerKeyExpr?: Function | string;
        customDataExpr?: Function | string | undefined;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        heightExpr?: Function | string | undefined;
        imageUrlExpr?: Function | string | undefined;
        itemsExpr?: Function | string | undefined;
        keyExpr?: Function | string;
        leftExpr?: Function | string | undefined;
        lockedExpr?: Function | string | undefined;
        parentKeyExpr?: Function | string | undefined;
        styleExpr?: Function | string | undefined;
        textExpr?: Function | string;
        textStyleExpr?: Function | string | undefined;
        topExpr?: Function | string | undefined;
        typeExpr?: Function | string;
        widthExpr?: Function | string | undefined;
        zIndexExpr?: Function | string | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageOrientationChange: EventEmitter<PageOrientation>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageSizeChange: EventEmitter<{
        height?: number;
        items?: Array<any | {
            height?: number;
            text?: string;
            width?: number;
        }>;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    propertiesPanelChange: EventEmitter<{
        tabs?: Array<any | {
            commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
            groups?: Array<any | {
                commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
                title?: string;
            }>;
            title?: string;
        }>;
        visibility?: DiagramPanelVisibility;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showGridChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    simpleViewChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    snapToGridChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolboxChange: EventEmitter<{
        groups?: Array<DiagramShapeCategory | any | {
            category?: DiagramShapeCategory | string;
            displayMode?: DiagramToolboxDisplayMode;
            expanded?: boolean;
            shapes?: Array<DiagramShapeType | string>;
            title?: string;
        }>;
        shapeIconsPerRow?: number;
        showSearch?: boolean;
        visibility?: DiagramPanelVisibility;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    unitsChange: EventEmitter<DiagramUnits>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewToolbarChange: EventEmitter<{
        commands?: Array<DiagramCommand | DevExpress.ui.dxDiagramCustomCommand>;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewUnitsChange: EventEmitter<DiagramUnits>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomLevelChange: EventEmitter<number | {
        items?: Array<number>;
        value?: number | undefined;
    }>;
    get customShapesChildren(): QueryList<DxiCustomShapeComponent>;
    set customShapesChildren(value: QueryList<DxiCustomShapeComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDiagram;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDiagramComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxDiagramComponent, "dx-diagram", never, { "autoZoomMode": "autoZoomMode"; "contextMenu": "contextMenu"; "contextToolbox": "contextToolbox"; "customShapes": "customShapes"; "customShapeTemplate": "customShapeTemplate"; "customShapeToolboxTemplate": "customShapeToolboxTemplate"; "defaultItemProperties": "defaultItemProperties"; "disabled": "disabled"; "edges": "edges"; "editing": "editing"; "elementAttr": "elementAttr"; "export": "export"; "fullScreen": "fullScreen"; "gridSize": "gridSize"; "hasChanges": "hasChanges"; "height": "height"; "historyToolbar": "historyToolbar"; "mainToolbar": "mainToolbar"; "nodes": "nodes"; "pageColor": "pageColor"; "pageOrientation": "pageOrientation"; "pageSize": "pageSize"; "propertiesPanel": "propertiesPanel"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "showGrid": "showGrid"; "simpleView": "simpleView"; "snapToGrid": "snapToGrid"; "toolbox": "toolbox"; "units": "units"; "useNativeScrolling": "useNativeScrolling"; "viewToolbar": "viewToolbar"; "viewUnits": "viewUnits"; "visible": "visible"; "width": "width"; "zoomLevel": "zoomLevel"; }, { "onContentReady": "onContentReady"; "onCustomCommand": "onCustomCommand"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemDblClick": "onItemDblClick"; "onOptionChanged": "onOptionChanged"; "onRequestEditOperation": "onRequestEditOperation"; "onRequestLayoutUpdate": "onRequestLayoutUpdate"; "onSelectionChanged": "onSelectionChanged"; "autoZoomModeChange": "autoZoomModeChange"; "contextMenuChange": "contextMenuChange"; "contextToolboxChange": "contextToolboxChange"; "customShapesChange": "customShapesChange"; "customShapeTemplateChange": "customShapeTemplateChange"; "customShapeToolboxTemplateChange": "customShapeToolboxTemplateChange"; "defaultItemPropertiesChange": "defaultItemPropertiesChange"; "disabledChange": "disabledChange"; "edgesChange": "edgesChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "fullScreenChange": "fullScreenChange"; "gridSizeChange": "gridSizeChange"; "hasChangesChange": "hasChangesChange"; "heightChange": "heightChange"; "historyToolbarChange": "historyToolbarChange"; "mainToolbarChange": "mainToolbarChange"; "nodesChange": "nodesChange"; "pageColorChange": "pageColorChange"; "pageOrientationChange": "pageOrientationChange"; "pageSizeChange": "pageSizeChange"; "propertiesPanelChange": "propertiesPanelChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "showGridChange": "showGridChange"; "simpleViewChange": "simpleViewChange"; "snapToGridChange": "snapToGridChange"; "toolboxChange": "toolboxChange"; "unitsChange": "unitsChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "viewToolbarChange": "viewToolbarChange"; "viewUnitsChange": "viewUnitsChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "zoomLevelChange": "zoomLevelChange"; }, ["customShapesChildren"], never>;
}
export declare class DxDiagramModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDiagramModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxDiagramModule, [typeof DxDiagramComponent], [typeof i1.DxoContextMenuModule, typeof i1.DxiCommandModule, typeof i1.DxiItemModule, typeof i1.DxoContextToolboxModule, typeof i1.DxiCustomShapeModule, typeof i1.DxiConnectionPointModule, typeof i1.DxoDefaultItemPropertiesModule, typeof i1.DxoEdgesModule, typeof i1.DxoEditingModule, typeof i1.DxoExportModule, typeof i1.DxoGridSizeModule, typeof i1.DxoHistoryToolbarModule, typeof i1.DxoMainToolbarModule, typeof i1.DxoNodesModule, typeof i1.DxoAutoLayoutModule, typeof i1.DxoPageSizeModule, typeof i1.DxoPropertiesPanelModule, typeof i1.DxiTabModule, typeof i1.DxiGroupModule, typeof i1.DxoToolboxModule, typeof i1.DxoViewToolbarModule, typeof i1.DxoZoomLevelModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxDiagramComponent, typeof i1.DxoContextMenuModule, typeof i1.DxiCommandModule, typeof i1.DxiItemModule, typeof i1.DxoContextToolboxModule, typeof i1.DxiCustomShapeModule, typeof i1.DxiConnectionPointModule, typeof i1.DxoDefaultItemPropertiesModule, typeof i1.DxoEdgesModule, typeof i1.DxoEditingModule, typeof i1.DxoExportModule, typeof i1.DxoGridSizeModule, typeof i1.DxoHistoryToolbarModule, typeof i1.DxoMainToolbarModule, typeof i1.DxoNodesModule, typeof i1.DxoAutoLayoutModule, typeof i1.DxoPageSizeModule, typeof i1.DxoPropertiesPanelModule, typeof i1.DxiTabModule, typeof i1.DxiGroupModule, typeof i1.DxoToolboxModule, typeof i1.DxoViewToolbarModule, typeof i1.DxoZoomLevelModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxDiagramModule>;
}
export { DxDiagramTypes };
