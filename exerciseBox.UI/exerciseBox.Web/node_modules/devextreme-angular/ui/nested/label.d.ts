/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { HorizontalAlignment, HorizontalEdge, Position, VerticalAlignment, VerticalEdge } from 'devextreme/common';
import { ChartsAxisLabelOverlap, DashStyle, Font, LabelOverlap, LabelPosition, RelativePosition, TextOverflow, WordWrap } from 'devextreme/common/charts';
import { Format } from 'devextreme/localization';
import { LabelLocation } from 'devextreme/ui/form';
import { ChartLabelDisplayMode } from 'devextreme/viz/chart';
import { CircularGaugeLabelOverlap } from 'devextreme/viz/circular_gauge';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoLabelComponent extends NestedOption implements OnDestroy, OnInit {
    get connectorColor(): string | undefined;
    set connectorColor(value: string | undefined);
    get connectorWidth(): number;
    set connectorWidth(value: number);
    get customizeText(): Function;
    set customizeText(value: Function);
    get font(): Font;
    set font(value: Font);
    get format(): Format | string | undefined;
    set format(value: Format | string | undefined);
    get indent(): number;
    set indent(value: number);
    get visible(): boolean;
    set visible(value: boolean);
    get horizontalAlignment(): HorizontalAlignment | HorizontalEdge;
    set horizontalAlignment(value: HorizontalAlignment | HorizontalEdge);
    get position(): RelativePosition | Position | LabelPosition | VerticalEdge;
    set position(value: RelativePosition | Position | LabelPosition | VerticalEdge);
    get text(): string | undefined;
    set text(value: string | undefined);
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(value: VerticalAlignment);
    get alignment(): HorizontalAlignment | undefined;
    set alignment(value: HorizontalAlignment | undefined);
    get customizeHint(): Function;
    set customizeHint(value: Function);
    get displayMode(): ChartLabelDisplayMode;
    set displayMode(value: ChartLabelDisplayMode);
    get indentFromAxis(): number;
    set indentFromAxis(value: number);
    get overlappingBehavior(): ChartsAxisLabelOverlap | LabelOverlap | TextOverflow;
    set overlappingBehavior(value: ChartsAxisLabelOverlap | LabelOverlap | TextOverflow);
    get rotationAngle(): number;
    set rotationAngle(value: number);
    get staggeringSpacing(): number;
    set staggeringSpacing(value: number);
    get template(): any | undefined;
    set template(value: any | undefined);
    get textOverflow(): TextOverflow;
    set textOverflow(value: TextOverflow);
    get wordWrap(): WordWrap;
    set wordWrap(value: WordWrap);
    get argumentFormat(): Format | string | undefined;
    set argumentFormat(value: Format | string | undefined);
    get backgroundColor(): string | undefined;
    set backgroundColor(value: string | undefined);
    get border(): {
        color?: string;
        dashStyle?: DashStyle;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string;
        dashStyle?: DashStyle;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        visible?: boolean;
        width?: number;
    });
    get connector(): {
        color?: string | undefined;
        visible?: boolean;
        width?: number;
    } | {
        color?: string | undefined;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set connector(value: {
        color?: string | undefined;
        visible?: boolean;
        width?: number;
    } | {
        color?: string | undefined;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get displayFormat(): string | undefined;
    set displayFormat(value: string | undefined);
    get horizontalOffset(): number;
    set horizontalOffset(value: number);
    get showForZeroValues(): boolean;
    set showForZeroValues(value: boolean);
    get verticalOffset(): number;
    set verticalOffset(value: number);
    get hideFirstOrLast(): CircularGaugeLabelOverlap;
    set hideFirstOrLast(value: CircularGaugeLabelOverlap);
    get indentFromTick(): number;
    set indentFromTick(value: number);
    get useRangeColors(): boolean;
    set useRangeColors(value: boolean);
    get location(): LabelLocation;
    set location(value: LabelLocation);
    get showColon(): boolean;
    set showColon(value: boolean);
    get radialOffset(): number;
    set radialOffset(value: number);
    get topIndent(): number;
    set topIndent(value: number);
    get shadow(): {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    set shadow(value: {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    });
    get useNodeColors(): boolean;
    set useNodeColors(value: boolean);
    get dataField(): string;
    set dataField(value: string);
    get enabled(): boolean;
    set enabled(value: boolean);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoLabelComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoLabelComponent, "dxo-label", never, { "connectorColor": "connectorColor"; "connectorWidth": "connectorWidth"; "customizeText": "customizeText"; "font": "font"; "format": "format"; "indent": "indent"; "visible": "visible"; "horizontalAlignment": "horizontalAlignment"; "position": "position"; "text": "text"; "verticalAlignment": "verticalAlignment"; "alignment": "alignment"; "customizeHint": "customizeHint"; "displayMode": "displayMode"; "indentFromAxis": "indentFromAxis"; "overlappingBehavior": "overlappingBehavior"; "rotationAngle": "rotationAngle"; "staggeringSpacing": "staggeringSpacing"; "template": "template"; "textOverflow": "textOverflow"; "wordWrap": "wordWrap"; "argumentFormat": "argumentFormat"; "backgroundColor": "backgroundColor"; "border": "border"; "connector": "connector"; "displayFormat": "displayFormat"; "horizontalOffset": "horizontalOffset"; "showForZeroValues": "showForZeroValues"; "verticalOffset": "verticalOffset"; "hideFirstOrLast": "hideFirstOrLast"; "indentFromTick": "indentFromTick"; "useRangeColors": "useRangeColors"; "location": "location"; "showColon": "showColon"; "radialOffset": "radialOffset"; "topIndent": "topIndent"; "shadow": "shadow"; "useNodeColors": "useNodeColors"; "dataField": "dataField"; "enabled": "enabled"; }, {}, never, never>;
}
export declare class DxoLabelModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoLabelModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoLabelModule, [typeof DxoLabelComponent], never, [typeof DxoLabelComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoLabelModule>;
}
