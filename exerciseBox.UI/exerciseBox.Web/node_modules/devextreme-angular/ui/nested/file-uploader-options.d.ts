/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter } from '@angular/core';
import { NestedOptionHost } from 'devextreme-angular/core';
import { DxoFileUploaderOptions } from './base/file-uploader-options';
import * as i0 from "@angular/core";
export declare class DxoFileUploaderOptionsComponent extends DxoFileUploaderOptions implements OnDestroy, OnInit {
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<Array<any>>;
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoFileUploaderOptionsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoFileUploaderOptionsComponent, "dxo-file-uploader-options", never, { "abortUpload": "abortUpload"; "accept": "accept"; "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowCanceling": "allowCanceling"; "allowedFileExtensions": "allowedFileExtensions"; "chunkSize": "chunkSize"; "dialogTrigger": "dialogTrigger"; "disabled": "disabled"; "dropZone": "dropZone"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "inputAttr": "inputAttr"; "invalidFileExtensionMessage": "invalidFileExtensionMessage"; "invalidMaxFileSizeMessage": "invalidMaxFileSizeMessage"; "invalidMinFileSizeMessage": "invalidMinFileSizeMessage"; "isDirty": "isDirty"; "isValid": "isValid"; "labelText": "labelText"; "maxFileSize": "maxFileSize"; "minFileSize": "minFileSize"; "multiple": "multiple"; "name": "name"; "onBeforeSend": "onBeforeSend"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onDropZoneEnter": "onDropZoneEnter"; "onDropZoneLeave": "onDropZoneLeave"; "onFilesUploaded": "onFilesUploaded"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onProgress": "onProgress"; "onUploadAborted": "onUploadAborted"; "onUploaded": "onUploaded"; "onUploadError": "onUploadError"; "onUploadStarted": "onUploadStarted"; "onValueChanged": "onValueChanged"; "progress": "progress"; "readOnly": "readOnly"; "readyToUploadMessage": "readyToUploadMessage"; "rtlEnabled": "rtlEnabled"; "selectButtonText": "selectButtonText"; "showFileList": "showFileList"; "tabIndex": "tabIndex"; "uploadAbortedMessage": "uploadAbortedMessage"; "uploadButtonText": "uploadButtonText"; "uploadChunk": "uploadChunk"; "uploadCustomData": "uploadCustomData"; "uploadedMessage": "uploadedMessage"; "uploadFailedMessage": "uploadFailedMessage"; "uploadFile": "uploadFile"; "uploadHeaders": "uploadHeaders"; "uploadMethod": "uploadMethod"; "uploadMode": "uploadMode"; "uploadUrl": "uploadUrl"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationStatus": "validationStatus"; "value": "value"; "visible": "visible"; "width": "width"; }, { "valueChange": "valueChange"; }, never, never>;
}
export declare class DxoFileUploaderOptionsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoFileUploaderOptionsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoFileUploaderOptionsModule, [typeof DxoFileUploaderOptionsComponent], never, [typeof DxoFileUploaderOptionsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoFileUploaderOptionsModule>;
}
