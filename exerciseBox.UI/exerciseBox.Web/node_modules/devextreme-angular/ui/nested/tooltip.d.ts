/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy } from '@angular/core';
import { TooltipShowMode, VerticalEdge } from 'devextreme/common';
import { DashStyle, Font } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Format } from 'devextreme/localization';
import { ChartTooltipLocation } from 'devextreme/viz/chart';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxoTooltipComponent extends NestedOption implements OnDestroy, OnInit {
    get arrowLength(): number;
    set arrowLength(value: number);
    get border(): {
        color?: string;
        dashStyle?: DashStyle;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    };
    set border(value: {
        color?: string;
        dashStyle?: DashStyle;
        opacity?: number | undefined;
        visible?: boolean;
        width?: number;
    });
    get color(): string;
    set color(value: string);
    get container(): string | UserDefinedElement | undefined;
    set container(value: string | UserDefinedElement | undefined);
    get contentTemplate(): any | undefined;
    set contentTemplate(value: any | undefined);
    get cornerRadius(): number;
    set cornerRadius(value: number);
    get customizeTooltip(): Function | undefined;
    set customizeTooltip(value: Function | undefined);
    get enabled(): boolean;
    set enabled(value: boolean);
    get font(): Font;
    set font(value: Font);
    get format(): Format | string | undefined;
    set format(value: Format | string | undefined);
    get interactive(): boolean;
    set interactive(value: boolean);
    get opacity(): number | undefined;
    set opacity(value: number | undefined);
    get paddingLeftRight(): number;
    set paddingLeftRight(value: number);
    get paddingTopBottom(): number;
    set paddingTopBottom(value: number);
    get shadow(): {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    };
    set shadow(value: {
        blur?: number;
        color?: string;
        offsetX?: number;
        offsetY?: number;
        opacity?: number;
    });
    get zIndex(): number | undefined;
    set zIndex(value: number | undefined);
    get argumentFormat(): Format | string | undefined;
    set argumentFormat(value: Format | string | undefined);
    get location(): ChartTooltipLocation;
    set location(value: ChartTooltipLocation);
    get shared(): boolean;
    set shared(value: boolean);
    get isShown(): boolean;
    set isShown(value: boolean);
    get text(): string;
    set text(value: string);
    get position(): VerticalEdge;
    set position(value: VerticalEdge);
    get showMode(): TooltipShowMode;
    set showMode(value: TooltipShowMode);
    get customizeLinkTooltip(): Function | undefined;
    set customizeLinkTooltip(value: Function | undefined);
    get customizeNodeTooltip(): Function | undefined;
    set customizeNodeTooltip(value: Function | undefined);
    get linkTooltipTemplate(): any | undefined;
    set linkTooltipTemplate(value: any | undefined);
    get nodeTooltipTemplate(): any | undefined;
    set nodeTooltipTemplate(value: any | undefined);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTooltipComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoTooltipComponent, "dxo-tooltip", never, { "arrowLength": "arrowLength"; "border": "border"; "color": "color"; "container": "container"; "contentTemplate": "contentTemplate"; "cornerRadius": "cornerRadius"; "customizeTooltip": "customizeTooltip"; "enabled": "enabled"; "font": "font"; "format": "format"; "interactive": "interactive"; "opacity": "opacity"; "paddingLeftRight": "paddingLeftRight"; "paddingTopBottom": "paddingTopBottom"; "shadow": "shadow"; "zIndex": "zIndex"; "argumentFormat": "argumentFormat"; "location": "location"; "shared": "shared"; "isShown": "isShown"; "text": "text"; "position": "position"; "showMode": "showMode"; "customizeLinkTooltip": "customizeLinkTooltip"; "customizeNodeTooltip": "customizeNodeTooltip"; "linkTooltipTemplate": "linkTooltipTemplate"; "nodeTooltipTemplate": "nodeTooltipTemplate"; }, {}, never, never>;
}
export declare class DxoTooltipModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTooltipModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoTooltipModule, [typeof DxoTooltipComponent], never, [typeof DxoTooltipComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoTooltipModule>;
}
