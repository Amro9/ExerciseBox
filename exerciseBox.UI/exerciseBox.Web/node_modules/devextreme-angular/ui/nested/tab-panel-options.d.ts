/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import { NestedOptionHost } from 'devextreme-angular/core';
import { DxoTabPanelOptions } from './base/tab-panel-options';
import { DxiItemComponent } from './item-dxi';
import * as i0 from "@angular/core";
export declare class DxoTabPanelOptionsComponent extends DxoTabPanelOptions implements OnDestroy, OnInit {
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        tabTemplate?: any;
        template?: any;
        text?: string;
        title?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    protected get _optionPath(): string;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTabPanelOptionsComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoTabPanelOptionsComponent, "dxo-tab-panel-options", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "animationEnabled": "animationEnabled"; "dataSource": "dataSource"; "deferRendering": "deferRendering"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "iconPosition": "iconPosition"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemTemplate": "itemTemplate"; "itemTitleTemplate": "itemTitleTemplate"; "loop": "loop"; "noDataText": "noDataText"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "onTitleClick": "onTitleClick"; "onTitleHold": "onTitleHold"; "onTitleRendered": "onTitleRendered"; "repaintChangesOnly": "repaintChangesOnly"; "rtlEnabled": "rtlEnabled"; "scrollByContent": "scrollByContent"; "scrollingEnabled": "scrollingEnabled"; "selectedIndex": "selectedIndex"; "selectedItem": "selectedItem"; "showNavButtons": "showNavButtons"; "stylingMode": "stylingMode"; "swipeEnabled": "swipeEnabled"; "tabIndex": "tabIndex"; "tabsPosition": "tabsPosition"; "visible": "visible"; "width": "width"; }, { "itemsChange": "itemsChange"; "selectedIndexChange": "selectedIndexChange"; "selectedItemChange": "selectedItemChange"; }, ["itemsChildren"], never>;
}
export declare class DxoTabPanelOptionsModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoTabPanelOptionsModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoTabPanelOptionsModule, [typeof DxoTabPanelOptionsComponent], never, [typeof DxoTabPanelOptionsComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoTabPanelOptionsModule>;
}
