/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, Renderer2, AfterViewInit, QueryList } from '@angular/core';
import { DiagramShapeType } from 'devextreme/ui/diagram';
import { NestedOptionHost, DxTemplateDirective, IDxTemplateHost, DxTemplateHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import { DxiConnectionPointComponent } from './connection-point-dxi';
import * as i0 from "@angular/core";
export declare class DxiCustomShapeComponent extends CollectionNestedOption implements AfterViewInit, IDxTemplateHost {
    private renderer;
    private document;
    private element;
    get allowEditImage(): boolean;
    set allowEditImage(value: boolean);
    get allowEditText(): boolean;
    set allowEditText(value: boolean);
    get allowResize(): boolean;
    set allowResize(value: boolean);
    get backgroundImageHeight(): number;
    set backgroundImageHeight(value: number);
    get backgroundImageLeft(): number;
    set backgroundImageLeft(value: number);
    get backgroundImageToolboxUrl(): string;
    set backgroundImageToolboxUrl(value: string);
    get backgroundImageTop(): number;
    set backgroundImageTop(value: number);
    get backgroundImageUrl(): string;
    set backgroundImageUrl(value: string);
    get backgroundImageWidth(): number;
    set backgroundImageWidth(value: number);
    get baseType(): DiagramShapeType | string;
    set baseType(value: DiagramShapeType | string);
    get category(): string;
    set category(value: string);
    get connectionPoints(): Array<any | {
        x?: number;
        y?: number;
    }>;
    set connectionPoints(value: Array<any | {
        x?: number;
        y?: number;
    }>);
    get defaultHeight(): number;
    set defaultHeight(value: number);
    get defaultImageUrl(): string;
    set defaultImageUrl(value: string);
    get defaultText(): string;
    set defaultText(value: string);
    get defaultWidth(): number;
    set defaultWidth(value: number);
    get imageHeight(): number;
    set imageHeight(value: number);
    get imageLeft(): number;
    set imageLeft(value: number);
    get imageTop(): number;
    set imageTop(value: number);
    get imageWidth(): number;
    set imageWidth(value: number);
    get keepRatioOnAutoSize(): boolean;
    set keepRatioOnAutoSize(value: boolean);
    get maxHeight(): number;
    set maxHeight(value: number);
    get maxWidth(): number;
    set maxWidth(value: number);
    get minHeight(): number;
    set minHeight(value: number);
    get minWidth(): number;
    set minWidth(value: number);
    get template(): any;
    set template(value: any);
    get templateHeight(): number;
    set templateHeight(value: number);
    get templateLeft(): number;
    set templateLeft(value: number);
    get templateTop(): number;
    set templateTop(value: number);
    get templateWidth(): number;
    set templateWidth(value: number);
    get textHeight(): number;
    set textHeight(value: number);
    get textLeft(): number;
    set textLeft(value: number);
    get textTop(): number;
    set textTop(value: number);
    get textWidth(): number;
    set textWidth(value: number);
    get title(): string;
    set title(value: string);
    get toolboxTemplate(): any;
    set toolboxTemplate(value: any);
    get toolboxWidthToHeightRatio(): number;
    set toolboxWidthToHeightRatio(value: number);
    get type(): string;
    set type(value: string);
    protected get _optionPath(): string;
    get connectionPointsChildren(): QueryList<DxiConnectionPointComponent>;
    set connectionPointsChildren(value: QueryList<DxiConnectionPointComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost, renderer: Renderer2, document: any, templateHost: DxTemplateHost, element: ElementRef);
    setTemplate(template: DxTemplateDirective): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCustomShapeComponent, [{ host: true; skipSelf: true; }, { host: true; }, null, null, { host: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiCustomShapeComponent, "dxi-custom-shape", never, { "allowEditImage": "allowEditImage"; "allowEditText": "allowEditText"; "allowResize": "allowResize"; "backgroundImageHeight": "backgroundImageHeight"; "backgroundImageLeft": "backgroundImageLeft"; "backgroundImageToolboxUrl": "backgroundImageToolboxUrl"; "backgroundImageTop": "backgroundImageTop"; "backgroundImageUrl": "backgroundImageUrl"; "backgroundImageWidth": "backgroundImageWidth"; "baseType": "baseType"; "category": "category"; "connectionPoints": "connectionPoints"; "defaultHeight": "defaultHeight"; "defaultImageUrl": "defaultImageUrl"; "defaultText": "defaultText"; "defaultWidth": "defaultWidth"; "imageHeight": "imageHeight"; "imageLeft": "imageLeft"; "imageTop": "imageTop"; "imageWidth": "imageWidth"; "keepRatioOnAutoSize": "keepRatioOnAutoSize"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "template": "template"; "templateHeight": "templateHeight"; "templateLeft": "templateLeft"; "templateTop": "templateTop"; "templateWidth": "templateWidth"; "textHeight": "textHeight"; "textLeft": "textLeft"; "textTop": "textTop"; "textWidth": "textWidth"; "title": "title"; "toolboxTemplate": "toolboxTemplate"; "toolboxWidthToHeightRatio": "toolboxWidthToHeightRatio"; "type": "type"; }, {}, ["connectionPointsChildren"], ["*"]>;
}
export declare class DxiCustomShapeModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiCustomShapeModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiCustomShapeModule, [typeof DxiCustomShapeComponent], never, [typeof DxiCustomShapeComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiCustomShapeModule>;
}
