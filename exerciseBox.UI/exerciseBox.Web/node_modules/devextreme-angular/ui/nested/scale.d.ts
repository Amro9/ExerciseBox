/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { HorizontalAlignment, VerticalAlignment } from 'devextreme/common';
import { ChartsDataType, DiscreteAxisDivisionMode, Font, LabelOverlap, ScaleBreakLineStyle, TimeInterval } from 'devextreme/common/charts';
import { Format } from 'devextreme/localization';
import { CircularGaugeElementOrientation, CircularGaugeLabelOverlap } from 'devextreme/viz/circular_gauge';
import { AxisScale } from 'devextreme/viz/range_selector';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiBreakComponent } from './break-dxi';
import * as i0 from "@angular/core";
export declare class DxoScaleComponent extends NestedOption implements OnDestroy, OnInit {
    get allowDecimals(): boolean | undefined;
    set allowDecimals(value: boolean | undefined);
    get customMinorTicks(): Array<number>;
    set customMinorTicks(value: Array<number>);
    get customTicks(): Array<number>;
    set customTicks(value: Array<number>);
    get endValue(): number | Date | string | undefined;
    set endValue(value: number | Date | string | undefined);
    get label(): {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        hideFirstOrLast?: CircularGaugeLabelOverlap;
        indentFromTick?: number;
        overlappingBehavior?: LabelOverlap;
        useRangeColors?: boolean;
        visible?: boolean;
    } | {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        indentFromTick?: number;
        overlappingBehavior?: LabelOverlap;
        useRangeColors?: boolean;
        visible?: boolean;
    } | {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        overlappingBehavior?: LabelOverlap;
        topIndent?: number;
        visible?: boolean;
    };
    set label(value: {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        hideFirstOrLast?: CircularGaugeLabelOverlap;
        indentFromTick?: number;
        overlappingBehavior?: LabelOverlap;
        useRangeColors?: boolean;
        visible?: boolean;
    } | {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        indentFromTick?: number;
        overlappingBehavior?: LabelOverlap;
        useRangeColors?: boolean;
        visible?: boolean;
    } | {
        customizeText?: Function;
        font?: Font;
        format?: Format | string | undefined;
        overlappingBehavior?: LabelOverlap;
        topIndent?: number;
        visible?: boolean;
    });
    get minorTick(): {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    set minorTick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    });
    get minorTickInterval(): number | undefined | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minorTickInterval(value: number | undefined | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get orientation(): CircularGaugeElementOrientation;
    set orientation(value: CircularGaugeElementOrientation);
    get scaleDivisionFactor(): number;
    set scaleDivisionFactor(value: number);
    get startValue(): number | Date | string | undefined;
    set startValue(value: number | Date | string | undefined);
    get tick(): {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        opacity?: number;
        width?: number;
    };
    set tick(value: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    } | {
        color?: string;
        opacity?: number;
        width?: number;
    });
    get tickInterval(): number | undefined | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set tickInterval(value: number | undefined | TimeInterval | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get horizontalOrientation(): HorizontalAlignment;
    set horizontalOrientation(value: HorizontalAlignment);
    get verticalOrientation(): VerticalAlignment;
    set verticalOrientation(value: VerticalAlignment);
    get aggregateByCategory(): boolean;
    set aggregateByCategory(value: boolean);
    get aggregationGroupWidth(): number | undefined;
    set aggregationGroupWidth(value: number | undefined);
    get aggregationInterval(): TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set aggregationInterval(value: TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get breaks(): Array<DevExpress.common.charts.ScaleBreak>;
    set breaks(value: Array<DevExpress.common.charts.ScaleBreak>);
    get breakStyle(): {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    };
    set breakStyle(value: {
        color?: string;
        line?: ScaleBreakLineStyle;
        width?: number;
    });
    get categories(): Array<number | string | Date>;
    set categories(value: Array<number | string | Date>);
    get discreteAxisDivisionMode(): DiscreteAxisDivisionMode;
    set discreteAxisDivisionMode(value: DiscreteAxisDivisionMode);
    get endOnTick(): boolean;
    set endOnTick(value: boolean);
    get holidays(): Array<Date | string | number>;
    set holidays(value: Array<Date | string | number>);
    get linearThreshold(): number;
    set linearThreshold(value: number);
    get logarithmBase(): number;
    set logarithmBase(value: number);
    get marker(): {
        label?: {
            customizeText?: Function;
            format?: Format | string | undefined;
        };
        separatorHeight?: number;
        textLeftIndent?: number;
        textTopIndent?: number;
        topIndent?: number;
        visible?: boolean;
    };
    set marker(value: {
        label?: {
            customizeText?: Function;
            format?: Format | string | undefined;
        };
        separatorHeight?: number;
        textLeftIndent?: number;
        textTopIndent?: number;
        topIndent?: number;
        visible?: boolean;
    });
    get maxRange(): TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set maxRange(value: TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get minorTickCount(): number | undefined;
    set minorTickCount(value: number | undefined);
    get minRange(): TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    set minRange(value: TimeInterval | number | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    });
    get placeholderHeight(): number | undefined;
    set placeholderHeight(value: number | undefined);
    get showCustomBoundaryTicks(): boolean;
    set showCustomBoundaryTicks(value: boolean);
    get singleWorkdays(): Array<Date | string | number>;
    set singleWorkdays(value: Array<Date | string | number>);
    get type(): AxisScale | undefined;
    set type(value: AxisScale | undefined);
    get valueType(): ChartsDataType | undefined;
    set valueType(value: ChartsDataType | undefined);
    get workdaysOnly(): boolean;
    set workdaysOnly(value: boolean);
    get workWeek(): Array<number>;
    set workWeek(value: Array<number>);
    protected get _optionPath(): string;
    get breaksChildren(): QueryList<DxiBreakComponent>;
    set breaksChildren(value: QueryList<DxiBreakComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoScaleComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoScaleComponent, "dxo-scale", never, { "allowDecimals": "allowDecimals"; "customMinorTicks": "customMinorTicks"; "customTicks": "customTicks"; "endValue": "endValue"; "label": "label"; "minorTick": "minorTick"; "minorTickInterval": "minorTickInterval"; "orientation": "orientation"; "scaleDivisionFactor": "scaleDivisionFactor"; "startValue": "startValue"; "tick": "tick"; "tickInterval": "tickInterval"; "horizontalOrientation": "horizontalOrientation"; "verticalOrientation": "verticalOrientation"; "aggregateByCategory": "aggregateByCategory"; "aggregationGroupWidth": "aggregationGroupWidth"; "aggregationInterval": "aggregationInterval"; "breaks": "breaks"; "breakStyle": "breakStyle"; "categories": "categories"; "discreteAxisDivisionMode": "discreteAxisDivisionMode"; "endOnTick": "endOnTick"; "holidays": "holidays"; "linearThreshold": "linearThreshold"; "logarithmBase": "logarithmBase"; "marker": "marker"; "maxRange": "maxRange"; "minorTickCount": "minorTickCount"; "minRange": "minRange"; "placeholderHeight": "placeholderHeight"; "showCustomBoundaryTicks": "showCustomBoundaryTicks"; "singleWorkdays": "singleWorkdays"; "type": "type"; "valueType": "valueType"; "workdaysOnly": "workdaysOnly"; "workWeek": "workWeek"; }, {}, ["breaksChildren"], never>;
}
export declare class DxoScaleModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoScaleModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoScaleModule, [typeof DxoScaleComponent], never, [typeof DxoScaleComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoScaleModule>;
}
