/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { CollectionNestedOption } from 'devextreme-angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ButtonStyle, ButtonType, HorizontalAlignment, ToolbarItemComponent, ToolbarItemLocation, VerticalAlignment } from 'devextreme/common';
import { dxBoxOptions } from 'devextreme/ui/box';
import { dxButtonOptions } from 'devextreme/ui/button';
import { DataGridPredefinedToolbarItem } from 'devextreme/ui/data_grid';
import { DiagramCommand } from 'devextreme/ui/diagram';
import { FileManagerPredefinedContextMenuItem, FileManagerPredefinedToolbarItem } from 'devextreme/ui/file_manager';
import { FormItemComponent, FormItemType, LabelLocation } from 'devextreme/ui/form';
import { GanttPredefinedContextMenuItem, GanttPredefinedToolbarItem } from 'devextreme/ui/gantt';
import { HtmlEditorPredefinedContextMenuItem, HtmlEditorPredefinedToolbarItem } from 'devextreme/ui/html_editor';
import { dxTabPanelOptions } from 'devextreme/ui/tab_panel';
import { LocateInMenuMode, ShowTextMode } from 'devextreme/ui/toolbar';
import { TreeListPredefinedToolbarItem } from 'devextreme/ui/tree_list';
import * as i0 from "@angular/core";
export declare abstract class DxiButtonGroupItem extends CollectionNestedOption {
    get disabled(): boolean;
    set disabled(value: boolean);
    get html(): string;
    set html(value: string);
    get icon(): string;
    set icon(value: string);
    get template(): any;
    set template(value: any);
    get text(): string;
    set text(value: string);
    get title(): string;
    set title(value: string);
    get titleTemplate(): any;
    set titleTemplate(value: any);
    get visible(): boolean | undefined;
    set visible(value: boolean | undefined);
    get onClick(): Function;
    set onClick(value: Function);
    get stylingMode(): ButtonStyle;
    set stylingMode(value: ButtonStyle);
    get type(): ButtonType;
    set type(value: ButtonType);
    get baseSize(): number | string;
    set baseSize(value: number | string);
    get box(): dxBoxOptions | undefined;
    set box(value: dxBoxOptions | undefined);
    get ratio(): number;
    set ratio(value: number);
    get shrink(): number;
    set shrink(value: number);
    get elementAttr(): any;
    set elementAttr(value: any);
    get hint(): string;
    set hint(value: string);
    get beginGroup(): boolean;
    set beginGroup(value: boolean);
    get closeMenuOnClick(): boolean;
    set closeMenuOnClick(value: boolean);
    get items(): Array<DevExpress.ui.dxContextMenuItem | DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem | DevExpress.ui.dxDiagramCustomCommand | DevExpress.ui.dxFileManagerContextMenuItem | HtmlEditorPredefinedContextMenuItem | any | DevExpress.ui.dxMenuItem | DevExpress.ui.dxTreeViewItem>;
    set items(value: Array<DevExpress.ui.dxContextMenuItem | DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem | DevExpress.ui.dxDiagramCustomCommand | DevExpress.ui.dxFileManagerContextMenuItem | HtmlEditorPredefinedContextMenuItem | any | DevExpress.ui.dxMenuItem | DevExpress.ui.dxTreeViewItem>);
    get selectable(): boolean;
    set selectable(value: boolean);
    get selected(): boolean;
    set selected(value: boolean);
    get colSpan(): number | undefined;
    set colSpan(value: number | undefined);
    get cssClass(): string | undefined;
    set cssClass(value: string | undefined);
    get dataField(): string | undefined;
    set dataField(value: string | undefined);
    get editorOptions(): any | undefined;
    set editorOptions(value: any | undefined);
    get editorType(): FormItemComponent;
    set editorType(value: FormItemComponent);
    get helpText(): string | undefined;
    set helpText(value: string | undefined);
    get isRequired(): boolean | undefined;
    set isRequired(value: boolean | undefined);
    get itemType(): FormItemType;
    set itemType(value: FormItemType);
    get label(): {
        alignment?: HorizontalAlignment;
        location?: LabelLocation;
        showColon?: boolean;
        template?: any;
        text?: string | undefined;
        visible?: boolean;
    };
    set label(value: {
        alignment?: HorizontalAlignment;
        location?: LabelLocation;
        showColon?: boolean;
        template?: any;
        text?: string | undefined;
        visible?: boolean;
    });
    get name(): string | undefined | DataGridPredefinedToolbarItem | DiagramCommand | FileManagerPredefinedContextMenuItem | FileManagerPredefinedToolbarItem | GanttPredefinedContextMenuItem | GanttPredefinedToolbarItem | HtmlEditorPredefinedContextMenuItem | HtmlEditorPredefinedToolbarItem | TreeListPredefinedToolbarItem;
    set name(value: string | undefined | DataGridPredefinedToolbarItem | DiagramCommand | FileManagerPredefinedContextMenuItem | FileManagerPredefinedToolbarItem | GanttPredefinedContextMenuItem | GanttPredefinedToolbarItem | HtmlEditorPredefinedContextMenuItem | HtmlEditorPredefinedToolbarItem | TreeListPredefinedToolbarItem);
    get validationRules(): Array<DevExpress.common.RequiredRule | DevExpress.common.NumericRule | DevExpress.common.RangeRule | DevExpress.common.StringLengthRule | DevExpress.common.CustomRule | DevExpress.common.CompareRule | DevExpress.common.PatternRule | DevExpress.common.EmailRule | DevExpress.common.AsyncRule>;
    set validationRules(value: Array<DevExpress.common.RequiredRule | DevExpress.common.NumericRule | DevExpress.common.RangeRule | DevExpress.common.StringLengthRule | DevExpress.common.CustomRule | DevExpress.common.CompareRule | DevExpress.common.PatternRule | DevExpress.common.EmailRule | DevExpress.common.AsyncRule>);
    get visibleIndex(): number | undefined;
    set visibleIndex(value: number | undefined);
    get alignItemLabels(): boolean;
    set alignItemLabels(value: boolean);
    get caption(): string | undefined;
    set caption(value: string | undefined);
    get colCount(): number;
    set colCount(value: number);
    get colCountByScreen(): {
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    };
    set colCountByScreen(value: {
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    });
    get tabPanelOptions(): dxTabPanelOptions | undefined;
    set tabPanelOptions(value: dxTabPanelOptions | undefined);
    get tabs(): Array<any | {
        alignItemLabels?: boolean;
        badge?: string | undefined;
        colCount?: number;
        colCountByScreen?: {
            lg?: number | undefined;
            md?: number | undefined;
            sm?: number | undefined;
            xs?: number | undefined;
        };
        disabled?: boolean;
        icon?: string | undefined;
        items?: Array<DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem>;
        tabTemplate?: any | undefined;
        template?: any | undefined;
        title?: string | undefined;
    }>;
    set tabs(value: Array<any | {
        alignItemLabels?: boolean;
        badge?: string | undefined;
        colCount?: number;
        colCountByScreen?: {
            lg?: number | undefined;
            md?: number | undefined;
            sm?: number | undefined;
            xs?: number | undefined;
        };
        disabled?: boolean;
        icon?: string | undefined;
        items?: Array<DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem>;
        tabTemplate?: any | undefined;
        template?: any | undefined;
        title?: string | undefined;
    }>);
    get badge(): string;
    set badge(value: string);
    get tabTemplate(): any;
    set tabTemplate(value: any);
    get buttonOptions(): dxButtonOptions | undefined;
    set buttonOptions(value: dxButtonOptions | undefined);
    get horizontalAlignment(): HorizontalAlignment;
    set horizontalAlignment(value: HorizontalAlignment);
    get verticalAlignment(): VerticalAlignment;
    set verticalAlignment(value: VerticalAlignment);
    get locateInMenu(): LocateInMenuMode;
    set locateInMenu(value: LocateInMenuMode);
    get location(): ToolbarItemLocation | Array<any | {
        col?: number;
        colspan?: number | undefined;
        row?: number;
        rowspan?: number | undefined;
        screen?: string | undefined;
    }>;
    set location(value: ToolbarItemLocation | Array<any | {
        col?: number;
        colspan?: number | undefined;
        row?: number;
        rowspan?: number | undefined;
        screen?: string | undefined;
    }>);
    get menuItemTemplate(): any;
    set menuItemTemplate(value: any);
    get options(): any;
    set options(value: any);
    get showText(): ShowTextMode;
    set showText(value: ShowTextMode);
    get widget(): ToolbarItemComponent;
    set widget(value: ToolbarItemComponent);
    get height(): number;
    set height(value: number);
    get width(): number;
    set width(value: number);
    get imageAlt(): string;
    set imageAlt(value: string);
    get imageSrc(): string;
    set imageSrc(value: string);
    get acceptedValues(): Array<string | number | boolean>;
    set acceptedValues(value: Array<string | number | boolean>);
    get formatName(): HtmlEditorPredefinedToolbarItem | string;
    set formatName(value: HtmlEditorPredefinedToolbarItem | string);
    get formatValues(): Array<string | number | boolean>;
    set formatValues(value: Array<string | number | boolean>);
    get key(): string;
    set key(value: string);
    get showChevron(): boolean;
    set showChevron(value: boolean);
    get linkAttr(): any;
    set linkAttr(value: any);
    get url(): string;
    set url(value: string);
    get heightRatio(): number;
    set heightRatio(value: number);
    get widthRatio(): number;
    set widthRatio(value: number);
    get expanded(): boolean;
    set expanded(value: boolean);
    get hasItems(): boolean | undefined;
    set hasItems(value: boolean | undefined);
    get id(): number | string | undefined;
    set id(value: number | string | undefined);
    get parentId(): number | string | undefined;
    set parentId(value: number | string | undefined);
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiButtonGroupItem, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiButtonGroupItem, "ng-component", never, {}, {}, never, never>;
}
