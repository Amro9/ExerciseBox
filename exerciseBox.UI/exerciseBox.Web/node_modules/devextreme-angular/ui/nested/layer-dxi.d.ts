import { SingleMultipleOrNone } from 'devextreme/common';
import { Font, Palette } from 'devextreme/common/charts';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { VectorMapLayerType, VectorMapMarkerType } from 'devextreme/viz/vector_map';
import { NestedOptionHost } from 'devextreme-angular/core';
import { CollectionNestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
export declare class DxiLayerComponent extends CollectionNestedOption {
    get borderColor(): string;
    set borderColor(value: string);
    get borderWidth(): number;
    set borderWidth(value: number);
    get color(): string;
    set color(value: string);
    get colorGroupingField(): string | undefined;
    set colorGroupingField(value: string | undefined);
    get colorGroups(): Array<number>;
    set colorGroups(value: Array<number>);
    get customize(): Function;
    set customize(value: Function);
    get dataField(): string | undefined;
    set dataField(value: string | undefined);
    get dataSource(): any | DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: any | DataSource | DataSourceOptions | Store | null | string | Array<any>);
    get elementType(): VectorMapMarkerType;
    set elementType(value: VectorMapMarkerType);
    get hoveredBorderColor(): string;
    set hoveredBorderColor(value: string);
    get hoveredBorderWidth(): number;
    set hoveredBorderWidth(value: number);
    get hoveredColor(): string;
    set hoveredColor(value: string);
    get hoverEnabled(): boolean;
    set hoverEnabled(value: boolean);
    get label(): {
        dataField?: string;
        enabled?: boolean;
        font?: Font;
    };
    set label(value: {
        dataField?: string;
        enabled?: boolean;
        font?: Font;
    });
    get maxSize(): number;
    set maxSize(value: number);
    get minSize(): number;
    set minSize(value: number);
    get name(): string;
    set name(value: string);
    get opacity(): number;
    set opacity(value: number);
    get palette(): Palette | string | Array<string>;
    set palette(value: Palette | string | Array<string>);
    get paletteIndex(): number;
    set paletteIndex(value: number);
    get paletteSize(): number;
    set paletteSize(value: number);
    get selectedBorderColor(): string;
    set selectedBorderColor(value: string);
    get selectedBorderWidth(): number;
    set selectedBorderWidth(value: number);
    get selectedColor(): string;
    set selectedColor(value: string);
    get selectionMode(): SingleMultipleOrNone;
    set selectionMode(value: SingleMultipleOrNone);
    get size(): number;
    set size(value: number);
    get sizeGroupingField(): string | undefined;
    set sizeGroupingField(value: string | undefined);
    get sizeGroups(): Array<number>;
    set sizeGroups(value: Array<number>);
    get type(): VectorMapLayerType;
    set type(value: VectorMapLayerType);
    protected get _optionPath(): string;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiLayerComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxiLayerComponent, "dxi-layer", never, { "borderColor": "borderColor"; "borderWidth": "borderWidth"; "color": "color"; "colorGroupingField": "colorGroupingField"; "colorGroups": "colorGroups"; "customize": "customize"; "dataField": "dataField"; "dataSource": "dataSource"; "elementType": "elementType"; "hoveredBorderColor": "hoveredBorderColor"; "hoveredBorderWidth": "hoveredBorderWidth"; "hoveredColor": "hoveredColor"; "hoverEnabled": "hoverEnabled"; "label": "label"; "maxSize": "maxSize"; "minSize": "minSize"; "name": "name"; "opacity": "opacity"; "palette": "palette"; "paletteIndex": "paletteIndex"; "paletteSize": "paletteSize"; "selectedBorderColor": "selectedBorderColor"; "selectedBorderWidth": "selectedBorderWidth"; "selectedColor": "selectedColor"; "selectionMode": "selectionMode"; "size": "size"; "sizeGroupingField": "sizeGroupingField"; "sizeGroups": "sizeGroups"; "type": "type"; }, {}, never, never>;
}
export declare class DxiLayerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxiLayerModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxiLayerModule, [typeof DxiLayerComponent], never, [typeof DxiLayerComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxiLayerModule>;
}
