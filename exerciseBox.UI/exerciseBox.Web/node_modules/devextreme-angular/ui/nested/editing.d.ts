/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnInit, OnDestroy, EventEmitter, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { GridsEditMode, GridsEditRefreshMode, NewRowPosition, StartEditAction } from 'devextreme/common/grids';
import { dxFormOptions } from 'devextreme/ui/form';
import { Properties as dxPopupOptions } from 'devextreme/ui/popup';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiChangeComponent } from './change-dxi';
import * as i0 from "@angular/core";
export declare class DxoEditingComponent extends NestedOption implements OnDestroy, OnInit {
    get allowAdding(): boolean | Function;
    set allowAdding(value: boolean | Function);
    get allowDeleting(): boolean | Function;
    set allowDeleting(value: boolean | Function);
    get allowUpdating(): boolean | Function;
    set allowUpdating(value: boolean | Function);
    get changes(): Array<DevExpress.common.grids.DataChange>;
    set changes(value: Array<DevExpress.common.grids.DataChange>);
    get confirmDelete(): boolean;
    set confirmDelete(value: boolean);
    get editColumnName(): string;
    set editColumnName(value: string);
    get editRowKey(): any;
    set editRowKey(value: any);
    get form(): dxFormOptions;
    set form(value: dxFormOptions);
    get mode(): GridsEditMode;
    set mode(value: GridsEditMode);
    get newRowPosition(): NewRowPosition;
    set newRowPosition(value: NewRowPosition);
    get popup(): dxPopupOptions;
    set popup(value: dxPopupOptions);
    get refreshMode(): GridsEditRefreshMode;
    set refreshMode(value: GridsEditRefreshMode);
    get selectTextOnEditStart(): boolean;
    set selectTextOnEditStart(value: boolean);
    get startEditAction(): StartEditAction;
    set startEditAction(value: StartEditAction);
    get texts(): {
        addRow?: string;
        cancelAllChanges?: string;
        cancelRowChanges?: string;
        confirmDeleteMessage?: string;
        confirmDeleteTitle?: string;
        deleteRow?: string;
        editRow?: string;
        saveAllChanges?: string;
        saveRowChanges?: string;
        undeleteRow?: string;
        validationCancelChanges?: string;
    } | {
        addRow?: string;
        addRowToNode?: string;
        cancelAllChanges?: string;
        cancelRowChanges?: string;
        confirmDeleteMessage?: string;
        confirmDeleteTitle?: string;
        deleteRow?: string;
        editRow?: string;
        saveAllChanges?: string;
        saveRowChanges?: string;
        undeleteRow?: string;
        validationCancelChanges?: string;
    };
    set texts(value: {
        addRow?: string;
        cancelAllChanges?: string;
        cancelRowChanges?: string;
        confirmDeleteMessage?: string;
        confirmDeleteTitle?: string;
        deleteRow?: string;
        editRow?: string;
        saveAllChanges?: string;
        saveRowChanges?: string;
        undeleteRow?: string;
        validationCancelChanges?: string;
    } | {
        addRow?: string;
        addRowToNode?: string;
        cancelAllChanges?: string;
        cancelRowChanges?: string;
        confirmDeleteMessage?: string;
        confirmDeleteTitle?: string;
        deleteRow?: string;
        editRow?: string;
        saveAllChanges?: string;
        saveRowChanges?: string;
        undeleteRow?: string;
        validationCancelChanges?: string;
    });
    get useIcons(): boolean;
    set useIcons(value: boolean);
    get allowAddShape(): boolean;
    set allowAddShape(value: boolean);
    get allowChangeConnection(): boolean;
    set allowChangeConnection(value: boolean);
    get allowChangeConnectorPoints(): boolean;
    set allowChangeConnectorPoints(value: boolean);
    get allowChangeConnectorText(): boolean;
    set allowChangeConnectorText(value: boolean);
    get allowChangeShapeText(): boolean;
    set allowChangeShapeText(value: boolean);
    get allowDeleteConnector(): boolean;
    set allowDeleteConnector(value: boolean);
    get allowDeleteShape(): boolean;
    set allowDeleteShape(value: boolean);
    get allowMoveShape(): boolean;
    set allowMoveShape(value: boolean);
    get allowResizeShape(): boolean;
    set allowResizeShape(value: boolean);
    get allowDependencyAdding(): boolean;
    set allowDependencyAdding(value: boolean);
    get allowDependencyDeleting(): boolean;
    set allowDependencyDeleting(value: boolean);
    get allowResourceAdding(): boolean;
    set allowResourceAdding(value: boolean);
    get allowResourceDeleting(): boolean;
    set allowResourceDeleting(value: boolean);
    get allowResourceUpdating(): boolean;
    set allowResourceUpdating(value: boolean);
    get allowTaskAdding(): boolean;
    set allowTaskAdding(value: boolean);
    get allowTaskDeleting(): boolean;
    set allowTaskDeleting(value: boolean);
    get allowTaskResourceUpdating(): boolean;
    set allowTaskResourceUpdating(value: boolean);
    get allowTaskUpdating(): boolean;
    set allowTaskUpdating(value: boolean);
    get enabled(): boolean;
    set enabled(value: boolean);
    get allowDragging(): boolean;
    set allowDragging(value: boolean);
    get allowResizing(): boolean;
    set allowResizing(value: boolean);
    get allowTimeZoneEditing(): boolean;
    set allowTimeZoneEditing(value: boolean);
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    changesChange: EventEmitter<Array<DevExpress.common.grids.DataChange>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editColumnNameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editRowKeyChange: EventEmitter<any>;
    protected get _optionPath(): string;
    get changesChildren(): QueryList<DxiChangeComponent>;
    set changesChildren(value: QueryList<DxiChangeComponent>);
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoEditingComponent, [{ host: true; skipSelf: true; }, { host: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxoEditingComponent, "dxo-editing", never, { "allowAdding": "allowAdding"; "allowDeleting": "allowDeleting"; "allowUpdating": "allowUpdating"; "changes": "changes"; "confirmDelete": "confirmDelete"; "editColumnName": "editColumnName"; "editRowKey": "editRowKey"; "form": "form"; "mode": "mode"; "newRowPosition": "newRowPosition"; "popup": "popup"; "refreshMode": "refreshMode"; "selectTextOnEditStart": "selectTextOnEditStart"; "startEditAction": "startEditAction"; "texts": "texts"; "useIcons": "useIcons"; "allowAddShape": "allowAddShape"; "allowChangeConnection": "allowChangeConnection"; "allowChangeConnectorPoints": "allowChangeConnectorPoints"; "allowChangeConnectorText": "allowChangeConnectorText"; "allowChangeShapeText": "allowChangeShapeText"; "allowDeleteConnector": "allowDeleteConnector"; "allowDeleteShape": "allowDeleteShape"; "allowMoveShape": "allowMoveShape"; "allowResizeShape": "allowResizeShape"; "allowDependencyAdding": "allowDependencyAdding"; "allowDependencyDeleting": "allowDependencyDeleting"; "allowResourceAdding": "allowResourceAdding"; "allowResourceDeleting": "allowResourceDeleting"; "allowResourceUpdating": "allowResourceUpdating"; "allowTaskAdding": "allowTaskAdding"; "allowTaskDeleting": "allowTaskDeleting"; "allowTaskResourceUpdating": "allowTaskResourceUpdating"; "allowTaskUpdating": "allowTaskUpdating"; "enabled": "enabled"; "allowDragging": "allowDragging"; "allowResizing": "allowResizing"; "allowTimeZoneEditing": "allowTimeZoneEditing"; }, { "changesChange": "changesChange"; "editColumnNameChange": "editColumnNameChange"; "editRowKeyChange": "editRowKeyChange"; }, ["changesChildren"], never>;
}
export declare class DxoEditingModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxoEditingModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxoEditingModule, [typeof DxoEditingComponent], never, [typeof DxoEditingComponent]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxoEditingModule>;
}
