/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { ScrollDirection } from 'devextreme/common';
import { DisposingEvent, InitializedEvent, OptionChangedEvent, PullDownEvent, ReachBottomEvent, ScrollEvent, UpdatedEvent } from 'devextreme/ui/scroll_view';
import DxScrollView from 'devextreme/ui/scroll_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import type * as DxScrollViewTypes from "devextreme/ui/scroll_view_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
/**
 * [descr:dxScrollView]

 */
export declare class DxScrollViewComponent extends DxComponent implements OnDestroy {
    instance: DxScrollView;
    /**
     * [descr:dxScrollableOptions.bounceEnabled]
    
     */
    get bounceEnabled(): boolean;
    set bounceEnabled(value: boolean);
    /**
     * [descr:dxScrollableOptions.direction]
    
     */
    get direction(): ScrollDirection;
    set direction(value: ScrollDirection);
    /**
     * [descr:dxScrollableOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:dxScrollViewOptions.pulledDownText]
    
     */
    get pulledDownText(): string;
    set pulledDownText(value: string);
    /**
     * [descr:dxScrollViewOptions.pullingDownText]
    
     */
    get pullingDownText(): string;
    set pullingDownText(value: string);
    /**
     * [descr:dxScrollViewOptions.reachBottomText]
    
     */
    get reachBottomText(): string;
    set reachBottomText(value: string);
    /**
     * [descr:dxScrollViewOptions.refreshingText]
    
     */
    get refreshingText(): string;
    set refreshingText(value: string);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxScrollableOptions.scrollByContent]
    
     */
    get scrollByContent(): boolean;
    set scrollByContent(value: boolean);
    /**
     * [descr:dxScrollableOptions.scrollByThumb]
    
     */
    get scrollByThumb(): boolean;
    set scrollByThumb(value: boolean);
    /**
     * [descr:dxScrollableOptions.showScrollbar]
    
     */
    get showScrollbar(): string;
    set showScrollbar(value: string);
    /**
     * [descr:dxScrollableOptions.useNative]
    
     */
    get useNative(): boolean;
    set useNative(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxScrollViewOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxScrollViewOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxScrollViewOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxScrollViewOptions.onPullDown]
    
    
     */
    onPullDown: EventEmitter<PullDownEvent>;
    /**
    
     * [descr:dxScrollViewOptions.onReachBottom]
    
    
     */
    onReachBottom: EventEmitter<ReachBottomEvent>;
    /**
    
     * [descr:dxScrollViewOptions.onScroll]
    
    
     */
    onScroll: EventEmitter<ScrollEvent>;
    /**
    
     * [descr:dxScrollViewOptions.onUpdated]
    
    
     */
    onUpdated: EventEmitter<UpdatedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    bounceEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    directionChange: EventEmitter<ScrollDirection>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    reachBottomTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    refreshingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByContentChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByThumbChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showScrollbarChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxScrollView;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxScrollViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxScrollViewComponent, "dx-scroll-view", never, { "bounceEnabled": "bounceEnabled"; "direction": "direction"; "disabled": "disabled"; "elementAttr": "elementAttr"; "height": "height"; "pulledDownText": "pulledDownText"; "pullingDownText": "pullingDownText"; "reachBottomText": "reachBottomText"; "refreshingText": "refreshingText"; "rtlEnabled": "rtlEnabled"; "scrollByContent": "scrollByContent"; "scrollByThumb": "scrollByThumb"; "showScrollbar": "showScrollbar"; "useNative": "useNative"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onPullDown": "onPullDown"; "onReachBottom": "onReachBottom"; "onScroll": "onScroll"; "onUpdated": "onUpdated"; "bounceEnabledChange": "bounceEnabledChange"; "directionChange": "directionChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "pulledDownTextChange": "pulledDownTextChange"; "pullingDownTextChange": "pullingDownTextChange"; "reachBottomTextChange": "reachBottomTextChange"; "refreshingTextChange": "refreshingTextChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollByContentChange": "scrollByContentChange"; "scrollByThumbChange": "scrollByThumbChange"; "showScrollbarChange": "showScrollbarChange"; "useNativeChange": "useNativeChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxScrollViewModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxScrollViewModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxScrollViewModule, [typeof DxScrollViewComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule], [typeof DxScrollViewComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxScrollViewModule>;
}
export { DxScrollViewTypes };
