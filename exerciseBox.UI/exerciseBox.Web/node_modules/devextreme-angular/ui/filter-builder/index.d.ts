/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ContentReadyEvent, DisposingEvent, EditorPreparedEvent, EditorPreparingEvent, GroupOperation, InitializedEvent, OptionChangedEvent, ValueChangedEvent } from 'devextreme/ui/filter_builder';
import DxFilterBuilder from 'devextreme/ui/filter_builder';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiCustomOperationComponent } from 'devextreme-angular/ui/nested';
import { DxiFieldComponent } from 'devextreme-angular/ui/nested';
import type * as DxFilterBuilderTypes from "devextreme/ui/filter_builder_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxFilterBuilder]

 */
export declare class DxFilterBuilderComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxFilterBuilder;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxFilterBuilderOptions.allowHierarchicalFields]
    
     */
    get allowHierarchicalFields(): boolean;
    set allowHierarchicalFields(value: boolean);
    /**
     * [descr:dxFilterBuilderOptions.customOperations]
    
     */
    get customOperations(): Array<DevExpress.ui.dxFilterBuilderCustomOperation>;
    set customOperations(value: Array<DevExpress.ui.dxFilterBuilderCustomOperation>);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxFilterBuilderOptions.fields]
    
     */
    get fields(): Array<DevExpress.ui.dxFilterBuilderField>;
    set fields(value: Array<DevExpress.ui.dxFilterBuilderField>);
    /**
     * [descr:dxFilterBuilderOptions.filterOperationDescriptions]
    
     */
    get filterOperationDescriptions(): {
        between?: string;
        contains?: string;
        endsWith?: string;
        equal?: string;
        greaterThan?: string;
        greaterThanOrEqual?: string;
        isBlank?: string;
        isNotBlank?: string;
        lessThan?: string;
        lessThanOrEqual?: string;
        notContains?: string;
        notEqual?: string;
        startsWith?: string;
    };
    set filterOperationDescriptions(value: {
        between?: string;
        contains?: string;
        endsWith?: string;
        equal?: string;
        greaterThan?: string;
        greaterThanOrEqual?: string;
        isBlank?: string;
        isNotBlank?: string;
        lessThan?: string;
        lessThanOrEqual?: string;
        notContains?: string;
        notEqual?: string;
        startsWith?: string;
    });
    /**
     * [descr:WidgetOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxFilterBuilderOptions.groupOperationDescriptions]
    
     */
    get groupOperationDescriptions(): {
        and?: string;
        notAnd?: string;
        notOr?: string;
        or?: string;
    };
    set groupOperationDescriptions(value: {
        and?: string;
        notAnd?: string;
        notOr?: string;
        or?: string;
    });
    /**
     * [descr:dxFilterBuilderOptions.groupOperations]
    
     */
    get groupOperations(): any | Array<GroupOperation>;
    set groupOperations(value: any | Array<GroupOperation>);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxFilterBuilderOptions.maxGroupLevel]
    
     */
    get maxGroupLevel(): number | undefined;
    set maxGroupLevel(value: number | undefined);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxFilterBuilderOptions.value]
    
     */
    get value(): any;
    set value(value: any);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxFilterBuilderOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxFilterBuilderOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxFilterBuilderOptions.onEditorPrepared]
    
    
     */
    onEditorPrepared: EventEmitter<EditorPreparedEvent>;
    /**
    
     * [descr:dxFilterBuilderOptions.onEditorPreparing]
    
    
     */
    onEditorPreparing: EventEmitter<EditorPreparingEvent>;
    /**
    
     * [descr:dxFilterBuilderOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxFilterBuilderOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxFilterBuilderOptions.onValueChanged]
    
    
     */
    onValueChanged: EventEmitter<ValueChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowHierarchicalFieldsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customOperationsChange: EventEmitter<Array<DevExpress.ui.dxFilterBuilderCustomOperation>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fieldsChange: EventEmitter<Array<DevExpress.ui.dxFilterBuilderField>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterOperationDescriptionsChange: EventEmitter<{
        between?: string;
        contains?: string;
        endsWith?: string;
        equal?: string;
        greaterThan?: string;
        greaterThanOrEqual?: string;
        isBlank?: string;
        isNotBlank?: string;
        lessThan?: string;
        lessThanOrEqual?: string;
        notContains?: string;
        notEqual?: string;
        startsWith?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupOperationDescriptionsChange: EventEmitter<{
        and?: string;
        notAnd?: string;
        notOr?: string;
        or?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupOperationsChange: EventEmitter<any | Array<GroupOperation>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxGroupLevelChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * [descr:undefined]
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    get customOperationsChildren(): QueryList<DxiCustomOperationComponent>;
    set customOperationsChildren(value: QueryList<DxiCustomOperationComponent>);
    get fieldsChildren(): QueryList<DxiFieldComponent>;
    set fieldsChildren(value: QueryList<DxiFieldComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxFilterBuilder;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxFilterBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxFilterBuilderComponent, "dx-filter-builder", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowHierarchicalFields": "allowHierarchicalFields"; "customOperations": "customOperations"; "disabled": "disabled"; "elementAttr": "elementAttr"; "fields": "fields"; "filterOperationDescriptions": "filterOperationDescriptions"; "focusStateEnabled": "focusStateEnabled"; "groupOperationDescriptions": "groupOperationDescriptions"; "groupOperations": "groupOperations"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "maxGroupLevel": "maxGroupLevel"; "rtlEnabled": "rtlEnabled"; "tabIndex": "tabIndex"; "value": "value"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onEditorPrepared": "onEditorPrepared"; "onEditorPreparing": "onEditorPreparing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowHierarchicalFieldsChange": "allowHierarchicalFieldsChange"; "customOperationsChange": "customOperationsChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "fieldsChange": "fieldsChange"; "filterOperationDescriptionsChange": "filterOperationDescriptionsChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "groupOperationDescriptionsChange": "groupOperationDescriptionsChange"; "groupOperationsChange": "groupOperationsChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "maxGroupLevelChange": "maxGroupLevelChange"; "rtlEnabledChange": "rtlEnabledChange"; "tabIndexChange": "tabIndexChange"; "valueChange": "valueChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, ["customOperationsChildren", "fieldsChildren"], never>;
}
export declare class DxFilterBuilderModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxFilterBuilderModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxFilterBuilderModule, [typeof DxFilterBuilderComponent], [typeof i1.DxiCustomOperationModule, typeof i1.DxiFieldModule, typeof i1.DxoFormatModule, typeof i1.DxoLookupModule, typeof i1.DxoFilterOperationDescriptionsModule, typeof i1.DxoGroupOperationDescriptionsModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxFilterBuilderComponent, typeof i1.DxiCustomOperationModule, typeof i1.DxiFieldModule, typeof i1.DxoFormatModule, typeof i1.DxoLookupModule, typeof i1.DxoFilterOperationDescriptionsModule, typeof i1.DxoGroupOperationDescriptionsModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxFilterBuilderModule>;
}
export { DxFilterBuilderTypes };
