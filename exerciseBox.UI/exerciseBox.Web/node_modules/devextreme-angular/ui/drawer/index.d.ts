/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { DisposingEvent, InitializedEvent, OpenedStateMode, OptionChangedEvent, PanelLocation, RevealMode } from 'devextreme/ui/drawer';
import DxDrawer from 'devextreme/ui/drawer';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import type * as DxDrawerTypes from "devextreme/ui/drawer_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
/**
 * [descr:dxDrawer]

 */
export declare class DxDrawerComponent extends DxComponent implements OnDestroy {
    instance: DxDrawer;
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxDrawerOptions.animationDuration]
    
     */
    get animationDuration(): number;
    set animationDuration(value: number);
    /**
     * [descr:dxDrawerOptions.animationEnabled]
    
     */
    get animationEnabled(): boolean;
    set animationEnabled(value: boolean);
    /**
     * [descr:dxDrawerOptions.closeOnOutsideClick]
    
     */
    get closeOnOutsideClick(): boolean | Function;
    set closeOnOutsideClick(value: boolean | Function);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxDrawerOptions.maxSize]
    
     */
    get maxSize(): number;
    set maxSize(value: number);
    /**
     * [descr:dxDrawerOptions.minSize]
    
     */
    get minSize(): number;
    set minSize(value: number);
    /**
     * [descr:dxDrawerOptions.opened]
    
     */
    get opened(): boolean;
    set opened(value: boolean);
    /**
     * [descr:dxDrawerOptions.openedStateMode]
    
     */
    get openedStateMode(): OpenedStateMode;
    set openedStateMode(value: OpenedStateMode);
    /**
     * [descr:dxDrawerOptions.position]
    
     */
    get position(): PanelLocation;
    set position(value: PanelLocation);
    /**
     * [descr:dxDrawerOptions.revealMode]
    
     */
    get revealMode(): RevealMode;
    set revealMode(value: RevealMode);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxDrawerOptions.shading]
    
     */
    get shading(): boolean;
    set shading(value: boolean);
    /**
     * [descr:dxDrawerOptions.template]
    
     */
    get template(): any;
    set template(value: any);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxDrawerOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxDrawerOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxDrawerOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationDurationChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedStateModeChange: EventEmitter<OpenedStateMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<PanelLocation>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    revealModeChange: EventEmitter<RevealMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    templateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDrawer;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDrawerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxDrawerComponent, "dx-drawer", never, { "activeStateEnabled": "activeStateEnabled"; "animationDuration": "animationDuration"; "animationEnabled": "animationEnabled"; "closeOnOutsideClick": "closeOnOutsideClick"; "disabled": "disabled"; "elementAttr": "elementAttr"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "maxSize": "maxSize"; "minSize": "minSize"; "opened": "opened"; "openedStateMode": "openedStateMode"; "position": "position"; "revealMode": "revealMode"; "rtlEnabled": "rtlEnabled"; "shading": "shading"; "template": "template"; "visible": "visible"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationDurationChange": "animationDurationChange"; "animationEnabledChange": "animationEnabledChange"; "closeOnOutsideClickChange": "closeOnOutsideClickChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "maxSizeChange": "maxSizeChange"; "minSizeChange": "minSizeChange"; "openedChange": "openedChange"; "openedStateModeChange": "openedStateModeChange"; "positionChange": "positionChange"; "revealModeChange": "revealModeChange"; "rtlEnabledChange": "rtlEnabledChange"; "shadingChange": "shadingChange"; "templateChange": "templateChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxDrawerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDrawerModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxDrawerModule, [typeof DxDrawerComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule], [typeof DxDrawerComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxDrawerModule>;
}
export { DxDrawerTypes };
