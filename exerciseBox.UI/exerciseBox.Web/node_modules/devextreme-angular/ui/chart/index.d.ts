/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ExportFormat, HorizontalAlignment, Orientation, Position, SingleOrMultiple, VerticalAlignment, VerticalEdge } from 'devextreme/common';
import { AnimationEaseMode, ArgumentAxisHoverMode, AxisScaleType, ChartsAxisLabelOverlap, ChartsDataType, ChartsLabelOverlap, DashStyle, DiscreteAxisDivisionMode, Font, LegendHoverMode, Palette, PaletteExtensionMode, RelativePosition, ScaleBreakLineStyle, TextOverflow, Theme, TimeInterval, VisualRangeUpdateMode, WordWrap } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { AggregatedPointsPosition, ArgumentAxisClickEvent, ChartLabelDisplayMode, ChartTooltipLocation, ChartZoomAndPanMode, DisposingEvent, DoneEvent, DrawnEvent, dxChartCommonAnnotationConfig, EventKeyModifier, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, LegendClickEvent, OptionChangedEvent, PointClickEvent, PointHoverChangedEvent, PointSelectionChangedEvent, SeriesClickEvent, SeriesHoverChangedEvent, SeriesSelectionChangedEvent, TooltipHiddenEvent, TooltipShownEvent, ZoomEndEvent, ZoomStartEvent } from 'devextreme/viz/chart';
import DxChart from 'devextreme/viz/chart';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiAnnotationComponent } from 'devextreme-angular/ui/nested';
import { DxiPaneComponent } from 'devextreme-angular/ui/nested';
import { DxiSeriesComponent } from 'devextreme-angular/ui/nested';
import { DxiValueAxisComponent } from 'devextreme-angular/ui/nested';
import type * as DxChartTypes from "devextreme/viz/chart_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxChart]

 */
export declare class DxChartComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxChart;
    /**
     * [descr:BaseChartOptions.adaptiveLayout]
    
     */
    get adaptiveLayout(): {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    };
    set adaptiveLayout(value: {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    });
    /**
     * [descr:dxChartOptions.adjustOnZoom]
    
     */
    get adjustOnZoom(): boolean;
    set adjustOnZoom(value: boolean);
    /**
     * [descr:BaseChartOptions.animation]
    
     */
    get animation(): boolean | {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
        maxPointCountSupported?: number;
    };
    set animation(value: boolean | {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
        maxPointCountSupported?: number;
    });
    /**
     * [descr:dxChartOptions.annotations]
    
     */
    get annotations(): Array<DevExpress.viz.dxChartAnnotationConfig | any>;
    set annotations(value: Array<DevExpress.viz.dxChartAnnotationConfig | any>);
    /**
     * [descr:dxChartOptions.argumentAxis]
    
     */
    get argumentAxis(): {
        aggregateByCategory?: boolean;
        aggregatedPointsPosition?: AggregatedPointsPosition;
        aggregationGroupWidth?: number | undefined;
        aggregationInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean | undefined;
        argumentType?: ChartsDataType | undefined;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string | undefined;
        customPositionAxis?: string | undefined;
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        holidays?: Array<Date | string | number>;
        hoverMode?: ArgumentAxisHoverMode;
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        offset?: number | undefined;
        opacity?: number | undefined;
        placeholderSize?: number;
        position?: Position;
        singleWorkdays?: Array<Date | string | number>;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            text?: string | undefined;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: VisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    };
    set argumentAxis(value: {
        aggregateByCategory?: boolean;
        aggregatedPointsPosition?: AggregatedPointsPosition;
        aggregationGroupWidth?: number | undefined;
        aggregationInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean | undefined;
        argumentType?: ChartsDataType | undefined;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string | undefined;
        customPositionAxis?: string | undefined;
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        holidays?: Array<Date | string | number>;
        hoverMode?: ArgumentAxisHoverMode;
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        offset?: number | undefined;
        opacity?: number | undefined;
        placeholderSize?: number;
        position?: Position;
        singleWorkdays?: Array<Date | string | number>;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            text?: string | undefined;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: VisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    });
    /**
     * [descr:dxChartOptions.autoHidePointMarkers]
    
     */
    get autoHidePointMarkers(): boolean;
    set autoHidePointMarkers(value: boolean);
    /**
     * [descr:dxChartOptions.barGroupPadding]
    
     */
    get barGroupPadding(): number;
    set barGroupPadding(value: number);
    /**
     * [descr:dxChartOptions.barGroupWidth]
    
     */
    get barGroupWidth(): number | undefined;
    set barGroupWidth(value: number | undefined);
    /**
     * [descr:dxChartOptions.commonAnnotationSettings]
    
     */
    get commonAnnotationSettings(): dxChartCommonAnnotationConfig;
    set commonAnnotationSettings(value: dxChartCommonAnnotationConfig);
    /**
     * [descr:dxChartOptions.commonAxisSettings]
    
     */
    get commonAxisSettings(): {
        aggregatedPointsPosition?: AggregatedPointsPosition;
        allowDecimals?: boolean | undefined;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                position?: RelativePosition;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minValueMargin?: number | undefined;
        opacity?: number | undefined;
        placeholderSize?: number;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        title?: {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        width?: number;
    };
    set commonAxisSettings(value: {
        aggregatedPointsPosition?: AggregatedPointsPosition;
        allowDecimals?: boolean | undefined;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                position?: RelativePosition;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minValueMargin?: number | undefined;
        opacity?: number | undefined;
        placeholderSize?: number;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        title?: {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        width?: number;
    });
    /**
     * [descr:dxChartOptions.commonPaneSettings]
    
     */
    get commonPaneSettings(): {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: DashStyle;
            left?: boolean;
            opacity?: number | undefined;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
    };
    set commonPaneSettings(value: {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: DashStyle;
            left?: boolean;
            opacity?: number | undefined;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
    });
    /**
     * [descr:dxChartOptions.commonSeriesSettings]
    
     */
    get commonSeriesSettings(): any;
    set commonSeriesSettings(value: any);
    /**
     * [descr:dxChartOptions.containerBackgroundColor]
    
     */
    get containerBackgroundColor(): string;
    set containerBackgroundColor(value: string);
    /**
     * [descr:dxChartOptions.crosshair]
    
     */
    get crosshair(): {
        color?: string;
        dashStyle?: DashStyle;
        enabled?: boolean;
        horizontalLine?: boolean | {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: Format | string | undefined;
                visible?: boolean;
            };
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        label?: {
            backgroundColor?: string;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            visible?: boolean;
        };
        opacity?: number | undefined;
        verticalLine?: boolean | {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: Format | string | undefined;
                visible?: boolean;
            };
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        width?: number;
    };
    set crosshair(value: {
        color?: string;
        dashStyle?: DashStyle;
        enabled?: boolean;
        horizontalLine?: boolean | {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: Format | string | undefined;
                visible?: boolean;
            };
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        label?: {
            backgroundColor?: string;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            visible?: boolean;
        };
        opacity?: number | undefined;
        verticalLine?: boolean | {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: Format | string | undefined;
                visible?: boolean;
            };
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        width?: number;
    });
    /**
     * [descr:dxChartOptions.customizeAnnotation]
    
     */
    get customizeAnnotation(): Function | undefined;
    set customizeAnnotation(value: Function | undefined);
    /**
     * [descr:BaseChartOptions.customizeLabel]
    
     */
    get customizeLabel(): Function;
    set customizeLabel(value: Function);
    /**
     * [descr:BaseChartOptions.customizePoint]
    
     */
    get customizePoint(): Function;
    set customizePoint(value: Function);
    /**
     * [descr:dxChartOptions.dataPrepareSettings]
    
     */
    get dataPrepareSettings(): {
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    };
    set dataPrepareSettings(value: {
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    });
    /**
     * [descr:BaseChartOptions.dataSource]
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<any>);
    /**
     * [descr:dxChartOptions.defaultPane]
    
     */
    get defaultPane(): string | undefined;
    set defaultPane(value: string | undefined);
    /**
     * [descr:BaseWidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:BaseWidgetOptions.export]
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * [descr:dxChartOptions.legend]
    
     */
    get legend(): {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        hoverMode?: LegendHoverMode;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        position?: RelativePosition;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    };
    set legend(value: {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        hoverMode?: LegendHoverMode;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        position?: RelativePosition;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    });
    /**
     * [descr:BaseWidgetOptions.loadingIndicator]
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * [descr:BaseWidgetOptions.margin]
    
     */
    get margin(): {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    set margin(value: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    });
    /**
     * [descr:dxChartOptions.maxBubbleSize]
    
     */
    get maxBubbleSize(): number;
    set maxBubbleSize(value: number);
    /**
     * [descr:dxChartOptions.minBubbleSize]
    
     */
    get minBubbleSize(): number;
    set minBubbleSize(value: number);
    /**
     * [descr:dxChartOptions.negativesAsZeroes]
    
     */
    get negativesAsZeroes(): boolean;
    set negativesAsZeroes(value: boolean);
    /**
     * [descr:BaseChartOptions.palette]
    
     */
    get palette(): Palette | string | Array<string>;
    set palette(value: Palette | string | Array<string>);
    /**
     * [descr:BaseChartOptions.paletteExtensionMode]
    
     */
    get paletteExtensionMode(): PaletteExtensionMode;
    set paletteExtensionMode(value: PaletteExtensionMode);
    /**
     * [descr:dxChartOptions.panes]
    
     */
    get panes(): Array<any | {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: DashStyle;
            left?: boolean;
            opacity?: number | undefined;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
        height?: number | string | undefined;
        name?: string | undefined;
    }>;
    set panes(value: Array<any | {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: DashStyle;
            left?: boolean;
            opacity?: number | undefined;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
        height?: number | string | undefined;
        name?: string | undefined;
    }>);
    /**
     * [descr:BaseWidgetOptions.pathModified]
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * [descr:BaseChartOptions.pointSelectionMode]
    
     */
    get pointSelectionMode(): SingleOrMultiple;
    set pointSelectionMode(value: SingleOrMultiple);
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * [descr:dxChartOptions.resizePanesOnZoom]
    
     */
    get resizePanesOnZoom(): boolean;
    set resizePanesOnZoom(value: boolean);
    /**
     * [descr:dxChartOptions.resolveLabelOverlapping]
    
     */
    get resolveLabelOverlapping(): ChartsLabelOverlap;
    set resolveLabelOverlapping(value: ChartsLabelOverlap);
    /**
     * [descr:dxChartOptions.rotated]
    
     */
    get rotated(): boolean;
    set rotated(value: boolean);
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxChartOptions.scrollBar]
    
     */
    get scrollBar(): {
        color?: string;
        offset?: number;
        opacity?: number | undefined;
        position?: Position;
        visible?: boolean;
        width?: number;
    };
    set scrollBar(value: {
        color?: string;
        offset?: number;
        opacity?: number | undefined;
        position?: Position;
        visible?: boolean;
        width?: number;
    });
    /**
     * [descr:dxChartOptions.series]
    
     */
    get series(): any | undefined | Array<any>;
    set series(value: any | undefined | Array<any>);
    /**
     * [descr:dxChartOptions.seriesSelectionMode]
    
     */
    get seriesSelectionMode(): SingleOrMultiple;
    set seriesSelectionMode(value: SingleOrMultiple);
    /**
     * [descr:dxChartOptions.seriesTemplate]
    
     */
    get seriesTemplate(): {
        customizeSeries?: Function;
        nameField?: string;
    };
    set seriesTemplate(value: {
        customizeSeries?: Function;
        nameField?: string;
    });
    /**
     * [descr:BaseWidgetOptions.size]
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * [descr:dxChartOptions.stickyHovering]
    
     */
    get stickyHovering(): boolean;
    set stickyHovering(value: boolean);
    /**
     * [descr:dxChartOptions.synchronizeMultiAxes]
    
     */
    get synchronizeMultiAxes(): boolean;
    set synchronizeMultiAxes(value: boolean);
    /**
     * [descr:BaseWidgetOptions.theme]
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * [descr:BaseWidgetOptions.title]
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * [descr:dxChartOptions.tooltip]
    
     */
    get tooltip(): {
        argumentFormat?: Format | string | undefined;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        location?: ChartTooltipLocation;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        argumentFormat?: Format | string | undefined;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        location?: ChartTooltipLocation;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number | undefined;
    });
    /**
     * [descr:dxChartOptions.valueAxis]
    
     */
    get valueAxis(): Array<any | {
        aggregatedPointsPosition?: AggregatedPointsPosition;
        allowDecimals?: boolean | undefined;
        autoBreaksEnabled?: boolean;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string | undefined;
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxAutoBreakCount?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        multipleAxesSpacing?: number;
        name?: string | undefined;
        offset?: number | undefined;
        opacity?: number | undefined;
        pane?: string | undefined;
        placeholderSize?: number;
        position?: Position;
        showZero?: boolean | undefined;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        synchronizedValue?: number | undefined;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            text?: string | undefined;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        valueType?: ChartsDataType | undefined;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: VisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
    }>;
    set valueAxis(value: Array<any | {
        aggregatedPointsPosition?: AggregatedPointsPosition;
        allowDecimals?: boolean | undefined;
        autoBreaksEnabled?: boolean;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string | undefined;
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxAutoBreakCount?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        multipleAxesSpacing?: number;
        name?: string | undefined;
        offset?: number | undefined;
        opacity?: number | undefined;
        pane?: string | undefined;
        placeholderSize?: number;
        position?: Position;
        showZero?: boolean | undefined;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        synchronizedValue?: number | undefined;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            text?: string | undefined;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        valueType?: ChartsDataType | undefined;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: VisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
    }>);
    /**
     * [descr:dxChartOptions.zoomAndPan]
    
     */
    get zoomAndPan(): {
        allowMouseWheel?: boolean;
        allowTouchGestures?: boolean;
        argumentAxis?: ChartZoomAndPanMode;
        dragBoxStyle?: {
            color?: string | undefined;
            opacity?: number | undefined;
        };
        dragToZoom?: boolean;
        panKey?: EventKeyModifier;
        valueAxis?: ChartZoomAndPanMode;
    };
    set zoomAndPan(value: {
        allowMouseWheel?: boolean;
        allowTouchGestures?: boolean;
        argumentAxis?: ChartZoomAndPanMode;
        dragBoxStyle?: {
            color?: string | undefined;
            opacity?: number | undefined;
        };
        dragToZoom?: boolean;
        panKey?: EventKeyModifier;
        valueAxis?: ChartZoomAndPanMode;
    });
    /**
    
     * [descr:dxChartOptions.onArgumentAxisClick]
    
    
     */
    onArgumentAxisClick: EventEmitter<ArgumentAxisClickEvent>;
    /**
    
     * [descr:dxChartOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxChartOptions.onDone]
    
    
     */
    onDone: EventEmitter<DoneEvent>;
    /**
    
     * [descr:dxChartOptions.onDrawn]
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * [descr:dxChartOptions.onExported]
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * [descr:dxChartOptions.onExporting]
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * [descr:dxChartOptions.onFileSaving]
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * [descr:dxChartOptions.onIncidentOccurred]
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * [descr:dxChartOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxChartOptions.onLegendClick]
    
    
     */
    onLegendClick: EventEmitter<LegendClickEvent>;
    /**
    
     * [descr:dxChartOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxChartOptions.onPointClick]
    
    
     */
    onPointClick: EventEmitter<PointClickEvent>;
    /**
    
     * [descr:dxChartOptions.onPointHoverChanged]
    
    
     */
    onPointHoverChanged: EventEmitter<PointHoverChangedEvent>;
    /**
    
     * [descr:dxChartOptions.onPointSelectionChanged]
    
    
     */
    onPointSelectionChanged: EventEmitter<PointSelectionChangedEvent>;
    /**
    
     * [descr:dxChartOptions.onSeriesClick]
    
    
     */
    onSeriesClick: EventEmitter<SeriesClickEvent>;
    /**
    
     * [descr:dxChartOptions.onSeriesHoverChanged]
    
    
     */
    onSeriesHoverChanged: EventEmitter<SeriesHoverChangedEvent>;
    /**
    
     * [descr:dxChartOptions.onSeriesSelectionChanged]
    
    
     */
    onSeriesSelectionChanged: EventEmitter<SeriesSelectionChangedEvent>;
    /**
    
     * [descr:dxChartOptions.onTooltipHidden]
    
    
     */
    onTooltipHidden: EventEmitter<TooltipHiddenEvent>;
    /**
    
     * [descr:dxChartOptions.onTooltipShown]
    
    
     */
    onTooltipShown: EventEmitter<TooltipShownEvent>;
    /**
    
     * [descr:dxChartOptions.onZoomEnd]
    
    
     */
    onZoomEnd: EventEmitter<ZoomEndEvent>;
    /**
    
     * [descr:dxChartOptions.onZoomStart]
    
    
     */
    onZoomStart: EventEmitter<ZoomStartEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptiveLayoutChange: EventEmitter<{
        height?: number;
        keepLabels?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adjustOnZoomChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<boolean | {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
        maxPointCountSupported?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    annotationsChange: EventEmitter<Array<DevExpress.viz.dxChartAnnotationConfig | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    argumentAxisChange: EventEmitter<{
        aggregateByCategory?: boolean;
        aggregatedPointsPosition?: AggregatedPointsPosition;
        aggregationGroupWidth?: number | undefined;
        aggregationInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean | undefined;
        argumentType?: ChartsDataType | undefined;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string | undefined;
        customPositionAxis?: string | undefined;
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        holidays?: Array<Date | string | number>;
        hoverMode?: ArgumentAxisHoverMode;
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        offset?: number | undefined;
        opacity?: number | undefined;
        placeholderSize?: number;
        position?: Position;
        singleWorkdays?: Array<Date | string | number>;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            text?: string | undefined;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: VisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoHidePointMarkersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    barGroupPaddingChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    barGroupWidthChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAnnotationSettingsChange: EventEmitter<dxChartCommonAnnotationConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAxisSettingsChange: EventEmitter<{
        aggregatedPointsPosition?: AggregatedPointsPosition;
        allowDecimals?: boolean | undefined;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                position?: RelativePosition;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minValueMargin?: number | undefined;
        opacity?: number | undefined;
        placeholderSize?: number;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        title?: {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonPaneSettingsChange: EventEmitter<{
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: DashStyle;
            left?: boolean;
            opacity?: number | undefined;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonSeriesSettingsChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    crosshairChange: EventEmitter<{
        color?: string;
        dashStyle?: DashStyle;
        enabled?: boolean;
        horizontalLine?: boolean | {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: Format | string | undefined;
                visible?: boolean;
            };
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        label?: {
            backgroundColor?: string;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            visible?: boolean;
        };
        opacity?: number | undefined;
        verticalLine?: boolean | {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: Format | string | undefined;
                visible?: boolean;
            };
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeAnnotationChange: EventEmitter<Function | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeLabelChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizePointChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataPrepareSettingsChange: EventEmitter<{
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    defaultPaneChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    legendChange: EventEmitter<{
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        hoverMode?: LegendHoverMode;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        position?: RelativePosition;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxBubbleSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minBubbleSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    negativesAsZeroesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteChange: EventEmitter<Palette | string | Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteExtensionModeChange: EventEmitter<PaletteExtensionMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    panesChange: EventEmitter<Array<any | {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: DashStyle;
            left?: boolean;
            opacity?: number | undefined;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
        height?: number | string | undefined;
        name?: string | undefined;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pointSelectionModeChange: EventEmitter<SingleOrMultiple>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resizePanesOnZoomChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resolveLabelOverlappingChange: EventEmitter<ChartsLabelOverlap>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rotatedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollBarChange: EventEmitter<{
        color?: string;
        offset?: number;
        opacity?: number | undefined;
        position?: Position;
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesChange: EventEmitter<any | undefined | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesSelectionModeChange: EventEmitter<SingleOrMultiple>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesTemplateChange: EventEmitter<{
        customizeSeries?: Function;
        nameField?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stickyHoveringChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    synchronizeMultiAxesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        argumentFormat?: Format | string | undefined;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        location?: ChartTooltipLocation;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueAxisChange: EventEmitter<Array<any | {
        aggregatedPointsPosition?: AggregatedPointsPosition;
        allowDecimals?: boolean | undefined;
        autoBreaksEnabled?: boolean;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.common.charts.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: ScaleBreakLineStyle;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                position?: RelativePosition;
                verticalAlignment?: VerticalAlignment;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string | undefined;
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: HorizontalAlignment | undefined;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: ChartLabelDisplayMode;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: ChartsAxisLabelOverlap;
            position?: RelativePosition | Position;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any | undefined;
            textOverflow?: TextOverflow;
            visible?: boolean;
            wordWrap?: WordWrap;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxAutoBreakCount?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        multipleAxesSpacing?: number;
        name?: string | undefined;
        offset?: number | undefined;
        opacity?: number | undefined;
        pane?: string | undefined;
        placeholderSize?: number;
        position?: Position;
        showZero?: boolean | undefined;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                text?: string | undefined;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: HorizontalAlignment;
                verticalAlignment?: VerticalAlignment;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        synchronizedValue?: number | undefined;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: HorizontalAlignment;
            font?: Font;
            margin?: number;
            text?: string | undefined;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        valueType?: ChartsDataType | undefined;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: VisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomAndPanChange: EventEmitter<{
        allowMouseWheel?: boolean;
        allowTouchGestures?: boolean;
        argumentAxis?: ChartZoomAndPanMode;
        dragBoxStyle?: {
            color?: string | undefined;
            opacity?: number | undefined;
        };
        dragToZoom?: boolean;
        panKey?: EventKeyModifier;
        valueAxis?: ChartZoomAndPanMode;
    }>;
    get annotationsChildren(): QueryList<DxiAnnotationComponent>;
    set annotationsChildren(value: QueryList<DxiAnnotationComponent>);
    get panesChildren(): QueryList<DxiPaneComponent>;
    set panesChildren(value: QueryList<DxiPaneComponent>);
    get seriesChildren(): QueryList<DxiSeriesComponent>;
    set seriesChildren(value: QueryList<DxiSeriesComponent>);
    get valueAxisChildren(): QueryList<DxiValueAxisComponent>;
    set valueAxisChildren(value: QueryList<DxiValueAxisComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxChart;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxChartComponent, "dx-chart", never, { "adaptiveLayout": "adaptiveLayout"; "adjustOnZoom": "adjustOnZoom"; "animation": "animation"; "annotations": "annotations"; "argumentAxis": "argumentAxis"; "autoHidePointMarkers": "autoHidePointMarkers"; "barGroupPadding": "barGroupPadding"; "barGroupWidth": "barGroupWidth"; "commonAnnotationSettings": "commonAnnotationSettings"; "commonAxisSettings": "commonAxisSettings"; "commonPaneSettings": "commonPaneSettings"; "commonSeriesSettings": "commonSeriesSettings"; "containerBackgroundColor": "containerBackgroundColor"; "crosshair": "crosshair"; "customizeAnnotation": "customizeAnnotation"; "customizeLabel": "customizeLabel"; "customizePoint": "customizePoint"; "dataPrepareSettings": "dataPrepareSettings"; "dataSource": "dataSource"; "defaultPane": "defaultPane"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "legend": "legend"; "loadingIndicator": "loadingIndicator"; "margin": "margin"; "maxBubbleSize": "maxBubbleSize"; "minBubbleSize": "minBubbleSize"; "negativesAsZeroes": "negativesAsZeroes"; "palette": "palette"; "paletteExtensionMode": "paletteExtensionMode"; "panes": "panes"; "pathModified": "pathModified"; "pointSelectionMode": "pointSelectionMode"; "redrawOnResize": "redrawOnResize"; "resizePanesOnZoom": "resizePanesOnZoom"; "resolveLabelOverlapping": "resolveLabelOverlapping"; "rotated": "rotated"; "rtlEnabled": "rtlEnabled"; "scrollBar": "scrollBar"; "series": "series"; "seriesSelectionMode": "seriesSelectionMode"; "seriesTemplate": "seriesTemplate"; "size": "size"; "stickyHovering": "stickyHovering"; "synchronizeMultiAxes": "synchronizeMultiAxes"; "theme": "theme"; "title": "title"; "tooltip": "tooltip"; "valueAxis": "valueAxis"; "zoomAndPan": "zoomAndPan"; }, { "onArgumentAxisClick": "onArgumentAxisClick"; "onDisposing": "onDisposing"; "onDone": "onDone"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onLegendClick": "onLegendClick"; "onOptionChanged": "onOptionChanged"; "onPointClick": "onPointClick"; "onPointHoverChanged": "onPointHoverChanged"; "onPointSelectionChanged": "onPointSelectionChanged"; "onSeriesClick": "onSeriesClick"; "onSeriesHoverChanged": "onSeriesHoverChanged"; "onSeriesSelectionChanged": "onSeriesSelectionChanged"; "onTooltipHidden": "onTooltipHidden"; "onTooltipShown": "onTooltipShown"; "onZoomEnd": "onZoomEnd"; "onZoomStart": "onZoomStart"; "adaptiveLayoutChange": "adaptiveLayoutChange"; "adjustOnZoomChange": "adjustOnZoomChange"; "animationChange": "animationChange"; "annotationsChange": "annotationsChange"; "argumentAxisChange": "argumentAxisChange"; "autoHidePointMarkersChange": "autoHidePointMarkersChange"; "barGroupPaddingChange": "barGroupPaddingChange"; "barGroupWidthChange": "barGroupWidthChange"; "commonAnnotationSettingsChange": "commonAnnotationSettingsChange"; "commonAxisSettingsChange": "commonAxisSettingsChange"; "commonPaneSettingsChange": "commonPaneSettingsChange"; "commonSeriesSettingsChange": "commonSeriesSettingsChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "crosshairChange": "crosshairChange"; "customizeAnnotationChange": "customizeAnnotationChange"; "customizeLabelChange": "customizeLabelChange"; "customizePointChange": "customizePointChange"; "dataPrepareSettingsChange": "dataPrepareSettingsChange"; "dataSourceChange": "dataSourceChange"; "defaultPaneChange": "defaultPaneChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "legendChange": "legendChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "maxBubbleSizeChange": "maxBubbleSizeChange"; "minBubbleSizeChange": "minBubbleSizeChange"; "negativesAsZeroesChange": "negativesAsZeroesChange"; "paletteChange": "paletteChange"; "paletteExtensionModeChange": "paletteExtensionModeChange"; "panesChange": "panesChange"; "pathModifiedChange": "pathModifiedChange"; "pointSelectionModeChange": "pointSelectionModeChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "resizePanesOnZoomChange": "resizePanesOnZoomChange"; "resolveLabelOverlappingChange": "resolveLabelOverlappingChange"; "rotatedChange": "rotatedChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollBarChange": "scrollBarChange"; "seriesChange": "seriesChange"; "seriesSelectionModeChange": "seriesSelectionModeChange"; "seriesTemplateChange": "seriesTemplateChange"; "sizeChange": "sizeChange"; "stickyHoveringChange": "stickyHoveringChange"; "synchronizeMultiAxesChange": "synchronizeMultiAxesChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "valueAxisChange": "valueAxisChange"; "zoomAndPanChange": "zoomAndPanChange"; }, ["annotationsChildren", "panesChildren", "seriesChildren", "valueAxisChildren"], never>;
}
export declare class DxChartModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxChartModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxChartModule, [typeof DxChartComponent], [typeof i1.DxoAdaptiveLayoutModule, typeof i1.DxoAnimationModule, typeof i1.DxiAnnotationModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoImageModule, typeof i1.DxoShadowModule, typeof i1.DxoArgumentAxisModule, typeof i1.DxoAggregationIntervalModule, typeof i1.DxiBreakModule, typeof i1.DxoBreakStyleModule, typeof i1.DxiConstantLineModule, typeof i1.DxoLabelModule, typeof i1.DxoConstantLineStyleModule, typeof i1.DxoGridModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorGridModule, typeof i1.DxoMinorTickModule, typeof i1.DxoMinorTickIntervalModule, typeof i1.DxoMinVisualRangeLengthModule, typeof i1.DxiStripModule, typeof i1.DxoStripStyleModule, typeof i1.DxoTickModule, typeof i1.DxoTickIntervalModule, typeof i1.DxoTitleModule, typeof i1.DxoCommonAnnotationSettingsModule, typeof i1.DxoCommonAxisSettingsModule, typeof i1.DxoCommonPaneSettingsModule, typeof i1.DxoBackgroundColorModule, typeof i1.DxoCommonSeriesSettingsModule, typeof i1.DxoAggregationModule, typeof i1.DxoAreaModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoConnectorModule, typeof i1.DxoPointModule, typeof i1.DxoHeightModule, typeof i1.DxoUrlModule, typeof i1.DxoWidthModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoReductionModule, typeof i1.DxoValueErrorBarModule, typeof i1.DxoBarModule, typeof i1.DxoBubbleModule, typeof i1.DxoCandlestickModule, typeof i1.DxoColorModule, typeof i1.DxoFullstackedareaModule, typeof i1.DxoFullstackedbarModule, typeof i1.DxoFullstackedlineModule, typeof i1.DxoFullstackedsplineModule, typeof i1.DxoFullstackedsplineareaModule, typeof i1.DxoArgumentFormatModule, typeof i1.DxoLineModule, typeof i1.DxoRangeareaModule, typeof i1.DxoRangebarModule, typeof i1.DxoScatterModule, typeof i1.DxoSplineModule, typeof i1.DxoSplineareaModule, typeof i1.DxoStackedareaModule, typeof i1.DxoStackedbarModule, typeof i1.DxoStackedlineModule, typeof i1.DxoStackedsplineModule, typeof i1.DxoStackedsplineareaModule, typeof i1.DxoStepareaModule, typeof i1.DxoSteplineModule, typeof i1.DxoStockModule, typeof i1.DxoCrosshairModule, typeof i1.DxoHorizontalLineModule, typeof i1.DxoVerticalLineModule, typeof i1.DxoDataPrepareSettingsModule, typeof i1.DxoExportModule, typeof i1.DxoLegendModule, typeof i1.DxoMarginModule, typeof i1.DxoSubtitleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxiPaneModule, typeof i1.DxoScrollBarModule, typeof i1.DxiSeriesModule, typeof i1.DxoSeriesTemplateModule, typeof i1.DxoSizeModule, typeof i1.DxoTooltipModule, typeof i1.DxiValueAxisModule, typeof i1.DxoZoomAndPanModule, typeof i1.DxoDragBoxStyleModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxChartComponent, typeof i1.DxoAdaptiveLayoutModule, typeof i1.DxoAnimationModule, typeof i1.DxiAnnotationModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoImageModule, typeof i1.DxoShadowModule, typeof i1.DxoArgumentAxisModule, typeof i1.DxoAggregationIntervalModule, typeof i1.DxiBreakModule, typeof i1.DxoBreakStyleModule, typeof i1.DxiConstantLineModule, typeof i1.DxoLabelModule, typeof i1.DxoConstantLineStyleModule, typeof i1.DxoGridModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorGridModule, typeof i1.DxoMinorTickModule, typeof i1.DxoMinorTickIntervalModule, typeof i1.DxoMinVisualRangeLengthModule, typeof i1.DxiStripModule, typeof i1.DxoStripStyleModule, typeof i1.DxoTickModule, typeof i1.DxoTickIntervalModule, typeof i1.DxoTitleModule, typeof i1.DxoCommonAnnotationSettingsModule, typeof i1.DxoCommonAxisSettingsModule, typeof i1.DxoCommonPaneSettingsModule, typeof i1.DxoBackgroundColorModule, typeof i1.DxoCommonSeriesSettingsModule, typeof i1.DxoAggregationModule, typeof i1.DxoAreaModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoConnectorModule, typeof i1.DxoPointModule, typeof i1.DxoHeightModule, typeof i1.DxoUrlModule, typeof i1.DxoWidthModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoReductionModule, typeof i1.DxoValueErrorBarModule, typeof i1.DxoBarModule, typeof i1.DxoBubbleModule, typeof i1.DxoCandlestickModule, typeof i1.DxoColorModule, typeof i1.DxoFullstackedareaModule, typeof i1.DxoFullstackedbarModule, typeof i1.DxoFullstackedlineModule, typeof i1.DxoFullstackedsplineModule, typeof i1.DxoFullstackedsplineareaModule, typeof i1.DxoArgumentFormatModule, typeof i1.DxoLineModule, typeof i1.DxoRangeareaModule, typeof i1.DxoRangebarModule, typeof i1.DxoScatterModule, typeof i1.DxoSplineModule, typeof i1.DxoSplineareaModule, typeof i1.DxoStackedareaModule, typeof i1.DxoStackedbarModule, typeof i1.DxoStackedlineModule, typeof i1.DxoStackedsplineModule, typeof i1.DxoStackedsplineareaModule, typeof i1.DxoStepareaModule, typeof i1.DxoSteplineModule, typeof i1.DxoStockModule, typeof i1.DxoCrosshairModule, typeof i1.DxoHorizontalLineModule, typeof i1.DxoVerticalLineModule, typeof i1.DxoDataPrepareSettingsModule, typeof i1.DxoExportModule, typeof i1.DxoLegendModule, typeof i1.DxoMarginModule, typeof i1.DxoSubtitleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxiPaneModule, typeof i1.DxoScrollBarModule, typeof i1.DxiSeriesModule, typeof i1.DxoSeriesTemplateModule, typeof i1.DxoSizeModule, typeof i1.DxoTooltipModule, typeof i1.DxiValueAxisModule, typeof i1.DxoZoomAndPanModule, typeof i1.DxoDragBoxStyleModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxChartModule>;
}
export { DxChartTypes };
