/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ExportFormat, HorizontalAlignment, Orientation, VerticalAlignment, VerticalEdge } from 'devextreme/common';
import { AnimationEaseMode, DashStyle, Font, LabelOverlap, Palette, PaletteExtensionMode, TextOverflow, Theme, WordWrap } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Format } from 'devextreme/localization';
import { DisposingEvent, DrawnEvent, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, OptionChangedEvent, TooltipHiddenEvent, TooltipShownEvent } from 'devextreme/viz/linear_gauge';
import DxLinearGauge from 'devextreme/viz/linear_gauge';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import type * as DxLinearGaugeTypes from "devextreme/viz/linear_gauge_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxLinearGauge]

 */
export declare class DxLinearGaugeComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxLinearGauge;
    /**
     * [descr:BaseGaugeOptions.animation]
    
     */
    get animation(): {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
    };
    set animation(value: {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
    });
    /**
     * [descr:BaseGaugeOptions.containerBackgroundColor]
    
     */
    get containerBackgroundColor(): string;
    set containerBackgroundColor(value: string);
    /**
     * [descr:BaseWidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:BaseWidgetOptions.export]
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * [descr:dxLinearGaugeOptions.geometry]
    
     */
    get geometry(): {
        orientation?: Orientation;
    };
    set geometry(value: {
        orientation?: Orientation;
    });
    /**
     * [descr:BaseGaugeOptions.loadingIndicator]
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * [descr:BaseWidgetOptions.margin]
    
     */
    get margin(): {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    set margin(value: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    });
    /**
     * [descr:BaseWidgetOptions.pathModified]
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * [descr:dxLinearGaugeOptions.rangeContainer]
    
     */
    get rangeContainer(): {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        horizontalOrientation?: HorizontalAlignment;
        offset?: number;
        palette?: Palette | string | Array<string>;
        paletteExtensionMode?: PaletteExtensionMode;
        ranges?: Array<any | {
            color?: DevExpress.common.charts.ChartsColor | string;
            endValue?: number;
            startValue?: number;
        }>;
        verticalOrientation?: VerticalAlignment;
        width?: number | {
            end?: number;
            start?: number;
        };
    };
    set rangeContainer(value: {
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        horizontalOrientation?: HorizontalAlignment;
        offset?: number;
        palette?: Palette | string | Array<string>;
        paletteExtensionMode?: PaletteExtensionMode;
        ranges?: Array<any | {
            color?: DevExpress.common.charts.ChartsColor | string;
            endValue?: number;
            startValue?: number;
        }>;
        verticalOrientation?: VerticalAlignment;
        width?: number | {
            end?: number;
            start?: number;
        };
    });
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxLinearGaugeOptions.scale]
    
     */
    get scale(): {
        allowDecimals?: boolean | undefined;
        customMinorTicks?: Array<number>;
        customTicks?: Array<number>;
        endValue?: number;
        horizontalOrientation?: HorizontalAlignment;
        label?: {
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromTick?: number;
            overlappingBehavior?: LabelOverlap;
            useRangeColors?: boolean;
            visible?: boolean;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickInterval?: number | undefined;
        scaleDivisionFactor?: number;
        startValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | undefined;
        verticalOrientation?: VerticalAlignment;
    };
    set scale(value: {
        allowDecimals?: boolean | undefined;
        customMinorTicks?: Array<number>;
        customTicks?: Array<number>;
        endValue?: number;
        horizontalOrientation?: HorizontalAlignment;
        label?: {
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromTick?: number;
            overlappingBehavior?: LabelOverlap;
            useRangeColors?: boolean;
            visible?: boolean;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickInterval?: number | undefined;
        scaleDivisionFactor?: number;
        startValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | undefined;
        verticalOrientation?: VerticalAlignment;
    });
    /**
     * [descr:BaseWidgetOptions.size]
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * [descr:dxLinearGaugeOptions.subvalueIndicator]
    
     */
    get subvalueIndicator(): any;
    set subvalueIndicator(value: any);
    /**
     * [descr:BaseGaugeOptions.subvalues]
    
     */
    get subvalues(): Array<number>;
    set subvalues(value: Array<number>);
    /**
     * [descr:BaseWidgetOptions.theme]
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * [descr:BaseWidgetOptions.title]
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * [descr:BaseGaugeOptions.tooltip]
    
     */
    get tooltip(): {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    });
    /**
     * [descr:BaseGaugeOptions.value]
    
     */
    get value(): number | undefined;
    set value(value: number | undefined);
    /**
     * [descr:dxLinearGaugeOptions.valueIndicator]
    
     */
    get valueIndicator(): any;
    set valueIndicator(value: any);
    /**
    
     * [descr:dxLinearGaugeOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onDrawn]
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onExported]
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onExporting]
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onFileSaving]
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onIncidentOccurred]
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onTooltipHidden]
    
    
     */
    onTooltipHidden: EventEmitter<TooltipHiddenEvent>;
    /**
    
     * [descr:dxLinearGaugeOptions.onTooltipShown]
    
    
     */
    onTooltipShown: EventEmitter<TooltipShownEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    geometryChange: EventEmitter<{
        orientation?: Orientation;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rangeContainerChange: EventEmitter<{
        backgroundColor?: DevExpress.common.charts.ChartsColor | string;
        horizontalOrientation?: HorizontalAlignment;
        offset?: number;
        palette?: Palette | string | Array<string>;
        paletteExtensionMode?: PaletteExtensionMode;
        ranges?: Array<any | {
            color?: DevExpress.common.charts.ChartsColor | string;
            endValue?: number;
            startValue?: number;
        }>;
        verticalOrientation?: VerticalAlignment;
        width?: number | {
            end?: number;
            start?: number;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleChange: EventEmitter<{
        allowDecimals?: boolean | undefined;
        customMinorTicks?: Array<number>;
        customTicks?: Array<number>;
        endValue?: number;
        horizontalOrientation?: HorizontalAlignment;
        label?: {
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromTick?: number;
            overlappingBehavior?: LabelOverlap;
            useRangeColors?: boolean;
            visible?: boolean;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickInterval?: number | undefined;
        scaleDivisionFactor?: number;
        startValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | undefined;
        verticalOrientation?: VerticalAlignment;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    subvalueIndicatorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    subvaluesChange: EventEmitter<Array<number>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueIndicatorChange: EventEmitter<any>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLinearGauge;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLinearGaugeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxLinearGaugeComponent, "dx-linear-gauge", never, { "animation": "animation"; "containerBackgroundColor": "containerBackgroundColor"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "geometry": "geometry"; "loadingIndicator": "loadingIndicator"; "margin": "margin"; "pathModified": "pathModified"; "rangeContainer": "rangeContainer"; "redrawOnResize": "redrawOnResize"; "rtlEnabled": "rtlEnabled"; "scale": "scale"; "size": "size"; "subvalueIndicator": "subvalueIndicator"; "subvalues": "subvalues"; "theme": "theme"; "title": "title"; "tooltip": "tooltip"; "value": "value"; "valueIndicator": "valueIndicator"; }, { "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onTooltipHidden": "onTooltipHidden"; "onTooltipShown": "onTooltipShown"; "animationChange": "animationChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "geometryChange": "geometryChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "pathModifiedChange": "pathModifiedChange"; "rangeContainerChange": "rangeContainerChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "scaleChange": "scaleChange"; "sizeChange": "sizeChange"; "subvalueIndicatorChange": "subvalueIndicatorChange"; "subvaluesChange": "subvaluesChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "valueChange": "valueChange"; "valueIndicatorChange": "valueIndicatorChange"; }, never, never>;
}
export declare class DxLinearGaugeModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxLinearGaugeModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxLinearGaugeModule, [typeof DxLinearGaugeComponent], [typeof i1.DxoAnimationModule, typeof i1.DxoExportModule, typeof i1.DxoGeometryModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoFontModule, typeof i1.DxoMarginModule, typeof i1.DxoRangeContainerModule, typeof i1.DxoBackgroundColorModule, typeof i1.DxiRangeModule, typeof i1.DxoColorModule, typeof i1.DxoWidthModule, typeof i1.DxoScaleModule, typeof i1.DxoLabelModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorTickModule, typeof i1.DxoTickModule, typeof i1.DxoSizeModule, typeof i1.DxoSubvalueIndicatorModule, typeof i1.DxoTextModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoBorderModule, typeof i1.DxoShadowModule, typeof i1.DxoValueIndicatorModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxLinearGaugeComponent, typeof i1.DxoAnimationModule, typeof i1.DxoExportModule, typeof i1.DxoGeometryModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoFontModule, typeof i1.DxoMarginModule, typeof i1.DxoRangeContainerModule, typeof i1.DxoBackgroundColorModule, typeof i1.DxiRangeModule, typeof i1.DxoColorModule, typeof i1.DxoWidthModule, typeof i1.DxoScaleModule, typeof i1.DxoLabelModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorTickModule, typeof i1.DxoTickModule, typeof i1.DxoSizeModule, typeof i1.DxoSubvalueIndicatorModule, typeof i1.DxoTextModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoTooltipModule, typeof i1.DxoBorderModule, typeof i1.DxoShadowModule, typeof i1.DxoValueIndicatorModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxLinearGaugeModule>;
}
export { DxLinearGaugeTypes };
