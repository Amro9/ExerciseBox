/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { PositionConfig } from 'devextreme/animation/position';
import DevExpress from 'devextreme/bundles/dx.all';
import { DragDirection, DragHighlight, HorizontalAlignment, Mode, ScrollbarMode, SelectAllMode, SingleMultipleOrNone, SortOrder } from 'devextreme/common';
import { ApplyFilterMode, ColumnChooserMode, ColumnChooserSearchConfig, ColumnChooserSelectionConfig, ColumnResizeMode, DataRenderMode, EnterKeyAction, EnterKeyDirection, GridsEditMode, GridsEditRefreshMode, GroupExpandMode, HeaderFilterSearchConfig, NewRowPosition, PagerDisplayMode, PagerPageSize, SelectionColumnDisplayMode, StartEditAction, StateStoreType, SummaryType } from 'devextreme/common/grids';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { AdaptiveDetailRowPreparingEvent, CellClickEvent, CellDblClickEvent, CellHoverChangedEvent, CellPreparedEvent, ContentReadyEvent, ContextMenuPreparingEvent, DataErrorOccurredEvent, DataGridExportFormat, DataGridScrollMode, DisposingEvent, EditCanceledEvent, EditCancelingEvent, EditingStartEvent, EditorPreparedEvent, EditorPreparingEvent, ExportingEvent, FocusedCellChangedEvent, FocusedCellChangingEvent, FocusedRowChangedEvent, FocusedRowChangingEvent, InitializedEvent, InitNewRowEvent, KeyDownEvent, OptionChangedEvent, RowClickEvent, RowCollapsedEvent, RowCollapsingEvent, RowDblClickEvent, RowExpandedEvent, RowExpandingEvent, RowInsertedEvent, RowInsertingEvent, RowPreparedEvent, RowRemovedEvent, RowRemovingEvent, RowUpdatedEvent, RowUpdatingEvent, RowValidatingEvent, SavedEvent, SavingEvent, SelectionChangedEvent, ToolbarPreparingEvent } from 'devextreme/ui/data_grid';
import { dxFilterBuilderOptions } from 'devextreme/ui/filter_builder';
import { dxFormOptions } from 'devextreme/ui/form';
import { Properties as dxPopupOptions } from 'devextreme/ui/popup';
import DxDataGrid from 'devextreme/ui/data_grid';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiColumnComponent } from 'devextreme-angular/ui/nested';
import { DxiSortByGroupSummaryInfoComponent } from 'devextreme-angular/ui/nested';
import type * as DxDataGridTypes from "devextreme/ui/data_grid_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
export { ExplicitTypes } from 'devextreme/ui/data_grid';
/**
 * [descr:dxDataGrid]

 */
export declare class DxDataGridComponent<TRowData = any, TKey = any> extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDataGrid<TRowData, TKey>;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.allowColumnReordering]
    
     */
    get allowColumnReordering(): boolean;
    set allowColumnReordering(value: boolean);
    /**
     * [descr:GridBaseOptions.allowColumnResizing]
    
     */
    get allowColumnResizing(): boolean;
    set allowColumnResizing(value: boolean);
    /**
     * [descr:GridBaseOptions.autoNavigateToFocusedRow]
    
     */
    get autoNavigateToFocusedRow(): boolean;
    set autoNavigateToFocusedRow(value: boolean);
    /**
     * [descr:GridBaseOptions.cacheEnabled]
    
     */
    get cacheEnabled(): boolean;
    set cacheEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.cellHintEnabled]
    
     */
    get cellHintEnabled(): boolean;
    set cellHintEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.columnAutoWidth]
    
     */
    get columnAutoWidth(): boolean;
    set columnAutoWidth(value: boolean);
    /**
     * [descr:GridBaseOptions.columnChooser]
    
     */
    get columnChooser(): {
        allowSearch?: boolean;
        container?: string | UserDefinedElement | undefined;
        emptyPanelText?: string;
        enabled?: boolean;
        height?: number;
        mode?: ColumnChooserMode;
        position?: PositionConfig | undefined;
        search?: ColumnChooserSearchConfig;
        searchTimeout?: number;
        selection?: ColumnChooserSelectionConfig;
        sortOrder?: SortOrder | undefined;
        title?: string;
        width?: number;
    };
    set columnChooser(value: {
        allowSearch?: boolean;
        container?: string | UserDefinedElement | undefined;
        emptyPanelText?: string;
        enabled?: boolean;
        height?: number;
        mode?: ColumnChooserMode;
        position?: PositionConfig | undefined;
        search?: ColumnChooserSearchConfig;
        searchTimeout?: number;
        selection?: ColumnChooserSelectionConfig;
        sortOrder?: SortOrder | undefined;
        title?: string;
        width?: number;
    });
    /**
     * [descr:GridBaseOptions.columnFixing]
    
     */
    get columnFixing(): {
        enabled?: boolean;
        texts?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            unfix?: string;
        };
    };
    set columnFixing(value: {
        enabled?: boolean;
        texts?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            unfix?: string;
        };
    });
    /**
     * [descr:GridBaseOptions.columnHidingEnabled]
    
     */
    get columnHidingEnabled(): boolean;
    set columnHidingEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.columnMinWidth]
    
     */
    get columnMinWidth(): number | undefined;
    set columnMinWidth(value: number | undefined);
    /**
     * [descr:GridBaseOptions.columnResizingMode]
    
     */
    get columnResizingMode(): ColumnResizeMode;
    set columnResizingMode(value: ColumnResizeMode);
    /**
     * [descr:dxDataGridOptions.columns]
    
     */
    get columns(): Array<DevExpress.ui.dxDataGridColumn | string>;
    set columns(value: Array<DevExpress.ui.dxDataGridColumn | string>);
    /**
     * [descr:GridBaseOptions.columnWidth]
    
     */
    get columnWidth(): Mode | number | undefined;
    set columnWidth(value: Mode | number | undefined);
    /**
     * [descr:dxDataGridOptions.customizeColumns]
    
     */
    get customizeColumns(): Function;
    set customizeColumns(value: Function);
    /**
     * [descr:dxDataGridOptions.dataRowTemplate]
    
     */
    get dataRowTemplate(): any;
    set dataRowTemplate(value: any);
    /**
     * [descr:GridBaseOptions.dataSource]
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<any>);
    /**
     * [descr:GridBaseOptions.dateSerializationFormat]
    
     */
    get dateSerializationFormat(): string;
    set dateSerializationFormat(value: string);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:dxDataGridOptions.editing]
    
     */
    get editing(): {
        allowAdding?: boolean;
        allowDeleting?: boolean | Function;
        allowUpdating?: boolean | Function;
        changes?: Array<DevExpress.common.grids.DataChange>;
        confirmDelete?: boolean;
        editColumnName?: string;
        editRowKey?: any;
        form?: dxFormOptions;
        mode?: GridsEditMode;
        newRowPosition?: NewRowPosition;
        popup?: dxPopupOptions;
        refreshMode?: GridsEditRefreshMode;
        selectTextOnEditStart?: boolean;
        startEditAction?: StartEditAction;
        texts?: {
            addRow?: string;
            cancelAllChanges?: string;
            cancelRowChanges?: string;
            confirmDeleteMessage?: string;
            confirmDeleteTitle?: string;
            deleteRow?: string;
            editRow?: string;
            saveAllChanges?: string;
            saveRowChanges?: string;
            undeleteRow?: string;
            validationCancelChanges?: string;
        };
        useIcons?: boolean;
    };
    set editing(value: {
        allowAdding?: boolean;
        allowDeleting?: boolean | Function;
        allowUpdating?: boolean | Function;
        changes?: Array<DevExpress.common.grids.DataChange>;
        confirmDelete?: boolean;
        editColumnName?: string;
        editRowKey?: any;
        form?: dxFormOptions;
        mode?: GridsEditMode;
        newRowPosition?: NewRowPosition;
        popup?: dxPopupOptions;
        refreshMode?: GridsEditRefreshMode;
        selectTextOnEditStart?: boolean;
        startEditAction?: StartEditAction;
        texts?: {
            addRow?: string;
            cancelAllChanges?: string;
            cancelRowChanges?: string;
            confirmDeleteMessage?: string;
            confirmDeleteTitle?: string;
            deleteRow?: string;
            editRow?: string;
            saveAllChanges?: string;
            saveRowChanges?: string;
            undeleteRow?: string;
            validationCancelChanges?: string;
        };
        useIcons?: boolean;
    });
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:GridBaseOptions.errorRowEnabled]
    
     */
    get errorRowEnabled(): boolean;
    set errorRowEnabled(value: boolean);
    /**
     * [descr:dxDataGridOptions.export]
    
     */
    get export(): {
        allowExportSelectedData?: boolean;
        enabled?: boolean;
        formats?: Array<DataGridExportFormat | string>;
        texts?: {
            exportAll?: string;
            exportSelectedRows?: string;
            exportTo?: string;
        };
    };
    set export(value: {
        allowExportSelectedData?: boolean;
        enabled?: boolean;
        formats?: Array<DataGridExportFormat | string>;
        texts?: {
            exportAll?: string;
            exportSelectedRows?: string;
            exportTo?: string;
        };
    });
    /**
     * [descr:GridBaseOptions.filterBuilder]
    
     */
    get filterBuilder(): dxFilterBuilderOptions;
    set filterBuilder(value: dxFilterBuilderOptions);
    /**
     * [descr:GridBaseOptions.filterBuilderPopup]
    
     */
    get filterBuilderPopup(): dxPopupOptions;
    set filterBuilderPopup(value: dxPopupOptions);
    /**
     * [descr:GridBaseOptions.filterPanel]
    
     */
    get filterPanel(): {
        customizeText?: Function;
        filterEnabled?: boolean;
        texts?: {
            clearFilter?: string;
            createFilter?: string;
            filterEnabledHint?: string;
        };
        visible?: boolean;
    };
    set filterPanel(value: {
        customizeText?: Function;
        filterEnabled?: boolean;
        texts?: {
            clearFilter?: string;
            createFilter?: string;
            filterEnabledHint?: string;
        };
        visible?: boolean;
    });
    /**
     * [descr:GridBaseOptions.filterRow]
    
     */
    get filterRow(): {
        applyFilter?: ApplyFilterMode;
        applyFilterText?: string;
        betweenEndText?: string;
        betweenStartText?: string;
        operationDescriptions?: {
            between?: string;
            contains?: string;
            endsWith?: string;
            equal?: string;
            greaterThan?: string;
            greaterThanOrEqual?: string;
            lessThan?: string;
            lessThanOrEqual?: string;
            notContains?: string;
            notEqual?: string;
            startsWith?: string;
        };
        resetOperationText?: string;
        showAllText?: string;
        showOperationChooser?: boolean;
        visible?: boolean;
    };
    set filterRow(value: {
        applyFilter?: ApplyFilterMode;
        applyFilterText?: string;
        betweenEndText?: string;
        betweenStartText?: string;
        operationDescriptions?: {
            between?: string;
            contains?: string;
            endsWith?: string;
            equal?: string;
            greaterThan?: string;
            greaterThanOrEqual?: string;
            lessThan?: string;
            lessThanOrEqual?: string;
            notContains?: string;
            notEqual?: string;
            startsWith?: string;
        };
        resetOperationText?: string;
        showAllText?: string;
        showOperationChooser?: boolean;
        visible?: boolean;
    });
    /**
     * [descr:GridBaseOptions.filterSyncEnabled]
    
     */
    get filterSyncEnabled(): Mode | boolean;
    set filterSyncEnabled(value: Mode | boolean);
    /**
     * [descr:GridBaseOptions.filterValue]
    
     */
    get filterValue(): any;
    set filterValue(value: any);
    /**
     * [descr:GridBaseOptions.focusedColumnIndex]
    
     */
    get focusedColumnIndex(): number;
    set focusedColumnIndex(value: number);
    /**
     * [descr:GridBaseOptions.focusedRowEnabled]
    
     */
    get focusedRowEnabled(): boolean;
    set focusedRowEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.focusedRowIndex]
    
     */
    get focusedRowIndex(): number;
    set focusedRowIndex(value: number);
    /**
     * [descr:GridBaseOptions.focusedRowKey]
    
     */
    get focusedRowKey(): any | undefined;
    set focusedRowKey(value: any | undefined);
    /**
     * [descr:dxDataGridOptions.grouping]
    
     */
    get grouping(): {
        allowCollapsing?: boolean;
        autoExpandAll?: boolean;
        contextMenuEnabled?: boolean;
        expandMode?: GroupExpandMode;
        texts?: {
            groupByThisColumn?: string;
            groupContinuedMessage?: string;
            groupContinuesMessage?: string;
            ungroup?: string;
            ungroupAll?: string;
        };
    };
    set grouping(value: {
        allowCollapsing?: boolean;
        autoExpandAll?: boolean;
        contextMenuEnabled?: boolean;
        expandMode?: GroupExpandMode;
        texts?: {
            groupByThisColumn?: string;
            groupContinuedMessage?: string;
            groupContinuesMessage?: string;
            ungroup?: string;
            ungroupAll?: string;
        };
    });
    /**
     * [descr:dxDataGridOptions.groupPanel]
    
     */
    get groupPanel(): {
        allowColumnDragging?: boolean;
        emptyPanelText?: string;
        visible?: Mode | boolean;
    };
    set groupPanel(value: {
        allowColumnDragging?: boolean;
        emptyPanelText?: string;
        visible?: Mode | boolean;
    });
    /**
     * [descr:GridBaseOptions.headerFilter]
    
     */
    get headerFilter(): {
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        height?: number;
        search?: HeaderFilterSearchConfig;
        searchTimeout?: number;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        visible?: boolean;
        width?: number;
    };
    set headerFilter(value: {
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        height?: number;
        search?: HeaderFilterSearchConfig;
        searchTimeout?: number;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        visible?: boolean;
        width?: number;
    });
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:GridBaseOptions.highlightChanges]
    
     */
    get highlightChanges(): boolean;
    set highlightChanges(value: boolean);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.keyboardNavigation]
    
     */
    get keyboardNavigation(): {
        editOnKeyPress?: boolean;
        enabled?: boolean;
        enterKeyAction?: EnterKeyAction;
        enterKeyDirection?: EnterKeyDirection;
    };
    set keyboardNavigation(value: {
        editOnKeyPress?: boolean;
        enabled?: boolean;
        enterKeyAction?: EnterKeyAction;
        enterKeyDirection?: EnterKeyDirection;
    });
    /**
     * [descr:dxDataGridOptions.keyExpr]
    
     */
    get keyExpr(): string | undefined | Array<string>;
    set keyExpr(value: string | undefined | Array<string>);
    /**
     * [descr:GridBaseOptions.loadPanel]
    
     */
    get loadPanel(): {
        enabled?: Mode | boolean;
        height?: number;
        indicatorSrc?: string;
        shading?: boolean;
        shadingColor?: string;
        showIndicator?: boolean;
        showPane?: boolean;
        text?: string;
        width?: number;
    };
    set loadPanel(value: {
        enabled?: Mode | boolean;
        height?: number;
        indicatorSrc?: string;
        shading?: boolean;
        shadingColor?: string;
        showIndicator?: boolean;
        showPane?: boolean;
        text?: string;
        width?: number;
    });
    /**
     * [descr:dxDataGridOptions.masterDetail]
    
     */
    get masterDetail(): {
        autoExpandAll?: boolean;
        enabled?: boolean;
        template?: any;
    };
    set masterDetail(value: {
        autoExpandAll?: boolean;
        enabled?: boolean;
        template?: any;
    });
    /**
     * [descr:GridBaseOptions.noDataText]
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * [descr:GridBaseOptions.pager]
    
     */
    get pager(): {
        allowedPageSizes?: Mode | Array<PagerPageSize | number>;
        displayMode?: PagerDisplayMode;
        infoText?: string;
        label?: string;
        showInfo?: boolean;
        showNavigationButtons?: boolean;
        showPageSizeSelector?: boolean;
        visible?: Mode | boolean;
    };
    set pager(value: {
        allowedPageSizes?: Mode | Array<PagerPageSize | number>;
        displayMode?: PagerDisplayMode;
        infoText?: string;
        label?: string;
        showInfo?: boolean;
        showNavigationButtons?: boolean;
        showPageSizeSelector?: boolean;
        visible?: Mode | boolean;
    });
    /**
     * [descr:GridBaseOptions.paging]
    
     */
    get paging(): {
        enabled?: boolean;
        pageIndex?: number;
        pageSize?: number;
    };
    set paging(value: {
        enabled?: boolean;
        pageIndex?: number;
        pageSize?: number;
    });
    /**
     * [descr:dxDataGridOptions.remoteOperations]
    
     */
    get remoteOperations(): Mode | boolean | {
        filtering?: boolean;
        grouping?: boolean;
        groupPaging?: boolean;
        paging?: boolean;
        sorting?: boolean;
        summary?: boolean;
    };
    set remoteOperations(value: Mode | boolean | {
        filtering?: boolean;
        grouping?: boolean;
        groupPaging?: boolean;
        paging?: boolean;
        sorting?: boolean;
        summary?: boolean;
    });
    /**
     * [descr:GridBaseOptions.renderAsync]
    
     */
    get renderAsync(): boolean;
    set renderAsync(value: boolean);
    /**
     * [descr:GridBaseOptions.repaintChangesOnly]
    
     */
    get repaintChangesOnly(): boolean;
    set repaintChangesOnly(value: boolean);
    /**
     * [descr:GridBaseOptions.rowAlternationEnabled]
    
     */
    get rowAlternationEnabled(): boolean;
    set rowAlternationEnabled(value: boolean);
    /**
     * [descr:GridBaseOptions.rowDragging]
    
     */
    get rowDragging(): {
        allowDropInsideItem?: boolean;
        allowReordering?: boolean;
        autoScroll?: boolean;
        boundary?: string | UserDefinedElement | undefined;
        container?: string | UserDefinedElement | undefined;
        cursorOffset?: string | {
            x?: number;
            y?: number;
        };
        data?: any | undefined;
        dragDirection?: DragDirection;
        dragTemplate?: any | undefined;
        dropFeedbackMode?: DragHighlight;
        filter?: string;
        group?: string | undefined;
        handle?: string;
        onAdd?: Function;
        onDragChange?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        onReorder?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
        showDragIcons?: boolean;
    };
    set rowDragging(value: {
        allowDropInsideItem?: boolean;
        allowReordering?: boolean;
        autoScroll?: boolean;
        boundary?: string | UserDefinedElement | undefined;
        container?: string | UserDefinedElement | undefined;
        cursorOffset?: string | {
            x?: number;
            y?: number;
        };
        data?: any | undefined;
        dragDirection?: DragDirection;
        dragTemplate?: any | undefined;
        dropFeedbackMode?: DragHighlight;
        filter?: string;
        group?: string | undefined;
        handle?: string;
        onAdd?: Function;
        onDragChange?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        onReorder?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
        showDragIcons?: boolean;
    });
    /**
     * [descr:dxDataGridOptions.rowTemplate]
    
     * @deprecated [depNote:dxDataGridOptions.rowTemplate]
    
     */
    get rowTemplate(): any;
    set rowTemplate(value: any);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxDataGridOptions.scrolling]
    
     */
    get scrolling(): {
        columnRenderingMode?: DataRenderMode;
        mode?: DataGridScrollMode;
        preloadEnabled?: boolean;
        renderAsync?: boolean | undefined;
        rowRenderingMode?: DataRenderMode;
        scrollByContent?: boolean;
        scrollByThumb?: boolean;
        showScrollbar?: ScrollbarMode;
        useNative?: Mode | boolean;
    };
    set scrolling(value: {
        columnRenderingMode?: DataRenderMode;
        mode?: DataGridScrollMode;
        preloadEnabled?: boolean;
        renderAsync?: boolean | undefined;
        rowRenderingMode?: DataRenderMode;
        scrollByContent?: boolean;
        scrollByThumb?: boolean;
        showScrollbar?: ScrollbarMode;
        useNative?: Mode | boolean;
    });
    /**
     * [descr:GridBaseOptions.searchPanel]
    
     */
    get searchPanel(): {
        highlightCaseSensitive?: boolean;
        highlightSearchText?: boolean;
        placeholder?: string;
        searchVisibleColumnsOnly?: boolean;
        text?: string;
        visible?: boolean;
        width?: number | string;
    };
    set searchPanel(value: {
        highlightCaseSensitive?: boolean;
        highlightSearchText?: boolean;
        placeholder?: string;
        searchVisibleColumnsOnly?: boolean;
        text?: string;
        visible?: boolean;
        width?: number | string;
    });
    /**
     * [descr:GridBaseOptions.selectedRowKeys]
    
     */
    get selectedRowKeys(): Array<any>;
    set selectedRowKeys(value: Array<any>);
    /**
     * [descr:dxDataGridOptions.selection]
    
     */
    get selection(): {
        allowSelectAll?: boolean;
        deferred?: boolean;
        mode?: SingleMultipleOrNone;
        selectAllMode?: SelectAllMode;
        showCheckBoxesMode?: SelectionColumnDisplayMode;
    };
    set selection(value: {
        allowSelectAll?: boolean;
        deferred?: boolean;
        mode?: SingleMultipleOrNone;
        selectAllMode?: SelectAllMode;
        showCheckBoxesMode?: SelectionColumnDisplayMode;
    });
    /**
     * [descr:dxDataGridOptions.selectionFilter]
    
     */
    get selectionFilter(): any;
    set selectionFilter(value: any);
    /**
     * [descr:GridBaseOptions.showBorders]
    
     */
    get showBorders(): boolean;
    set showBorders(value: boolean);
    /**
     * [descr:GridBaseOptions.showColumnHeaders]
    
     */
    get showColumnHeaders(): boolean;
    set showColumnHeaders(value: boolean);
    /**
     * [descr:GridBaseOptions.showColumnLines]
    
     */
    get showColumnLines(): boolean;
    set showColumnLines(value: boolean);
    /**
     * [descr:GridBaseOptions.showRowLines]
    
     */
    get showRowLines(): boolean;
    set showRowLines(value: boolean);
    /**
     * [descr:dxDataGridOptions.sortByGroupSummaryInfo]
    
     */
    get sortByGroupSummaryInfo(): Array<any | {
        groupColumn?: string | undefined;
        sortOrder?: SortOrder | string | undefined;
        summaryItem?: number | string | undefined;
    }>;
    set sortByGroupSummaryInfo(value: Array<any | {
        groupColumn?: string | undefined;
        sortOrder?: SortOrder | string | undefined;
        summaryItem?: number | string | undefined;
    }>);
    /**
     * [descr:GridBaseOptions.sorting]
    
     */
    get sorting(): {
        ascendingText?: string;
        clearText?: string;
        descendingText?: string;
        mode?: SingleMultipleOrNone;
        showSortIndexes?: boolean;
    };
    set sorting(value: {
        ascendingText?: string;
        clearText?: string;
        descendingText?: string;
        mode?: SingleMultipleOrNone;
        showSortIndexes?: boolean;
    });
    /**
     * [descr:GridBaseOptions.stateStoring]
    
     */
    get stateStoring(): {
        customLoad?: Function;
        customSave?: Function;
        enabled?: boolean;
        savingTimeout?: number;
        storageKey?: string;
        type?: StateStoreType;
    };
    set stateStoring(value: {
        customLoad?: Function;
        customSave?: Function;
        enabled?: boolean;
        savingTimeout?: number;
        storageKey?: string;
        type?: StateStoreType;
    });
    /**
     * [descr:dxDataGridOptions.summary]
    
     */
    get summary(): {
        calculateCustomSummary?: Function;
        groupItems?: Array<any | {
            alignByColumn?: boolean;
            column?: string | undefined;
            customizeText?: Function;
            displayFormat?: string | undefined;
            name?: string | undefined;
            showInColumn?: string | undefined;
            showInGroupFooter?: boolean;
            skipEmptyValues?: boolean;
            summaryType?: SummaryType | string | undefined;
            valueFormat?: Format | string | undefined;
        }>;
        recalculateWhileEditing?: boolean;
        skipEmptyValues?: boolean;
        texts?: {
            avg?: string;
            avgOtherColumn?: string;
            count?: string;
            max?: string;
            maxOtherColumn?: string;
            min?: string;
            minOtherColumn?: string;
            sum?: string;
            sumOtherColumn?: string;
        };
        totalItems?: Array<any | {
            alignment?: HorizontalAlignment | undefined;
            column?: string | undefined;
            cssClass?: string | undefined;
            customizeText?: Function;
            displayFormat?: string | undefined;
            name?: string | undefined;
            showInColumn?: string | undefined;
            skipEmptyValues?: boolean;
            summaryType?: SummaryType | string | undefined;
            valueFormat?: Format | string | undefined;
        }>;
    };
    set summary(value: {
        calculateCustomSummary?: Function;
        groupItems?: Array<any | {
            alignByColumn?: boolean;
            column?: string | undefined;
            customizeText?: Function;
            displayFormat?: string | undefined;
            name?: string | undefined;
            showInColumn?: string | undefined;
            showInGroupFooter?: boolean;
            skipEmptyValues?: boolean;
            summaryType?: SummaryType | string | undefined;
            valueFormat?: Format | string | undefined;
        }>;
        recalculateWhileEditing?: boolean;
        skipEmptyValues?: boolean;
        texts?: {
            avg?: string;
            avgOtherColumn?: string;
            count?: string;
            max?: string;
            maxOtherColumn?: string;
            min?: string;
            minOtherColumn?: string;
            sum?: string;
            sumOtherColumn?: string;
        };
        totalItems?: Array<any | {
            alignment?: HorizontalAlignment | undefined;
            column?: string | undefined;
            cssClass?: string | undefined;
            customizeText?: Function;
            displayFormat?: string | undefined;
            name?: string | undefined;
            showInColumn?: string | undefined;
            skipEmptyValues?: boolean;
            summaryType?: SummaryType | string | undefined;
            valueFormat?: Format | string | undefined;
        }>;
    });
    /**
     * [descr:GridBaseOptions.syncLookupFilterValues]
    
     */
    get syncLookupFilterValues(): boolean;
    set syncLookupFilterValues(value: boolean);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxDataGridOptions.toolbar]
    
     */
    get toolbar(): DevExpress.ui.dxDataGrid.dxDataGridToolbar | undefined;
    set toolbar(value: DevExpress.ui.dxDataGrid.dxDataGridToolbar | undefined);
    /**
     * [descr:GridBaseOptions.twoWayBindingEnabled]
    
     */
    get twoWayBindingEnabled(): boolean;
    set twoWayBindingEnabled(value: boolean);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
     * [descr:GridBaseOptions.wordWrapEnabled]
    
     */
    get wordWrapEnabled(): boolean;
    set wordWrapEnabled(value: boolean);
    /**
    
     * [descr:dxDataGridOptions.onAdaptiveDetailRowPreparing]
    
    
     */
    onAdaptiveDetailRowPreparing: EventEmitter<AdaptiveDetailRowPreparingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onCellClick]
    
    
     */
    onCellClick: EventEmitter<CellClickEvent>;
    /**
    
     * [descr:dxDataGridOptions.onCellDblClick]
    
    
     */
    onCellDblClick: EventEmitter<CellDblClickEvent>;
    /**
    
     * [descr:dxDataGridOptions.onCellHoverChanged]
    
    
     */
    onCellHoverChanged: EventEmitter<CellHoverChangedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onCellPrepared]
    
    
     */
    onCellPrepared: EventEmitter<CellPreparedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxDataGridOptions.onContextMenuPreparing]
    
    
     */
    onContextMenuPreparing: EventEmitter<ContextMenuPreparingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onDataErrorOccurred]
    
    
     */
    onDataErrorOccurred: EventEmitter<DataErrorOccurredEvent>;
    /**
    
     * [descr:dxDataGridOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onEditCanceled]
    
    
     */
    onEditCanceled: EventEmitter<EditCanceledEvent>;
    /**
    
     * [descr:dxDataGridOptions.onEditCanceling]
    
    
     */
    onEditCanceling: EventEmitter<EditCancelingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onEditingStart]
    
    
     */
    onEditingStart: EventEmitter<EditingStartEvent>;
    /**
    
     * [descr:dxDataGridOptions.onEditorPrepared]
    
    
     */
    onEditorPrepared: EventEmitter<EditorPreparedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onEditorPreparing]
    
    
     */
    onEditorPreparing: EventEmitter<EditorPreparingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onExporting]
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onFocusedCellChanged]
    
    
     */
    onFocusedCellChanged: EventEmitter<FocusedCellChangedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onFocusedCellChanging]
    
    
     */
    onFocusedCellChanging: EventEmitter<FocusedCellChangingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onFocusedRowChanged]
    
    
     */
    onFocusedRowChanged: EventEmitter<FocusedRowChangedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onFocusedRowChanging]
    
    
     */
    onFocusedRowChanging: EventEmitter<FocusedRowChangingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onInitNewRow]
    
    
     */
    onInitNewRow: EventEmitter<InitNewRowEvent>;
    /**
    
     * [descr:dxDataGridOptions.onKeyDown]
    
    
     */
    onKeyDown: EventEmitter<KeyDownEvent>;
    /**
    
     * [descr:dxDataGridOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowClick]
    
    
     */
    onRowClick: EventEmitter<RowClickEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowCollapsed]
    
    
     */
    onRowCollapsed: EventEmitter<RowCollapsedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowCollapsing]
    
    
     */
    onRowCollapsing: EventEmitter<RowCollapsingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowDblClick]
    
    
     */
    onRowDblClick: EventEmitter<RowDblClickEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowExpanded]
    
    
     */
    onRowExpanded: EventEmitter<RowExpandedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowExpanding]
    
    
     */
    onRowExpanding: EventEmitter<RowExpandingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowInserted]
    
    
     */
    onRowInserted: EventEmitter<RowInsertedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowInserting]
    
    
     */
    onRowInserting: EventEmitter<RowInsertingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowPrepared]
    
    
     */
    onRowPrepared: EventEmitter<RowPreparedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowRemoved]
    
    
     */
    onRowRemoved: EventEmitter<RowRemovedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowRemoving]
    
    
     */
    onRowRemoving: EventEmitter<RowRemovingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowUpdated]
    
    
     */
    onRowUpdated: EventEmitter<RowUpdatedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowUpdating]
    
    
     */
    onRowUpdating: EventEmitter<RowUpdatingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onRowValidating]
    
    
     */
    onRowValidating: EventEmitter<RowValidatingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onSaved]
    
    
     */
    onSaved: EventEmitter<SavedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onSaving]
    
    
     */
    onSaving: EventEmitter<SavingEvent>;
    /**
    
     * [descr:dxDataGridOptions.onSelectionChanged]
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * [descr:dxDataGridOptions.onToolbarPreparing]
    
    
     */
    onToolbarPreparing: EventEmitter<ToolbarPreparingEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowColumnReorderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowColumnResizingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoNavigateToFocusedRowChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cacheEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cellHintEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnAutoWidthChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnChooserChange: EventEmitter<{
        allowSearch?: boolean;
        container?: string | UserDefinedElement | undefined;
        emptyPanelText?: string;
        enabled?: boolean;
        height?: number;
        mode?: ColumnChooserMode;
        position?: PositionConfig | undefined;
        search?: ColumnChooserSearchConfig;
        searchTimeout?: number;
        selection?: ColumnChooserSelectionConfig;
        sortOrder?: SortOrder | undefined;
        title?: string;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnFixingChange: EventEmitter<{
        enabled?: boolean;
        texts?: {
            fix?: string;
            leftPosition?: string;
            rightPosition?: string;
            unfix?: string;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnHidingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnMinWidthChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnResizingModeChange: EventEmitter<ColumnResizeMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnsChange: EventEmitter<Array<DevExpress.ui.dxDataGridColumn | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnWidthChange: EventEmitter<Mode | number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeColumnsChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataRowTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateSerializationFormatChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowAdding?: boolean;
        allowDeleting?: boolean | Function;
        allowUpdating?: boolean | Function;
        changes?: Array<DevExpress.common.grids.DataChange>;
        confirmDelete?: boolean;
        editColumnName?: string;
        editRowKey?: any;
        form?: dxFormOptions;
        mode?: GridsEditMode;
        newRowPosition?: NewRowPosition;
        popup?: dxPopupOptions;
        refreshMode?: GridsEditRefreshMode;
        selectTextOnEditStart?: boolean;
        startEditAction?: StartEditAction;
        texts?: {
            addRow?: string;
            cancelAllChanges?: string;
            cancelRowChanges?: string;
            confirmDeleteMessage?: string;
            confirmDeleteTitle?: string;
            deleteRow?: string;
            editRow?: string;
            saveAllChanges?: string;
            saveRowChanges?: string;
            undeleteRow?: string;
            validationCancelChanges?: string;
        };
        useIcons?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    errorRowEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        allowExportSelectedData?: boolean;
        enabled?: boolean;
        formats?: Array<DataGridExportFormat | string>;
        texts?: {
            exportAll?: string;
            exportSelectedRows?: string;
            exportTo?: string;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterBuilderChange: EventEmitter<dxFilterBuilderOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterBuilderPopupChange: EventEmitter<dxPopupOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterPanelChange: EventEmitter<{
        customizeText?: Function;
        filterEnabled?: boolean;
        texts?: {
            clearFilter?: string;
            createFilter?: string;
            filterEnabledHint?: string;
        };
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterRowChange: EventEmitter<{
        applyFilter?: ApplyFilterMode;
        applyFilterText?: string;
        betweenEndText?: string;
        betweenStartText?: string;
        operationDescriptions?: {
            between?: string;
            contains?: string;
            endsWith?: string;
            equal?: string;
            greaterThan?: string;
            greaterThanOrEqual?: string;
            lessThan?: string;
            lessThanOrEqual?: string;
            notContains?: string;
            notEqual?: string;
            startsWith?: string;
        };
        resetOperationText?: string;
        showAllText?: string;
        showOperationChooser?: boolean;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterSyncEnabledChange: EventEmitter<Mode | boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedColumnIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedRowEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedRowIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedRowKeyChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupingChange: EventEmitter<{
        allowCollapsing?: boolean;
        autoExpandAll?: boolean;
        contextMenuEnabled?: boolean;
        expandMode?: GroupExpandMode;
        texts?: {
            groupByThisColumn?: string;
            groupContinuedMessage?: string;
            groupContinuesMessage?: string;
            ungroup?: string;
            ungroupAll?: string;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupPanelChange: EventEmitter<{
        allowColumnDragging?: boolean;
        emptyPanelText?: string;
        visible?: Mode | boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    headerFilterChange: EventEmitter<{
        allowSearch?: boolean;
        allowSelectAll?: boolean;
        height?: number;
        search?: HeaderFilterSearchConfig;
        searchTimeout?: number;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    highlightChangesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyboardNavigationChange: EventEmitter<{
        editOnKeyPress?: boolean;
        enabled?: boolean;
        enterKeyAction?: EnterKeyAction;
        enterKeyDirection?: EnterKeyDirection;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<string | undefined | Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadPanelChange: EventEmitter<{
        enabled?: Mode | boolean;
        height?: number;
        indicatorSrc?: string;
        shading?: boolean;
        shadingColor?: string;
        showIndicator?: boolean;
        showPane?: boolean;
        text?: string;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    masterDetailChange: EventEmitter<{
        autoExpandAll?: boolean;
        enabled?: boolean;
        template?: any;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pagerChange: EventEmitter<{
        allowedPageSizes?: Mode | Array<PagerPageSize | number>;
        displayMode?: PagerDisplayMode;
        infoText?: string;
        label?: string;
        showInfo?: boolean;
        showNavigationButtons?: boolean;
        showPageSizeSelector?: boolean;
        visible?: Mode | boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pagingChange: EventEmitter<{
        enabled?: boolean;
        pageIndex?: number;
        pageSize?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    remoteOperationsChange: EventEmitter<Mode | boolean | {
        filtering?: boolean;
        grouping?: boolean;
        groupPaging?: boolean;
        paging?: boolean;
        sorting?: boolean;
        summary?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    renderAsyncChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rowAlternationEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rowDraggingChange: EventEmitter<{
        allowDropInsideItem?: boolean;
        allowReordering?: boolean;
        autoScroll?: boolean;
        boundary?: string | UserDefinedElement | undefined;
        container?: string | UserDefinedElement | undefined;
        cursorOffset?: string | {
            x?: number;
            y?: number;
        };
        data?: any | undefined;
        dragDirection?: DragDirection;
        dragTemplate?: any | undefined;
        dropFeedbackMode?: DragHighlight;
        filter?: string;
        group?: string | undefined;
        handle?: string;
        onAdd?: Function;
        onDragChange?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        onReorder?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
        showDragIcons?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rowTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingChange: EventEmitter<{
        columnRenderingMode?: DataRenderMode;
        mode?: DataGridScrollMode;
        preloadEnabled?: boolean;
        renderAsync?: boolean | undefined;
        rowRenderingMode?: DataRenderMode;
        scrollByContent?: boolean;
        scrollByThumb?: boolean;
        showScrollbar?: ScrollbarMode;
        useNative?: Mode | boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchPanelChange: EventEmitter<{
        highlightCaseSensitive?: boolean;
        highlightSearchText?: boolean;
        placeholder?: string;
        searchVisibleColumnsOnly?: boolean;
        text?: string;
        visible?: boolean;
        width?: number | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRowKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionChange: EventEmitter<{
        allowSelectAll?: boolean;
        deferred?: boolean;
        mode?: SingleMultipleOrNone;
        selectAllMode?: SelectAllMode;
        showCheckBoxesMode?: SelectionColumnDisplayMode;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionFilterChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showBordersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showColumnHeadersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showColumnLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRowLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortByGroupSummaryInfoChange: EventEmitter<Array<any | {
        groupColumn?: string | undefined;
        sortOrder?: SortOrder | string | undefined;
        summaryItem?: number | string | undefined;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortingChange: EventEmitter<{
        ascendingText?: string;
        clearText?: string;
        descendingText?: string;
        mode?: SingleMultipleOrNone;
        showSortIndexes?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stateStoringChange: EventEmitter<{
        customLoad?: Function;
        customSave?: Function;
        enabled?: boolean;
        savingTimeout?: number;
        storageKey?: string;
        type?: StateStoreType;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    summaryChange: EventEmitter<{
        calculateCustomSummary?: Function;
        groupItems?: Array<any | {
            alignByColumn?: boolean;
            column?: string | undefined;
            customizeText?: Function;
            displayFormat?: string | undefined;
            name?: string | undefined;
            showInColumn?: string | undefined;
            showInGroupFooter?: boolean;
            skipEmptyValues?: boolean;
            summaryType?: SummaryType | string | undefined;
            valueFormat?: Format | string | undefined;
        }>;
        recalculateWhileEditing?: boolean;
        skipEmptyValues?: boolean;
        texts?: {
            avg?: string;
            avgOtherColumn?: string;
            count?: string;
            max?: string;
            maxOtherColumn?: string;
            min?: string;
            minOtherColumn?: string;
            sum?: string;
            sumOtherColumn?: string;
        };
        totalItems?: Array<any | {
            alignment?: HorizontalAlignment | undefined;
            column?: string | undefined;
            cssClass?: string | undefined;
            customizeText?: Function;
            displayFormat?: string | undefined;
            name?: string | undefined;
            showInColumn?: string | undefined;
            skipEmptyValues?: boolean;
            summaryType?: SummaryType | string | undefined;
            valueFormat?: Format | string | undefined;
        }>;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    syncLookupFilterValuesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<DevExpress.ui.dxDataGrid.dxDataGridToolbar | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    twoWayBindingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wordWrapEnabledChange: EventEmitter<boolean>;
    get columnsChildren(): QueryList<DxiColumnComponent>;
    set columnsChildren(value: QueryList<DxiColumnComponent>);
    get sortByGroupSummaryInfoChildren(): QueryList<DxiSortByGroupSummaryInfoComponent>;
    set sortByGroupSummaryInfoChildren(value: QueryList<DxiSortByGroupSummaryInfoComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDataGrid<any, any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDataGridComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxDataGridComponent<any, any>, "dx-data-grid", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowColumnReordering": "allowColumnReordering"; "allowColumnResizing": "allowColumnResizing"; "autoNavigateToFocusedRow": "autoNavigateToFocusedRow"; "cacheEnabled": "cacheEnabled"; "cellHintEnabled": "cellHintEnabled"; "columnAutoWidth": "columnAutoWidth"; "columnChooser": "columnChooser"; "columnFixing": "columnFixing"; "columnHidingEnabled": "columnHidingEnabled"; "columnMinWidth": "columnMinWidth"; "columnResizingMode": "columnResizingMode"; "columns": "columns"; "columnWidth": "columnWidth"; "customizeColumns": "customizeColumns"; "dataRowTemplate": "dataRowTemplate"; "dataSource": "dataSource"; "dateSerializationFormat": "dateSerializationFormat"; "disabled": "disabled"; "editing": "editing"; "elementAttr": "elementAttr"; "errorRowEnabled": "errorRowEnabled"; "export": "export"; "filterBuilder": "filterBuilder"; "filterBuilderPopup": "filterBuilderPopup"; "filterPanel": "filterPanel"; "filterRow": "filterRow"; "filterSyncEnabled": "filterSyncEnabled"; "filterValue": "filterValue"; "focusedColumnIndex": "focusedColumnIndex"; "focusedRowEnabled": "focusedRowEnabled"; "focusedRowIndex": "focusedRowIndex"; "focusedRowKey": "focusedRowKey"; "grouping": "grouping"; "groupPanel": "groupPanel"; "headerFilter": "headerFilter"; "height": "height"; "highlightChanges": "highlightChanges"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "keyboardNavigation": "keyboardNavigation"; "keyExpr": "keyExpr"; "loadPanel": "loadPanel"; "masterDetail": "masterDetail"; "noDataText": "noDataText"; "pager": "pager"; "paging": "paging"; "remoteOperations": "remoteOperations"; "renderAsync": "renderAsync"; "repaintChangesOnly": "repaintChangesOnly"; "rowAlternationEnabled": "rowAlternationEnabled"; "rowDragging": "rowDragging"; "rowTemplate": "rowTemplate"; "rtlEnabled": "rtlEnabled"; "scrolling": "scrolling"; "searchPanel": "searchPanel"; "selectedRowKeys": "selectedRowKeys"; "selection": "selection"; "selectionFilter": "selectionFilter"; "showBorders": "showBorders"; "showColumnHeaders": "showColumnHeaders"; "showColumnLines": "showColumnLines"; "showRowLines": "showRowLines"; "sortByGroupSummaryInfo": "sortByGroupSummaryInfo"; "sorting": "sorting"; "stateStoring": "stateStoring"; "summary": "summary"; "syncLookupFilterValues": "syncLookupFilterValues"; "tabIndex": "tabIndex"; "toolbar": "toolbar"; "twoWayBindingEnabled": "twoWayBindingEnabled"; "visible": "visible"; "width": "width"; "wordWrapEnabled": "wordWrapEnabled"; }, { "onAdaptiveDetailRowPreparing": "onAdaptiveDetailRowPreparing"; "onCellClick": "onCellClick"; "onCellDblClick": "onCellDblClick"; "onCellHoverChanged": "onCellHoverChanged"; "onCellPrepared": "onCellPrepared"; "onContentReady": "onContentReady"; "onContextMenuPreparing": "onContextMenuPreparing"; "onDataErrorOccurred": "onDataErrorOccurred"; "onDisposing": "onDisposing"; "onEditCanceled": "onEditCanceled"; "onEditCanceling": "onEditCanceling"; "onEditingStart": "onEditingStart"; "onEditorPrepared": "onEditorPrepared"; "onEditorPreparing": "onEditorPreparing"; "onExporting": "onExporting"; "onFocusedCellChanged": "onFocusedCellChanged"; "onFocusedCellChanging": "onFocusedCellChanging"; "onFocusedRowChanged": "onFocusedRowChanged"; "onFocusedRowChanging": "onFocusedRowChanging"; "onInitialized": "onInitialized"; "onInitNewRow": "onInitNewRow"; "onKeyDown": "onKeyDown"; "onOptionChanged": "onOptionChanged"; "onRowClick": "onRowClick"; "onRowCollapsed": "onRowCollapsed"; "onRowCollapsing": "onRowCollapsing"; "onRowDblClick": "onRowDblClick"; "onRowExpanded": "onRowExpanded"; "onRowExpanding": "onRowExpanding"; "onRowInserted": "onRowInserted"; "onRowInserting": "onRowInserting"; "onRowPrepared": "onRowPrepared"; "onRowRemoved": "onRowRemoved"; "onRowRemoving": "onRowRemoving"; "onRowUpdated": "onRowUpdated"; "onRowUpdating": "onRowUpdating"; "onRowValidating": "onRowValidating"; "onSaved": "onSaved"; "onSaving": "onSaving"; "onSelectionChanged": "onSelectionChanged"; "onToolbarPreparing": "onToolbarPreparing"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowColumnReorderingChange": "allowColumnReorderingChange"; "allowColumnResizingChange": "allowColumnResizingChange"; "autoNavigateToFocusedRowChange": "autoNavigateToFocusedRowChange"; "cacheEnabledChange": "cacheEnabledChange"; "cellHintEnabledChange": "cellHintEnabledChange"; "columnAutoWidthChange": "columnAutoWidthChange"; "columnChooserChange": "columnChooserChange"; "columnFixingChange": "columnFixingChange"; "columnHidingEnabledChange": "columnHidingEnabledChange"; "columnMinWidthChange": "columnMinWidthChange"; "columnResizingModeChange": "columnResizingModeChange"; "columnsChange": "columnsChange"; "columnWidthChange": "columnWidthChange"; "customizeColumnsChange": "customizeColumnsChange"; "dataRowTemplateChange": "dataRowTemplateChange"; "dataSourceChange": "dataSourceChange"; "dateSerializationFormatChange": "dateSerializationFormatChange"; "disabledChange": "disabledChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "errorRowEnabledChange": "errorRowEnabledChange"; "exportChange": "exportChange"; "filterBuilderChange": "filterBuilderChange"; "filterBuilderPopupChange": "filterBuilderPopupChange"; "filterPanelChange": "filterPanelChange"; "filterRowChange": "filterRowChange"; "filterSyncEnabledChange": "filterSyncEnabledChange"; "filterValueChange": "filterValueChange"; "focusedColumnIndexChange": "focusedColumnIndexChange"; "focusedRowEnabledChange": "focusedRowEnabledChange"; "focusedRowIndexChange": "focusedRowIndexChange"; "focusedRowKeyChange": "focusedRowKeyChange"; "groupingChange": "groupingChange"; "groupPanelChange": "groupPanelChange"; "headerFilterChange": "headerFilterChange"; "heightChange": "heightChange"; "highlightChangesChange": "highlightChangesChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "keyboardNavigationChange": "keyboardNavigationChange"; "keyExprChange": "keyExprChange"; "loadPanelChange": "loadPanelChange"; "masterDetailChange": "masterDetailChange"; "noDataTextChange": "noDataTextChange"; "pagerChange": "pagerChange"; "pagingChange": "pagingChange"; "remoteOperationsChange": "remoteOperationsChange"; "renderAsyncChange": "renderAsyncChange"; "repaintChangesOnlyChange": "repaintChangesOnlyChange"; "rowAlternationEnabledChange": "rowAlternationEnabledChange"; "rowDraggingChange": "rowDraggingChange"; "rowTemplateChange": "rowTemplateChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollingChange": "scrollingChange"; "searchPanelChange": "searchPanelChange"; "selectedRowKeysChange": "selectedRowKeysChange"; "selectionChange": "selectionChange"; "selectionFilterChange": "selectionFilterChange"; "showBordersChange": "showBordersChange"; "showColumnHeadersChange": "showColumnHeadersChange"; "showColumnLinesChange": "showColumnLinesChange"; "showRowLinesChange": "showRowLinesChange"; "sortByGroupSummaryInfoChange": "sortByGroupSummaryInfoChange"; "sortingChange": "sortingChange"; "stateStoringChange": "stateStoringChange"; "summaryChange": "summaryChange"; "syncLookupFilterValuesChange": "syncLookupFilterValuesChange"; "tabIndexChange": "tabIndexChange"; "toolbarChange": "toolbarChange"; "twoWayBindingEnabledChange": "twoWayBindingEnabledChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wordWrapEnabledChange": "wordWrapEnabledChange"; }, ["columnsChildren", "sortByGroupSummaryInfoChildren"], never>;
}
export declare class DxDataGridModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDataGridModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxDataGridModule, [typeof DxDataGridComponent], [typeof i1.DxoColumnChooserModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoSearchModule, typeof i1.DxoSelectionModule, typeof i1.DxoColumnFixingModule, typeof i1.DxoTextsModule, typeof i1.DxiColumnModule, typeof i1.DxiButtonModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoLookupModule, typeof i1.DxoFormatModule, typeof i1.DxoFormItemModule, typeof i1.DxoLabelModule, typeof i1.DxiValidationRuleModule, typeof i1.DxoEditingModule, typeof i1.DxiChangeModule, typeof i1.DxoFormModule, typeof i1.DxoColCountByScreenModule, typeof i1.DxiItemModule, typeof i1.DxoTabPanelOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoButtonOptionsModule, typeof i1.DxoPopupModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i1.DxoExportModule, typeof i1.DxoFilterBuilderModule, typeof i1.DxiCustomOperationModule, typeof i1.DxiFieldModule, typeof i1.DxoFilterOperationDescriptionsModule, typeof i1.DxoGroupOperationDescriptionsModule, typeof i1.DxoFilterBuilderPopupModule, typeof i1.DxoFilterPanelModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoGroupingModule, typeof i1.DxoGroupPanelModule, typeof i1.DxoKeyboardNavigationModule, typeof i1.DxoLoadPanelModule, typeof i1.DxoMasterDetailModule, typeof i1.DxoPagerModule, typeof i1.DxoPagingModule, typeof i1.DxoRemoteOperationsModule, typeof i1.DxoRowDraggingModule, typeof i1.DxoCursorOffsetModule, typeof i1.DxoScrollingModule, typeof i1.DxoSearchPanelModule, typeof i1.DxiSortByGroupSummaryInfoModule, typeof i1.DxoSortingModule, typeof i1.DxoStateStoringModule, typeof i1.DxoSummaryModule, typeof i1.DxiGroupItemModule, typeof i1.DxoValueFormatModule, typeof i1.DxiTotalItemModule, typeof i1.DxoToolbarModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxDataGridComponent, typeof i1.DxoColumnChooserModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoSearchModule, typeof i1.DxoSelectionModule, typeof i1.DxoColumnFixingModule, typeof i1.DxoTextsModule, typeof i1.DxiColumnModule, typeof i1.DxiButtonModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoLookupModule, typeof i1.DxoFormatModule, typeof i1.DxoFormItemModule, typeof i1.DxoLabelModule, typeof i1.DxiValidationRuleModule, typeof i1.DxoEditingModule, typeof i1.DxiChangeModule, typeof i1.DxoFormModule, typeof i1.DxoColCountByScreenModule, typeof i1.DxiItemModule, typeof i1.DxoTabPanelOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoButtonOptionsModule, typeof i1.DxoPopupModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i1.DxoExportModule, typeof i1.DxoFilterBuilderModule, typeof i1.DxiCustomOperationModule, typeof i1.DxiFieldModule, typeof i1.DxoFilterOperationDescriptionsModule, typeof i1.DxoGroupOperationDescriptionsModule, typeof i1.DxoFilterBuilderPopupModule, typeof i1.DxoFilterPanelModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoGroupingModule, typeof i1.DxoGroupPanelModule, typeof i1.DxoKeyboardNavigationModule, typeof i1.DxoLoadPanelModule, typeof i1.DxoMasterDetailModule, typeof i1.DxoPagerModule, typeof i1.DxoPagingModule, typeof i1.DxoRemoteOperationsModule, typeof i1.DxoRowDraggingModule, typeof i1.DxoCursorOffsetModule, typeof i1.DxoScrollingModule, typeof i1.DxoSearchPanelModule, typeof i1.DxiSortByGroupSummaryInfoModule, typeof i1.DxoSortingModule, typeof i1.DxoStateStoringModule, typeof i1.DxoSummaryModule, typeof i1.DxiGroupItemModule, typeof i1.DxoValueFormatModule, typeof i1.DxiTotalItemModule, typeof i1.DxoToolbarModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxDataGridModule>;
}
export { DxDataGridTypes };
