/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { UserDefinedElement } from 'devextreme/core/element';
import { DisposingEvent, InitializedEvent, OptionChangedEvent, ResizeEndEvent, ResizeEvent, ResizeHandle, ResizeStartEvent } from 'devextreme/ui/resizable';
import DxResizable from 'devextreme/ui/resizable';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
import type * as DxResizableTypes from "devextreme/ui/resizable_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
/**
 * [descr:dxResizable]

 */
export declare class DxResizableComponent extends DxComponent implements OnDestroy {
    instance: DxResizable;
    /**
     * [descr:dxResizableOptions.area]
    
     */
    get area(): string | UserDefinedElement | undefined;
    set area(value: string | UserDefinedElement | undefined);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxResizableOptions.handles]
    
     */
    get handles(): ResizeHandle | string;
    set handles(value: ResizeHandle | string);
    /**
     * [descr:dxResizableOptions.height]
    
     */
    get height(): number | Function | string;
    set height(value: number | Function | string);
    /**
     * [descr:dxResizableOptions.keepAspectRatio]
    
     */
    get keepAspectRatio(): boolean;
    set keepAspectRatio(value: boolean);
    /**
     * [descr:dxResizableOptions.maxHeight]
    
     */
    get maxHeight(): number;
    set maxHeight(value: number);
    /**
     * [descr:dxResizableOptions.maxWidth]
    
     */
    get maxWidth(): number;
    set maxWidth(value: number);
    /**
     * [descr:dxResizableOptions.minHeight]
    
     */
    get minHeight(): number;
    set minHeight(value: number);
    /**
     * [descr:dxResizableOptions.minWidth]
    
     */
    get minWidth(): number;
    set minWidth(value: number);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxResizableOptions.width]
    
     */
    get width(): number | Function | string;
    set width(value: number | Function | string);
    /**
    
     * [descr:dxResizableOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxResizableOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxResizableOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxResizableOptions.onResize]
    
    
     */
    onResize: EventEmitter<ResizeEvent>;
    /**
    
     * [descr:dxResizableOptions.onResizeEnd]
    
    
     */
    onResizeEnd: EventEmitter<ResizeEndEvent>;
    /**
    
     * [descr:dxResizableOptions.onResizeStart]
    
    
     */
    onResizeStart: EventEmitter<ResizeStartEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    areaChange: EventEmitter<string | UserDefinedElement | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    handlesChange: EventEmitter<ResizeHandle | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keepAspectRatioChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxHeightChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minHeightChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxResizable;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxResizableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxResizableComponent, "dx-resizable", never, { "area": "area"; "elementAttr": "elementAttr"; "handles": "handles"; "height": "height"; "keepAspectRatio": "keepAspectRatio"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "rtlEnabled": "rtlEnabled"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onResize": "onResize"; "onResizeEnd": "onResizeEnd"; "onResizeStart": "onResizeStart"; "areaChange": "areaChange"; "elementAttrChange": "elementAttrChange"; "handlesChange": "handlesChange"; "heightChange": "heightChange"; "keepAspectRatioChange": "keepAspectRatioChange"; "maxHeightChange": "maxHeightChange"; "maxWidthChange": "maxWidthChange"; "minHeightChange": "minHeightChange"; "minWidthChange": "minWidthChange"; "rtlEnabledChange": "rtlEnabledChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxResizableModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxResizableModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxResizableModule, [typeof DxResizableComponent], [typeof i1.DxIntegrationModule, typeof i1.DxTemplateModule], [typeof DxResizableComponent, typeof i1.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxResizableModule>;
}
export { DxResizableTypes };
