/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { Mode } from 'devextreme/common';
import { ContentReadyEvent, DisposingEvent, EditorEnterKeyEvent, FieldDataChangedEvent, FormLabelMode, InitializedEvent, LabelLocation, OptionChangedEvent } from 'devextreme/ui/form';
import DxForm from 'devextreme/ui/form';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import type * as DxFormTypes from "devextreme/ui/form_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxForm]

 */
export declare class DxFormComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxForm;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxFormOptions.alignItemLabels]
    
     */
    get alignItemLabels(): boolean;
    set alignItemLabels(value: boolean);
    /**
     * [descr:dxFormOptions.alignItemLabelsInAllGroups]
    
     */
    get alignItemLabelsInAllGroups(): boolean;
    set alignItemLabelsInAllGroups(value: boolean);
    /**
     * [descr:dxFormOptions.colCount]
    
     */
    get colCount(): Mode | number;
    set colCount(value: Mode | number);
    /**
     * [descr:dxFormOptions.colCountByScreen]
    
     */
    get colCountByScreen(): {
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    };
    set colCountByScreen(value: {
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    });
    /**
     * [descr:dxFormOptions.customizeItem]
    
     */
    get customizeItem(): Function;
    set customizeItem(value: Function);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:WidgetOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxFormOptions.formData]
    
     */
    get formData(): any;
    set formData(value: any);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxFormOptions.isDirty]
    
     */
    get isDirty(): boolean;
    set isDirty(value: boolean);
    /**
     * [descr:dxFormOptions.items]
    
     */
    get items(): Array<DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem>;
    set items(value: Array<DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem>);
    /**
     * [descr:dxFormOptions.labelLocation]
    
     */
    get labelLocation(): LabelLocation;
    set labelLocation(value: LabelLocation);
    /**
     * [descr:dxFormOptions.labelMode]
    
     */
    get labelMode(): FormLabelMode;
    set labelMode(value: FormLabelMode);
    /**
     * [descr:dxFormOptions.minColWidth]
    
     */
    get minColWidth(): number;
    set minColWidth(value: number);
    /**
     * [descr:dxFormOptions.optionalMark]
    
     */
    get optionalMark(): string;
    set optionalMark(value: string);
    /**
     * [descr:dxFormOptions.readOnly]
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * [descr:dxFormOptions.requiredMark]
    
     */
    get requiredMark(): string;
    set requiredMark(value: string);
    /**
     * [descr:dxFormOptions.requiredMessage]
    
     */
    get requiredMessage(): string;
    set requiredMessage(value: string);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxFormOptions.screenByWidth]
    
     */
    get screenByWidth(): Function;
    set screenByWidth(value: Function);
    /**
     * [descr:dxFormOptions.scrollingEnabled]
    
     */
    get scrollingEnabled(): boolean;
    set scrollingEnabled(value: boolean);
    /**
     * [descr:dxFormOptions.showColonAfterLabel]
    
     */
    get showColonAfterLabel(): boolean;
    set showColonAfterLabel(value: boolean);
    /**
     * [descr:dxFormOptions.showOptionalMark]
    
     */
    get showOptionalMark(): boolean;
    set showOptionalMark(value: boolean);
    /**
     * [descr:dxFormOptions.showRequiredMark]
    
     */
    get showRequiredMark(): boolean;
    set showRequiredMark(value: boolean);
    /**
     * [descr:dxFormOptions.showValidationSummary]
    
     */
    get showValidationSummary(): boolean;
    set showValidationSummary(value: boolean);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxFormOptions.validationGroup]
    
     */
    get validationGroup(): string | undefined;
    set validationGroup(value: string | undefined);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxFormOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxFormOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxFormOptions.onEditorEnterKey]
    
    
     */
    onEditorEnterKey: EventEmitter<EditorEnterKeyEvent>;
    /**
    
     * [descr:dxFormOptions.onFieldDataChanged]
    
    
     */
    onFieldDataChanged: EventEmitter<FieldDataChangedEvent>;
    /**
    
     * [descr:dxFormOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxFormOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    alignItemLabelsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    alignItemLabelsInAllGroupsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colCountChange: EventEmitter<Mode | number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    colCountByScreenChange: EventEmitter<{
        lg?: number | undefined;
        md?: number | undefined;
        sm?: number | undefined;
        xs?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeItemChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    formDataChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isDirtyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<DevExpress.ui.dxFormSimpleItem | DevExpress.ui.dxFormGroupItem | DevExpress.ui.dxFormTabbedItem | DevExpress.ui.dxFormEmptyItem | DevExpress.ui.dxFormButtonItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelLocationChange: EventEmitter<LabelLocation>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelModeChange: EventEmitter<FormLabelMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minColWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    optionalMarkChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    requiredMarkChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    requiredMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    screenByWidthChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showColonAfterLabelChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showOptionalMarkChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRequiredMarkChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showValidationSummaryChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationGroupChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get itemsChildren(): QueryList<DxiItemComponent>;
    set itemsChildren(value: QueryList<DxiItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxForm;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxFormComponent, "dx-form", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "alignItemLabels": "alignItemLabels"; "alignItemLabelsInAllGroups": "alignItemLabelsInAllGroups"; "colCount": "colCount"; "colCountByScreen": "colCountByScreen"; "customizeItem": "customizeItem"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "formData": "formData"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "isDirty": "isDirty"; "items": "items"; "labelLocation": "labelLocation"; "labelMode": "labelMode"; "minColWidth": "minColWidth"; "optionalMark": "optionalMark"; "readOnly": "readOnly"; "requiredMark": "requiredMark"; "requiredMessage": "requiredMessage"; "rtlEnabled": "rtlEnabled"; "screenByWidth": "screenByWidth"; "scrollingEnabled": "scrollingEnabled"; "showColonAfterLabel": "showColonAfterLabel"; "showOptionalMark": "showOptionalMark"; "showRequiredMark": "showRequiredMark"; "showValidationSummary": "showValidationSummary"; "tabIndex": "tabIndex"; "validationGroup": "validationGroup"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onEditorEnterKey": "onEditorEnterKey"; "onFieldDataChanged": "onFieldDataChanged"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "alignItemLabelsChange": "alignItemLabelsChange"; "alignItemLabelsInAllGroupsChange": "alignItemLabelsInAllGroupsChange"; "colCountChange": "colCountChange"; "colCountByScreenChange": "colCountByScreenChange"; "customizeItemChange": "customizeItemChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "formDataChange": "formDataChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "isDirtyChange": "isDirtyChange"; "itemsChange": "itemsChange"; "labelLocationChange": "labelLocationChange"; "labelModeChange": "labelModeChange"; "minColWidthChange": "minColWidthChange"; "optionalMarkChange": "optionalMarkChange"; "readOnlyChange": "readOnlyChange"; "requiredMarkChange": "requiredMarkChange"; "requiredMessageChange": "requiredMessageChange"; "rtlEnabledChange": "rtlEnabledChange"; "screenByWidthChange": "screenByWidthChange"; "scrollingEnabledChange": "scrollingEnabledChange"; "showColonAfterLabelChange": "showColonAfterLabelChange"; "showOptionalMarkChange": "showOptionalMarkChange"; "showRequiredMarkChange": "showRequiredMarkChange"; "showValidationSummaryChange": "showValidationSummaryChange"; "tabIndexChange": "tabIndexChange"; "validationGroupChange": "validationGroupChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never>;
}
export declare class DxFormModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxFormModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxFormModule, [typeof DxFormComponent], [typeof i1.DxoColCountByScreenModule, typeof i1.DxiItemModule, typeof i1.DxoLabelModule, typeof i1.DxiValidationRuleModule, typeof i1.DxoTabPanelOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoButtonOptionsModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxFormComponent, typeof i1.DxoColCountByScreenModule, typeof i1.DxiItemModule, typeof i1.DxoLabelModule, typeof i1.DxiValidationRuleModule, typeof i1.DxoTabPanelOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoButtonOptionsModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxFormModule>;
}
export { DxFormTypes };
