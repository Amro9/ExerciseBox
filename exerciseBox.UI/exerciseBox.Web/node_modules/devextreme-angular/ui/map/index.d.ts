/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { ClickEvent, DisposingEvent, InitializedEvent, MapProvider, MapType, MarkerAddedEvent, MarkerRemovedEvent, OptionChangedEvent, ReadyEvent, RouteAddedEvent, RouteMode, RouteRemovedEvent } from 'devextreme/ui/map';
import DxMap from 'devextreme/ui/map';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiCenterComponent } from 'devextreme-angular/ui/nested';
import { DxiMarkerComponent } from 'devextreme-angular/ui/nested';
import { DxiRouteComponent } from 'devextreme-angular/ui/nested';
import type * as DxMapTypes from "devextreme/ui/map_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxMap]

 */
export declare class DxMapComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxMap;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxMapOptions.apiKey]
    
     */
    get apiKey(): string | {
        bing?: string;
        google?: string;
        googleStatic?: string;
    };
    set apiKey(value: string | {
        bing?: string;
        google?: string;
        googleStatic?: string;
    });
    /**
     * [descr:dxMapOptions.autoAdjust]
    
     */
    get autoAdjust(): boolean;
    set autoAdjust(value: boolean);
    /**
     * [descr:dxMapOptions.center]
    
     */
    get center(): string | Array<number | {
        lat?: number;
        lng?: number;
    }>;
    set center(value: string | Array<number | {
        lat?: number;
        lng?: number;
    }>);
    /**
     * [descr:dxMapOptions.controls]
    
     */
    get controls(): boolean;
    set controls(value: boolean);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxMapOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxMapOptions.height]
    
     */
    get height(): number | Function | string;
    set height(value: number | Function | string);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxMapOptions.markerIconSrc]
    
     */
    get markerIconSrc(): string;
    set markerIconSrc(value: string);
    /**
     * [descr:dxMapOptions.markers]
    
     */
    get markers(): Array<any | {
        iconSrc?: string;
        location?: string | Array<number | {
            lat?: number;
            lng?: number;
        }>;
        onClick?: Function;
        tooltip?: string | {
            isShown?: boolean;
            text?: string;
        };
    }>;
    set markers(value: Array<any | {
        iconSrc?: string;
        location?: string | Array<number | {
            lat?: number;
            lng?: number;
        }>;
        onClick?: Function;
        tooltip?: string | {
            isShown?: boolean;
            text?: string;
        };
    }>);
    /**
     * [descr:dxMapOptions.provider]
    
     */
    get provider(): MapProvider;
    set provider(value: MapProvider);
    /**
     * [descr:dxMapOptions.routes]
    
     */
    get routes(): Array<any | {
        color?: string;
        locations?: Array<any | {
            lat?: number;
            lng?: number;
        }>;
        mode?: RouteMode;
        opacity?: number;
        weight?: number;
    }>;
    set routes(value: Array<any | {
        color?: string;
        locations?: Array<any | {
            lat?: number;
            lng?: number;
        }>;
        mode?: RouteMode;
        opacity?: number;
        weight?: number;
    }>);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxMapOptions.type]
    
     */
    get type(): MapType;
    set type(value: MapType);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:dxMapOptions.width]
    
     */
    get width(): number | Function | string;
    set width(value: number | Function | string);
    /**
     * [descr:dxMapOptions.zoom]
    
     */
    get zoom(): number;
    set zoom(value: number);
    /**
    
     * [descr:dxMapOptions.onClick]
    
    
     */
    onClick: EventEmitter<ClickEvent>;
    /**
    
     * [descr:dxMapOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxMapOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxMapOptions.onMarkerAdded]
    
    
     */
    onMarkerAdded: EventEmitter<MarkerAddedEvent>;
    /**
    
     * [descr:dxMapOptions.onMarkerRemoved]
    
    
     */
    onMarkerRemoved: EventEmitter<MarkerRemovedEvent>;
    /**
    
     * [descr:dxMapOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxMapOptions.onReady]
    
    
     */
    onReady: EventEmitter<ReadyEvent>;
    /**
    
     * [descr:dxMapOptions.onRouteAdded]
    
    
     */
    onRouteAdded: EventEmitter<RouteAddedEvent>;
    /**
    
     * [descr:dxMapOptions.onRouteRemoved]
    
    
     */
    onRouteRemoved: EventEmitter<RouteRemovedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    apiKeyChange: EventEmitter<string | {
        bing?: string;
        google?: string;
        googleStatic?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoAdjustChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    centerChange: EventEmitter<string | Array<number | {
        lat?: number;
        lng?: number;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    controlsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    markerIconSrcChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    markersChange: EventEmitter<Array<any | {
        iconSrc?: string;
        location?: string | Array<number | {
            lat?: number;
            lng?: number;
        }>;
        onClick?: Function;
        tooltip?: string | {
            isShown?: boolean;
            text?: string;
        };
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    providerChange: EventEmitter<MapProvider>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    routesChange: EventEmitter<Array<any | {
        color?: string;
        locations?: Array<any | {
            lat?: number;
            lng?: number;
        }>;
        mode?: RouteMode;
        opacity?: number;
        weight?: number;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    typeChange: EventEmitter<MapType>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomChange: EventEmitter<number>;
    get centerChildren(): QueryList<DxiCenterComponent>;
    set centerChildren(value: QueryList<DxiCenterComponent>);
    get markersChildren(): QueryList<DxiMarkerComponent>;
    set markersChildren(value: QueryList<DxiMarkerComponent>);
    get routesChildren(): QueryList<DxiRouteComponent>;
    set routesChildren(value: QueryList<DxiRouteComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxMap;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxMapComponent, "dx-map", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "apiKey": "apiKey"; "autoAdjust": "autoAdjust"; "center": "center"; "controls": "controls"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "markerIconSrc": "markerIconSrc"; "markers": "markers"; "provider": "provider"; "routes": "routes"; "rtlEnabled": "rtlEnabled"; "tabIndex": "tabIndex"; "type": "type"; "visible": "visible"; "width": "width"; "zoom": "zoom"; }, { "onClick": "onClick"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onMarkerAdded": "onMarkerAdded"; "onMarkerRemoved": "onMarkerRemoved"; "onOptionChanged": "onOptionChanged"; "onReady": "onReady"; "onRouteAdded": "onRouteAdded"; "onRouteRemoved": "onRouteRemoved"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "apiKeyChange": "apiKeyChange"; "autoAdjustChange": "autoAdjustChange"; "centerChange": "centerChange"; "controlsChange": "controlsChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "markerIconSrcChange": "markerIconSrcChange"; "markersChange": "markersChange"; "providerChange": "providerChange"; "routesChange": "routesChange"; "rtlEnabledChange": "rtlEnabledChange"; "tabIndexChange": "tabIndexChange"; "typeChange": "typeChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "zoomChange": "zoomChange"; }, ["centerChildren", "markersChildren", "routesChildren"], never>;
}
export declare class DxMapModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxMapModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxMapModule, [typeof DxMapComponent], [typeof i1.DxoApiKeyModule, typeof i1.DxiCenterModule, typeof i1.DxiMarkerModule, typeof i1.DxiLocationModule, typeof i1.DxoTooltipModule, typeof i1.DxiRouteModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxMapComponent, typeof i1.DxoApiKeyModule, typeof i1.DxiCenterModule, typeof i1.DxiMarkerModule, typeof i1.DxiLocationModule, typeof i1.DxoTooltipModule, typeof i1.DxiRouteModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxMapModule>;
}
export { DxMapTypes };
