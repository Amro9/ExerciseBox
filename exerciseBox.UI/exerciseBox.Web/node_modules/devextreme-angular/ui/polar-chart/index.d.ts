/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ExportFormat, HorizontalAlignment, Orientation, Position, SingleOrMultiple, VerticalEdge } from 'devextreme/common';
import { AnimationEaseMode, ArgumentAxisHoverMode, AxisScaleType, ChartsDataType, DashStyle, DiscreteAxisDivisionMode, Font, LabelOverlap, LegendHoverMode, Palette, PaletteExtensionMode, TextOverflow, Theme, TimeInterval, WordWrap } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { Format } from 'devextreme/localization';
import { ArgumentAxisClickEvent, DisposingEvent, DoneEvent, DrawnEvent, dxPolarChartCommonAnnotationConfig, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, LegendClickEvent, OptionChangedEvent, PointClickEvent, PointHoverChangedEvent, PointSelectionChangedEvent, SeriesClickEvent, SeriesHoverChangedEvent, SeriesSelectionChangedEvent, TooltipHiddenEvent, TooltipShownEvent, ValueAxisVisualRangeUpdateMode, ZoomEndEvent, ZoomStartEvent } from 'devextreme/viz/polar_chart';
import DxPolarChart from 'devextreme/viz/polar_chart';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiAnnotationComponent } from 'devextreme-angular/ui/nested';
import { DxiSeriesComponent } from 'devextreme-angular/ui/nested';
import type * as DxPolarChartTypes from "devextreme/viz/polar_chart_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxPolarChart]

 */
export declare class DxPolarChartComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxPolarChart;
    /**
     * [descr:dxPolarChartOptions.adaptiveLayout]
    
     */
    get adaptiveLayout(): {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    };
    set adaptiveLayout(value: {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    });
    /**
     * [descr:BaseChartOptions.animation]
    
     */
    get animation(): boolean | {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
        maxPointCountSupported?: number;
    };
    set animation(value: boolean | {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
        maxPointCountSupported?: number;
    });
    /**
     * [descr:dxPolarChartOptions.annotations]
    
     */
    get annotations(): Array<DevExpress.viz.dxPolarChartAnnotationConfig | any>;
    set annotations(value: Array<DevExpress.viz.dxPolarChartAnnotationConfig | any>);
    /**
     * [descr:dxPolarChartOptions.argumentAxis]
    
     */
    get argumentAxis(): {
        allowDecimals?: boolean | undefined;
        argumentType?: ChartsDataType | undefined;
        axisDivisionFactor?: number;
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                text?: string | undefined;
                visible?: boolean;
            };
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        firstPointOnStartAngle?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        hoverMode?: ArgumentAxisHoverMode;
        inverted?: boolean;
        label?: {
            customizeHint?: Function;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        opacity?: number | undefined;
        originValue?: number | undefined;
        period?: number | undefined;
        startAngle?: number;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                text?: string | undefined;
            };
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: AxisScaleType | undefined;
        visible?: boolean;
        width?: number;
    };
    set argumentAxis(value: {
        allowDecimals?: boolean | undefined;
        argumentType?: ChartsDataType | undefined;
        axisDivisionFactor?: number;
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                text?: string | undefined;
                visible?: boolean;
            };
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        firstPointOnStartAngle?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        hoverMode?: ArgumentAxisHoverMode;
        inverted?: boolean;
        label?: {
            customizeHint?: Function;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        opacity?: number | undefined;
        originValue?: number | undefined;
        period?: number | undefined;
        startAngle?: number;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                text?: string | undefined;
            };
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: AxisScaleType | undefined;
        visible?: boolean;
        width?: number;
    });
    /**
     * [descr:dxPolarChartOptions.barGroupPadding]
    
     */
    get barGroupPadding(): number;
    set barGroupPadding(value: number);
    /**
     * [descr:dxPolarChartOptions.barGroupWidth]
    
     */
    get barGroupWidth(): number | undefined;
    set barGroupWidth(value: number | undefined);
    /**
     * [descr:dxPolarChartOptions.commonAnnotationSettings]
    
     */
    get commonAnnotationSettings(): dxPolarChartCommonAnnotationConfig;
    set commonAnnotationSettings(value: dxPolarChartCommonAnnotationConfig);
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings]
    
     */
    get commonAxisSettings(): {
        allowDecimals?: boolean | undefined;
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        opacity?: number | undefined;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        visible?: boolean;
        width?: number;
    };
    set commonAxisSettings(value: {
        allowDecimals?: boolean | undefined;
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        opacity?: number | undefined;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        visible?: boolean;
        width?: number;
    });
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings]
    
     */
    get commonSeriesSettings(): any;
    set commonSeriesSettings(value: any);
    /**
     * [descr:dxPolarChartOptions.containerBackgroundColor]
    
     */
    get containerBackgroundColor(): string;
    set containerBackgroundColor(value: string);
    /**
     * [descr:dxPolarChartOptions.customizeAnnotation]
    
     */
    get customizeAnnotation(): Function | undefined;
    set customizeAnnotation(value: Function | undefined);
    /**
     * [descr:BaseChartOptions.customizeLabel]
    
     */
    get customizeLabel(): Function;
    set customizeLabel(value: Function);
    /**
     * [descr:BaseChartOptions.customizePoint]
    
     */
    get customizePoint(): Function;
    set customizePoint(value: Function);
    /**
     * [descr:dxPolarChartOptions.dataPrepareSettings]
    
     */
    get dataPrepareSettings(): {
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    };
    set dataPrepareSettings(value: {
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    });
    /**
     * [descr:BaseChartOptions.dataSource]
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<any>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<any>);
    /**
     * [descr:BaseWidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:BaseWidgetOptions.export]
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * [descr:dxPolarChartOptions.legend]
    
     */
    get legend(): {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        hoverMode?: LegendHoverMode;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    };
    set legend(value: {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        hoverMode?: LegendHoverMode;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    });
    /**
     * [descr:BaseWidgetOptions.loadingIndicator]
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * [descr:BaseWidgetOptions.margin]
    
     */
    get margin(): {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    set margin(value: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    });
    /**
     * [descr:dxPolarChartOptions.negativesAsZeroes]
    
     */
    get negativesAsZeroes(): boolean;
    set negativesAsZeroes(value: boolean);
    /**
     * [descr:BaseChartOptions.palette]
    
     */
    get palette(): Palette | string | Array<string>;
    set palette(value: Palette | string | Array<string>);
    /**
     * [descr:BaseChartOptions.paletteExtensionMode]
    
     */
    get paletteExtensionMode(): PaletteExtensionMode;
    set paletteExtensionMode(value: PaletteExtensionMode);
    /**
     * [descr:BaseWidgetOptions.pathModified]
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * [descr:BaseChartOptions.pointSelectionMode]
    
     */
    get pointSelectionMode(): SingleOrMultiple;
    set pointSelectionMode(value: SingleOrMultiple);
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * [descr:dxPolarChartOptions.resolveLabelOverlapping]
    
     */
    get resolveLabelOverlapping(): LabelOverlap;
    set resolveLabelOverlapping(value: LabelOverlap);
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxPolarChartOptions.series]
    
     */
    get series(): any | undefined | Array<any>;
    set series(value: any | undefined | Array<any>);
    /**
     * [descr:dxPolarChartOptions.seriesSelectionMode]
    
     */
    get seriesSelectionMode(): SingleOrMultiple;
    set seriesSelectionMode(value: SingleOrMultiple);
    /**
     * [descr:dxPolarChartOptions.seriesTemplate]
    
     */
    get seriesTemplate(): {
        customizeSeries?: Function;
        nameField?: string;
    };
    set seriesTemplate(value: {
        customizeSeries?: Function;
        nameField?: string;
    });
    /**
     * [descr:BaseWidgetOptions.size]
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * [descr:BaseWidgetOptions.theme]
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * [descr:BaseWidgetOptions.title]
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * [descr:dxPolarChartOptions.tooltip]
    
     */
    get tooltip(): {
        argumentFormat?: Format | string | undefined;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        argumentFormat?: Format | string | undefined;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number | undefined;
    });
    /**
     * [descr:dxPolarChartOptions.useSpiderWeb]
    
     */
    get useSpiderWeb(): boolean;
    set useSpiderWeb(value: boolean);
    /**
     * [descr:dxPolarChartOptions.valueAxis]
    
     */
    get valueAxis(): {
        allowDecimals?: boolean | undefined;
        axisDivisionFactor?: number;
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                text?: string | undefined;
                visible?: boolean;
            };
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            customizeHint?: Function;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        opacity?: number | undefined;
        showZero?: boolean | undefined;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                text?: string | undefined;
            };
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        valueType?: ChartsDataType | undefined;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: ValueAxisVisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
    };
    set valueAxis(value: {
        allowDecimals?: boolean | undefined;
        axisDivisionFactor?: number;
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                text?: string | undefined;
                visible?: boolean;
            };
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            customizeHint?: Function;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        opacity?: number | undefined;
        showZero?: boolean | undefined;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                text?: string | undefined;
            };
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        valueType?: ChartsDataType | undefined;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: ValueAxisVisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
    });
    /**
    
     * [descr:dxPolarChartOptions.onArgumentAxisClick]
    
    
     */
    onArgumentAxisClick: EventEmitter<ArgumentAxisClickEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onDone]
    
    
     */
    onDone: EventEmitter<DoneEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onDrawn]
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onExported]
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onExporting]
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onFileSaving]
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onIncidentOccurred]
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onLegendClick]
    
    
     */
    onLegendClick: EventEmitter<LegendClickEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onPointClick]
    
    
     */
    onPointClick: EventEmitter<PointClickEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onPointHoverChanged]
    
    
     */
    onPointHoverChanged: EventEmitter<PointHoverChangedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onPointSelectionChanged]
    
    
     */
    onPointSelectionChanged: EventEmitter<PointSelectionChangedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onSeriesClick]
    
    
     */
    onSeriesClick: EventEmitter<SeriesClickEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onSeriesHoverChanged]
    
    
     */
    onSeriesHoverChanged: EventEmitter<SeriesHoverChangedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onSeriesSelectionChanged]
    
    
     */
    onSeriesSelectionChanged: EventEmitter<SeriesSelectionChangedEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onTooltipHidden]
    
    
     */
    onTooltipHidden: EventEmitter<TooltipHiddenEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onTooltipShown]
    
    
     */
    onTooltipShown: EventEmitter<TooltipShownEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onZoomEnd]
    
    
     */
    onZoomEnd: EventEmitter<ZoomEndEvent>;
    /**
    
     * [descr:dxPolarChartOptions.onZoomStart]
    
    
     */
    onZoomStart: EventEmitter<ZoomStartEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptiveLayoutChange: EventEmitter<{
        height?: number;
        keepLabels?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<boolean | {
        duration?: number;
        easing?: AnimationEaseMode;
        enabled?: boolean;
        maxPointCountSupported?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    annotationsChange: EventEmitter<Array<DevExpress.viz.dxPolarChartAnnotationConfig | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    argumentAxisChange: EventEmitter<{
        allowDecimals?: boolean | undefined;
        argumentType?: ChartsDataType | undefined;
        axisDivisionFactor?: number;
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                text?: string | undefined;
                visible?: boolean;
            };
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        firstPointOnStartAngle?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        hoverMode?: ArgumentAxisHoverMode;
        inverted?: boolean;
        label?: {
            customizeHint?: Function;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        opacity?: number | undefined;
        originValue?: number | undefined;
        period?: number | undefined;
        startAngle?: number;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                text?: string | undefined;
            };
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: AxisScaleType | undefined;
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    barGroupPaddingChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    barGroupWidthChange: EventEmitter<number | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAnnotationSettingsChange: EventEmitter<dxPolarChartCommonAnnotationConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAxisSettingsChange: EventEmitter<{
        allowDecimals?: boolean | undefined;
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean | undefined;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        opacity?: number | undefined;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonSeriesSettingsChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeAnnotationChange: EventEmitter<Function | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeLabelChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizePointChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataPrepareSettingsChange: EventEmitter<{
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    legendChange: EventEmitter<{
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        hoverMode?: LegendHoverMode;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    negativesAsZeroesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteChange: EventEmitter<Palette | string | Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteExtensionModeChange: EventEmitter<PaletteExtensionMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pointSelectionModeChange: EventEmitter<SingleOrMultiple>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resolveLabelOverlappingChange: EventEmitter<LabelOverlap>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesChange: EventEmitter<any | undefined | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesSelectionModeChange: EventEmitter<SingleOrMultiple>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesTemplateChange: EventEmitter<{
        customizeSeries?: Function;
        nameField?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        argumentFormat?: Format | string | undefined;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        format?: Format | string | undefined;
        interactive?: boolean;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useSpiderWebChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueAxisChange: EventEmitter<{
        allowDecimals?: boolean | undefined;
        axisDivisionFactor?: number;
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: DashStyle;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                text?: string | undefined;
                visible?: boolean;
            };
            value?: Date | number | string | undefined;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: DashStyle;
            label?: {
                font?: Font;
                visible?: boolean;
            };
            width?: number;
        };
        discreteAxisDivisionMode?: DiscreteAxisDivisionMode;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            customizeHint?: Function;
            customizeText?: Function;
            font?: Font;
            format?: Format | string | undefined;
            indentFromAxis?: number;
            overlappingBehavior?: LabelOverlap;
            visible?: boolean;
        };
        linearThreshold?: number | undefined;
        logarithmBase?: number;
        maxValueMargin?: number | undefined;
        minorGrid?: {
            color?: string;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number | undefined;
        minorTickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number | undefined;
        minVisualRangeLength?: TimeInterval | number | undefined | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        opacity?: number | undefined;
        showZero?: boolean | undefined;
        strips?: Array<any | {
            color?: string | undefined;
            endValue?: Date | number | string | undefined;
            label?: {
                font?: Font;
                text?: string | undefined;
            };
            startValue?: Date | number | string | undefined;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
            };
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: TimeInterval | number | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        type?: AxisScaleType | undefined;
        valueMarginsEnabled?: boolean;
        valueType?: ChartsDataType | undefined;
        visible?: boolean;
        visualRange?: DevExpress.common.charts.VisualRange | Array<number | string | Date>;
        visualRangeUpdateMode?: ValueAxisVisualRangeUpdateMode;
        wholeRange?: DevExpress.common.charts.VisualRange | undefined | Array<number | string | Date>;
        width?: number;
    }>;
    get annotationsChildren(): QueryList<DxiAnnotationComponent>;
    set annotationsChildren(value: QueryList<DxiAnnotationComponent>);
    get seriesChildren(): QueryList<DxiSeriesComponent>;
    set seriesChildren(value: QueryList<DxiSeriesComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxPolarChart;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxPolarChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxPolarChartComponent, "dx-polar-chart", never, { "adaptiveLayout": "adaptiveLayout"; "animation": "animation"; "annotations": "annotations"; "argumentAxis": "argumentAxis"; "barGroupPadding": "barGroupPadding"; "barGroupWidth": "barGroupWidth"; "commonAnnotationSettings": "commonAnnotationSettings"; "commonAxisSettings": "commonAxisSettings"; "commonSeriesSettings": "commonSeriesSettings"; "containerBackgroundColor": "containerBackgroundColor"; "customizeAnnotation": "customizeAnnotation"; "customizeLabel": "customizeLabel"; "customizePoint": "customizePoint"; "dataPrepareSettings": "dataPrepareSettings"; "dataSource": "dataSource"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "legend": "legend"; "loadingIndicator": "loadingIndicator"; "margin": "margin"; "negativesAsZeroes": "negativesAsZeroes"; "palette": "palette"; "paletteExtensionMode": "paletteExtensionMode"; "pathModified": "pathModified"; "pointSelectionMode": "pointSelectionMode"; "redrawOnResize": "redrawOnResize"; "resolveLabelOverlapping": "resolveLabelOverlapping"; "rtlEnabled": "rtlEnabled"; "series": "series"; "seriesSelectionMode": "seriesSelectionMode"; "seriesTemplate": "seriesTemplate"; "size": "size"; "theme": "theme"; "title": "title"; "tooltip": "tooltip"; "useSpiderWeb": "useSpiderWeb"; "valueAxis": "valueAxis"; }, { "onArgumentAxisClick": "onArgumentAxisClick"; "onDisposing": "onDisposing"; "onDone": "onDone"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onLegendClick": "onLegendClick"; "onOptionChanged": "onOptionChanged"; "onPointClick": "onPointClick"; "onPointHoverChanged": "onPointHoverChanged"; "onPointSelectionChanged": "onPointSelectionChanged"; "onSeriesClick": "onSeriesClick"; "onSeriesHoverChanged": "onSeriesHoverChanged"; "onSeriesSelectionChanged": "onSeriesSelectionChanged"; "onTooltipHidden": "onTooltipHidden"; "onTooltipShown": "onTooltipShown"; "onZoomEnd": "onZoomEnd"; "onZoomStart": "onZoomStart"; "adaptiveLayoutChange": "adaptiveLayoutChange"; "animationChange": "animationChange"; "annotationsChange": "annotationsChange"; "argumentAxisChange": "argumentAxisChange"; "barGroupPaddingChange": "barGroupPaddingChange"; "barGroupWidthChange": "barGroupWidthChange"; "commonAnnotationSettingsChange": "commonAnnotationSettingsChange"; "commonAxisSettingsChange": "commonAxisSettingsChange"; "commonSeriesSettingsChange": "commonSeriesSettingsChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "customizeAnnotationChange": "customizeAnnotationChange"; "customizeLabelChange": "customizeLabelChange"; "customizePointChange": "customizePointChange"; "dataPrepareSettingsChange": "dataPrepareSettingsChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "legendChange": "legendChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "negativesAsZeroesChange": "negativesAsZeroesChange"; "paletteChange": "paletteChange"; "paletteExtensionModeChange": "paletteExtensionModeChange"; "pathModifiedChange": "pathModifiedChange"; "pointSelectionModeChange": "pointSelectionModeChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "resolveLabelOverlappingChange": "resolveLabelOverlappingChange"; "rtlEnabledChange": "rtlEnabledChange"; "seriesChange": "seriesChange"; "seriesSelectionModeChange": "seriesSelectionModeChange"; "seriesTemplateChange": "seriesTemplateChange"; "sizeChange": "sizeChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "useSpiderWebChange": "useSpiderWebChange"; "valueAxisChange": "valueAxisChange"; }, ["annotationsChildren", "seriesChildren"], never>;
}
export declare class DxPolarChartModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxPolarChartModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxPolarChartModule, [typeof DxPolarChartComponent], [typeof i1.DxoAdaptiveLayoutModule, typeof i1.DxoAnimationModule, typeof i1.DxiAnnotationModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoImageModule, typeof i1.DxoShadowModule, typeof i1.DxoArgumentAxisModule, typeof i1.DxiConstantLineModule, typeof i1.DxoLabelModule, typeof i1.DxoConstantLineStyleModule, typeof i1.DxoGridModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorGridModule, typeof i1.DxoMinorTickModule, typeof i1.DxoMinorTickIntervalModule, typeof i1.DxiStripModule, typeof i1.DxoStripStyleModule, typeof i1.DxoTickModule, typeof i1.DxoTickIntervalModule, typeof i1.DxoCommonAnnotationSettingsModule, typeof i1.DxoCommonAxisSettingsModule, typeof i1.DxoCommonSeriesSettingsModule, typeof i1.DxoAreaModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoConnectorModule, typeof i1.DxoPointModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoValueErrorBarModule, typeof i1.DxoBarModule, typeof i1.DxoColorModule, typeof i1.DxoArgumentFormatModule, typeof i1.DxoLineModule, typeof i1.DxoScatterModule, typeof i1.DxoStackedbarModule, typeof i1.DxoDataPrepareSettingsModule, typeof i1.DxoExportModule, typeof i1.DxoLegendModule, typeof i1.DxoMarginModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxiSeriesModule, typeof i1.DxoSeriesTemplateModule, typeof i1.DxoSizeModule, typeof i1.DxoTooltipModule, typeof i1.DxoValueAxisModule, typeof i1.DxoMinVisualRangeLengthModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxPolarChartComponent, typeof i1.DxoAdaptiveLayoutModule, typeof i1.DxoAnimationModule, typeof i1.DxiAnnotationModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoImageModule, typeof i1.DxoShadowModule, typeof i1.DxoArgumentAxisModule, typeof i1.DxiConstantLineModule, typeof i1.DxoLabelModule, typeof i1.DxoConstantLineStyleModule, typeof i1.DxoGridModule, typeof i1.DxoFormatModule, typeof i1.DxoMinorGridModule, typeof i1.DxoMinorTickModule, typeof i1.DxoMinorTickIntervalModule, typeof i1.DxiStripModule, typeof i1.DxoStripStyleModule, typeof i1.DxoTickModule, typeof i1.DxoTickIntervalModule, typeof i1.DxoCommonAnnotationSettingsModule, typeof i1.DxoCommonAxisSettingsModule, typeof i1.DxoCommonSeriesSettingsModule, typeof i1.DxoAreaModule, typeof i1.DxoHoverStyleModule, typeof i1.DxoHatchingModule, typeof i1.DxoConnectorModule, typeof i1.DxoPointModule, typeof i1.DxoSelectionStyleModule, typeof i1.DxoValueErrorBarModule, typeof i1.DxoBarModule, typeof i1.DxoColorModule, typeof i1.DxoArgumentFormatModule, typeof i1.DxoLineModule, typeof i1.DxoScatterModule, typeof i1.DxoStackedbarModule, typeof i1.DxoDataPrepareSettingsModule, typeof i1.DxoExportModule, typeof i1.DxoLegendModule, typeof i1.DxoMarginModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxiSeriesModule, typeof i1.DxoSeriesTemplateModule, typeof i1.DxoSizeModule, typeof i1.DxoTooltipModule, typeof i1.DxoValueAxisModule, typeof i1.DxoMinVisualRangeLengthModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxPolarChartModule>;
}
export { DxPolarChartTypes };
