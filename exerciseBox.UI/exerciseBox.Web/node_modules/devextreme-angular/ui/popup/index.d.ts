/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { AnimationConfig } from 'devextreme/animation/fx';
import DevExpress from 'devextreme/bundles/dx.all';
import { PositionAlignment, ToolbarItemComponent, ToolbarItemLocation } from 'devextreme/common';
import { UserDefinedElement } from 'devextreme/core/element';
import { ToolbarLocation } from 'devextreme/ui/popup';
import { LocateInMenuMode, ShowTextMode } from 'devextreme/ui/toolbar';
import DxPopup from 'devextreme/ui/popup';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiToolbarItemComponent } from 'devextreme-angular/ui/nested';
import type * as DxPopupTypes from "devextreme/ui/popup_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxPopup]

 */
export declare class DxPopupComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxPopup;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:dxPopupOptions.animation]
    
     */
    get animation(): {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    };
    set animation(value: {
        hide?: AnimationConfig;
        show?: AnimationConfig;
    });
    /**
     * [descr:dxOverlayOptions.closeOnOutsideClick]
    
     * @deprecated [depNote:dxOverlayOptions.closeOnOutsideClick]
    
     */
    get closeOnOutsideClick(): boolean | Function;
    set closeOnOutsideClick(value: boolean | Function);
    /**
     * [descr:dxPopupOptions.container]
    
     */
    get container(): string | UserDefinedElement | undefined;
    set container(value: string | UserDefinedElement | undefined);
    /**
     * [descr:dxOverlayOptions.contentTemplate]
    
     */
    get contentTemplate(): any;
    set contentTemplate(value: any);
    /**
     * [descr:dxOverlayOptions.copyRootClassesToWrapper]
    
     * @deprecated [depNote:dxOverlayOptions.copyRootClassesToWrapper]
    
     */
    get copyRootClassesToWrapper(): boolean;
    set copyRootClassesToWrapper(value: boolean);
    /**
     * [descr:dxOverlayOptions.deferRendering]
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:dxPopupOptions.dragAndResizeArea]
    
     */
    get dragAndResizeArea(): string | UserDefinedElement | undefined;
    set dragAndResizeArea(value: string | UserDefinedElement | undefined);
    /**
     * [descr:dxPopupOptions.dragEnabled]
    
     */
    get dragEnabled(): boolean;
    set dragEnabled(value: boolean);
    /**
     * [descr:dxPopupOptions.dragOutsideBoundary]
    
     */
    get dragOutsideBoundary(): boolean;
    set dragOutsideBoundary(value: boolean);
    /**
     * [descr:dxOverlayOptions.elementAttr]
    
     * @deprecated [depNote:dxOverlayOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxPopupOptions.enableBodyScroll]
    
     */
    get enableBodyScroll(): boolean;
    set enableBodyScroll(value: boolean);
    /**
     * [descr:dxPopupOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxPopupOptions.fullScreen]
    
     */
    get fullScreen(): boolean;
    set fullScreen(value: boolean);
    /**
     * [descr:dxPopupOptions.height]
    
     */
    get height(): number | Function | string;
    set height(value: number | Function | string);
    /**
     * [descr:dxOverlayOptions.hideOnOutsideClick]
    
     */
    get hideOnOutsideClick(): boolean | Function;
    set hideOnOutsideClick(value: boolean | Function);
    /**
     * [descr:dxOverlayOptions.hideOnParentScroll]
    
     */
    get hideOnParentScroll(): boolean;
    set hideOnParentScroll(value: boolean);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxOverlayOptions.maxHeight]
    
     */
    get maxHeight(): number | Function | string;
    set maxHeight(value: number | Function | string);
    /**
     * [descr:dxOverlayOptions.maxWidth]
    
     */
    get maxWidth(): number | Function | string;
    set maxWidth(value: number | Function | string);
    /**
     * [descr:dxOverlayOptions.minHeight]
    
     */
    get minHeight(): number | Function | string;
    set minHeight(value: number | Function | string);
    /**
     * [descr:dxOverlayOptions.minWidth]
    
     */
    get minWidth(): number | Function | string;
    set minWidth(value: number | Function | string);
    /**
     * [descr:dxPopupOptions.position]
    
     */
    get position(): PositionAlignment | DevExpress.PositionConfig | Function;
    set position(value: PositionAlignment | DevExpress.PositionConfig | Function);
    /**
     * [descr:dxPopupOptions.resizeEnabled]
    
     */
    get resizeEnabled(): boolean;
    set resizeEnabled(value: boolean);
    /**
     * [descr:dxPopupOptions.restorePosition]
    
     */
    get restorePosition(): boolean;
    set restorePosition(value: boolean);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxOverlayOptions.shading]
    
     */
    get shading(): boolean;
    set shading(value: boolean);
    /**
     * [descr:dxOverlayOptions.shadingColor]
    
     */
    get shadingColor(): string;
    set shadingColor(value: string);
    /**
     * [descr:dxPopupOptions.showCloseButton]
    
     */
    get showCloseButton(): boolean;
    set showCloseButton(value: boolean);
    /**
     * [descr:dxPopupOptions.showTitle]
    
     */
    get showTitle(): boolean;
    set showTitle(value: boolean);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxPopupOptions.title]
    
     */
    get title(): string;
    set title(value: string);
    /**
     * [descr:dxPopupOptions.titleTemplate]
    
     */
    get titleTemplate(): any;
    set titleTemplate(value: any);
    /**
     * [descr:dxPopupOptions.toolbarItems]
    
     */
    get toolbarItems(): Array<any | {
        cssClass?: string | undefined;
        disabled?: boolean;
        html?: string;
        locateInMenu?: LocateInMenuMode;
        location?: ToolbarItemLocation;
        menuItemTemplate?: any;
        options?: any;
        showText?: ShowTextMode;
        template?: any;
        text?: string;
        toolbar?: ToolbarLocation;
        visible?: boolean;
        widget?: ToolbarItemComponent;
    }>;
    set toolbarItems(value: Array<any | {
        cssClass?: string | undefined;
        disabled?: boolean;
        html?: string;
        locateInMenu?: LocateInMenuMode;
        location?: ToolbarItemLocation;
        menuItemTemplate?: any;
        options?: any;
        showText?: ShowTextMode;
        template?: any;
        text?: string;
        toolbar?: ToolbarLocation;
        visible?: boolean;
        widget?: ToolbarItemComponent;
    }>);
    /**
     * [descr:dxOverlayOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:dxPopupOptions.width]
    
     */
    get width(): number | Function | string;
    set width(value: number | Function | string);
    /**
     * [descr:dxOverlayOptions.wrapperAttr]
    
     */
    get wrapperAttr(): any;
    set wrapperAttr(value: any);
    /**
    
     * [descr:WidgetOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * [descr:DOMComponentOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * [descr:dxOverlayOptions.onHidden]
    
    
     */
    onHidden: EventEmitter<any>;
    /**
    
     * [descr:dxOverlayOptions.onHiding]
    
    
     */
    onHiding: EventEmitter<any>;
    /**
    
     * [descr:ComponentOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * [descr:DOMComponentOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * [descr:dxPopupOptions.onResize]
    
    
     */
    onResize: EventEmitter<any>;
    /**
    
     * [descr:dxPopupOptions.onResizeEnd]
    
    
     */
    onResizeEnd: EventEmitter<any>;
    /**
    
     * [descr:dxPopupOptions.onResizeStart]
    
    
     */
    onResizeStart: EventEmitter<any>;
    /**
    
     * [descr:dxOverlayOptions.onShowing]
    
    
     */
    onShowing: EventEmitter<any>;
    /**
    
     * [descr:dxOverlayOptions.onShown]
    
    
     */
    onShown: EventEmitter<any>;
    /**
    
     * [descr:dxPopupOptions.onTitleRendered]
    
    
     */
    onTitleRendered: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        hide?: AnimationConfig;
        show?: AnimationConfig;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerChange: EventEmitter<string | UserDefinedElement | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    copyRootClassesToWrapperChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragAndResizeAreaChange: EventEmitter<string | UserDefinedElement | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragOutsideBoundaryChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    enableBodyScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fullScreenChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideOnParentScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<PositionAlignment | DevExpress.PositionConfig | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resizeEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    restorePositionChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCloseButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarItemsChange: EventEmitter<Array<any | {
        cssClass?: string | undefined;
        disabled?: boolean;
        html?: string;
        locateInMenu?: LocateInMenuMode;
        location?: ToolbarItemLocation;
        menuItemTemplate?: any;
        options?: any;
        showText?: ShowTextMode;
        template?: any;
        text?: string;
        toolbar?: ToolbarLocation;
        visible?: boolean;
        widget?: ToolbarItemComponent;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapperAttrChange: EventEmitter<any>;
    get toolbarItemsChildren(): QueryList<DxiToolbarItemComponent>;
    set toolbarItemsChildren(value: QueryList<DxiToolbarItemComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxPopup<any>;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxPopupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxPopupComponent, "dx-popup", never, { "accessKey": "accessKey"; "animation": "animation"; "closeOnOutsideClick": "closeOnOutsideClick"; "container": "container"; "contentTemplate": "contentTemplate"; "copyRootClassesToWrapper": "copyRootClassesToWrapper"; "deferRendering": "deferRendering"; "disabled": "disabled"; "dragAndResizeArea": "dragAndResizeArea"; "dragEnabled": "dragEnabled"; "dragOutsideBoundary": "dragOutsideBoundary"; "elementAttr": "elementAttr"; "enableBodyScroll": "enableBodyScroll"; "focusStateEnabled": "focusStateEnabled"; "fullScreen": "fullScreen"; "height": "height"; "hideOnOutsideClick": "hideOnOutsideClick"; "hideOnParentScroll": "hideOnParentScroll"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "minHeight": "minHeight"; "minWidth": "minWidth"; "position": "position"; "resizeEnabled": "resizeEnabled"; "restorePosition": "restorePosition"; "rtlEnabled": "rtlEnabled"; "shading": "shading"; "shadingColor": "shadingColor"; "showCloseButton": "showCloseButton"; "showTitle": "showTitle"; "tabIndex": "tabIndex"; "title": "title"; "titleTemplate": "titleTemplate"; "toolbarItems": "toolbarItems"; "visible": "visible"; "width": "width"; "wrapperAttr": "wrapperAttr"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onHidden": "onHidden"; "onHiding": "onHiding"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onResize": "onResize"; "onResizeEnd": "onResizeEnd"; "onResizeStart": "onResizeStart"; "onShowing": "onShowing"; "onShown": "onShown"; "onTitleRendered": "onTitleRendered"; "accessKeyChange": "accessKeyChange"; "animationChange": "animationChange"; "closeOnOutsideClickChange": "closeOnOutsideClickChange"; "containerChange": "containerChange"; "contentTemplateChange": "contentTemplateChange"; "copyRootClassesToWrapperChange": "copyRootClassesToWrapperChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "dragAndResizeAreaChange": "dragAndResizeAreaChange"; "dragEnabledChange": "dragEnabledChange"; "dragOutsideBoundaryChange": "dragOutsideBoundaryChange"; "elementAttrChange": "elementAttrChange"; "enableBodyScrollChange": "enableBodyScrollChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "fullScreenChange": "fullScreenChange"; "heightChange": "heightChange"; "hideOnOutsideClickChange": "hideOnOutsideClickChange"; "hideOnParentScrollChange": "hideOnParentScrollChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "maxHeightChange": "maxHeightChange"; "maxWidthChange": "maxWidthChange"; "minHeightChange": "minHeightChange"; "minWidthChange": "minWidthChange"; "positionChange": "positionChange"; "resizeEnabledChange": "resizeEnabledChange"; "restorePositionChange": "restorePositionChange"; "rtlEnabledChange": "rtlEnabledChange"; "shadingChange": "shadingChange"; "shadingColorChange": "shadingColorChange"; "showCloseButtonChange": "showCloseButtonChange"; "showTitleChange": "showTitleChange"; "tabIndexChange": "tabIndexChange"; "titleChange": "titleChange"; "titleTemplateChange": "titleTemplateChange"; "toolbarItemsChange": "toolbarItemsChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wrapperAttrChange": "wrapperAttrChange"; }, ["toolbarItemsChildren"], ["*"]>;
}
export declare class DxPopupModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxPopupModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxPopupModule, [typeof DxPopupComponent], [typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxPopupComponent, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxPopupModule>;
}
export { DxPopupTypes };
