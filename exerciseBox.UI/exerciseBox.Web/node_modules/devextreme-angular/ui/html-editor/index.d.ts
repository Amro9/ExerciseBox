/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { EditorStyle, Position, ValidationMessageMode, ValidationStatus } from 'devextreme/common';
import { ContentReadyEvent, DisposingEvent, dxHtmlEditorImageUpload, dxHtmlEditorMediaResizing, dxHtmlEditorTableContextMenu, dxHtmlEditorTableResizing, dxHtmlEditorToolbar, dxHtmlEditorVariables, FocusInEvent, FocusOutEvent, InitializedEvent, MarkupType, OptionChangedEvent, ValueChangedEvent } from 'devextreme/ui/html_editor';
import DxHtmlEditor from 'devextreme/ui/html_editor';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiMentionComponent } from 'devextreme-angular/ui/nested';
import type * as DxHtmlEditorTypes from "devextreme/ui/html_editor_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxHtmlEditor]

 */
export declare class DxHtmlEditorComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxHtmlEditor;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxHtmlEditorOptions.allowSoftLineBreak]
    
     */
    get allowSoftLineBreak(): boolean;
    set allowSoftLineBreak(value: boolean);
    /**
     * [descr:dxHtmlEditorOptions.customizeModules]
    
     */
    get customizeModules(): Function;
    set customizeModules(value: Function);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxHtmlEditorOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxHtmlEditorOptions.imageUpload]
    
     */
    get imageUpload(): dxHtmlEditorImageUpload;
    set imageUpload(value: dxHtmlEditorImageUpload);
    /**
     * [descr:EditorOptions.isDirty]
    
     */
    get isDirty(): boolean;
    set isDirty(value: boolean);
    /**
     * [descr:EditorOptions.isValid]
    
     */
    get isValid(): boolean;
    set isValid(value: boolean);
    /**
     * [descr:dxHtmlEditorOptions.mediaResizing]
    
     */
    get mediaResizing(): dxHtmlEditorMediaResizing;
    set mediaResizing(value: dxHtmlEditorMediaResizing);
    /**
     * [descr:dxHtmlEditorOptions.mentions]
    
     */
    get mentions(): Array<DevExpress.ui.dxHtmlEditorMention>;
    set mentions(value: Array<DevExpress.ui.dxHtmlEditorMention>);
    /**
     * [descr:dxHtmlEditorOptions.name]
    
     */
    get name(): string;
    set name(value: string);
    /**
     * [descr:dxHtmlEditorOptions.placeholder]
    
     */
    get placeholder(): string;
    set placeholder(value: string);
    /**
     * [descr:EditorOptions.readOnly]
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxHtmlEditorOptions.stylingMode]
    
     */
    get stylingMode(): EditorStyle;
    set stylingMode(value: EditorStyle);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxHtmlEditorOptions.tableContextMenu]
    
     */
    get tableContextMenu(): dxHtmlEditorTableContextMenu;
    set tableContextMenu(value: dxHtmlEditorTableContextMenu);
    /**
     * [descr:dxHtmlEditorOptions.tableResizing]
    
     */
    get tableResizing(): dxHtmlEditorTableResizing;
    set tableResizing(value: dxHtmlEditorTableResizing);
    /**
     * [descr:dxHtmlEditorOptions.toolbar]
    
     */
    get toolbar(): dxHtmlEditorToolbar;
    set toolbar(value: dxHtmlEditorToolbar);
    /**
     * [descr:EditorOptions.validationError]
    
     */
    get validationError(): any;
    set validationError(value: any);
    /**
     * [descr:EditorOptions.validationErrors]
    
     */
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    /**
     * [descr:EditorOptions.validationMessageMode]
    
     */
    get validationMessageMode(): ValidationMessageMode;
    set validationMessageMode(value: ValidationMessageMode);
    /**
     * [descr:EditorOptions.validationMessagePosition]
    
     */
    get validationMessagePosition(): Position;
    set validationMessagePosition(value: Position);
    /**
     * [descr:EditorOptions.validationStatus]
    
     */
    get validationStatus(): ValidationStatus;
    set validationStatus(value: ValidationStatus);
    /**
     * [descr:EditorOptions.value]
    
     */
    get value(): any;
    set value(value: any);
    /**
     * [descr:dxHtmlEditorOptions.valueType]
    
     */
    get valueType(): MarkupType;
    set valueType(value: MarkupType);
    /**
     * [descr:dxHtmlEditorOptions.variables]
    
     */
    get variables(): dxHtmlEditorVariables;
    set variables(value: dxHtmlEditorVariables);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxHtmlEditorOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxHtmlEditorOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxHtmlEditorOptions.onFocusIn]
    
    
     */
    onFocusIn: EventEmitter<FocusInEvent>;
    /**
    
     * [descr:dxHtmlEditorOptions.onFocusOut]
    
    
     */
    onFocusOut: EventEmitter<FocusOutEvent>;
    /**
    
     * [descr:dxHtmlEditorOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxHtmlEditorOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxHtmlEditorOptions.onValueChanged]
    
    
     */
    onValueChanged: EventEmitter<ValueChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowSoftLineBreakChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeModulesChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    imageUploadChange: EventEmitter<dxHtmlEditorImageUpload>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isDirtyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mediaResizingChange: EventEmitter<dxHtmlEditorMediaResizing>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    mentionsChange: EventEmitter<Array<DevExpress.ui.dxHtmlEditorMention>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<EditorStyle>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tableContextMenuChange: EventEmitter<dxHtmlEditorTableContextMenu>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tableResizingChange: EventEmitter<dxHtmlEditorTableResizing>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxHtmlEditorToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<ValidationMessageMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessagePositionChange: EventEmitter<Position>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<ValidationStatus>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueTypeChange: EventEmitter<MarkupType>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    variablesChange: EventEmitter<dxHtmlEditorVariables>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * [descr:undefined]
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    get mentionsChildren(): QueryList<DxiMentionComponent>;
    set mentionsChildren(value: QueryList<DxiMentionComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxHtmlEditor;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxHtmlEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxHtmlEditorComponent, "dx-html-editor", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowSoftLineBreak": "allowSoftLineBreak"; "customizeModules": "customizeModules"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "imageUpload": "imageUpload"; "isDirty": "isDirty"; "isValid": "isValid"; "mediaResizing": "mediaResizing"; "mentions": "mentions"; "name": "name"; "placeholder": "placeholder"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "stylingMode": "stylingMode"; "tabIndex": "tabIndex"; "tableContextMenu": "tableContextMenu"; "tableResizing": "tableResizing"; "toolbar": "toolbar"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationMessagePosition": "validationMessagePosition"; "validationStatus": "validationStatus"; "value": "value"; "valueType": "valueType"; "variables": "variables"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowSoftLineBreakChange": "allowSoftLineBreakChange"; "customizeModulesChange": "customizeModulesChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "imageUploadChange": "imageUploadChange"; "isDirtyChange": "isDirtyChange"; "isValidChange": "isValidChange"; "mediaResizingChange": "mediaResizingChange"; "mentionsChange": "mentionsChange"; "nameChange": "nameChange"; "placeholderChange": "placeholderChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "tableContextMenuChange": "tableContextMenuChange"; "tableResizingChange": "tableResizingChange"; "toolbarChange": "toolbarChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationMessagePositionChange": "validationMessagePositionChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueTypeChange": "valueTypeChange"; "variablesChange": "variablesChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, ["mentionsChildren"], ["*"]>;
}
export declare class DxHtmlEditorModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxHtmlEditorModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxHtmlEditorModule, [typeof DxHtmlEditorComponent], [typeof i1.DxoImageUploadModule, typeof i1.DxoFileUploaderOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoMediaResizingModule, typeof i1.DxiMentionModule, typeof i1.DxoTableContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoTableResizingModule, typeof i1.DxoToolbarModule, typeof i1.DxoVariablesModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxHtmlEditorComponent, typeof i1.DxoImageUploadModule, typeof i1.DxoFileUploaderOptionsModule, typeof i1.DxiTabModule, typeof i1.DxoMediaResizingModule, typeof i1.DxiMentionModule, typeof i1.DxoTableContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoTableResizingModule, typeof i1.DxoToolbarModule, typeof i1.DxoVariablesModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxHtmlEditorModule>;
}
export { DxHtmlEditorTypes };
