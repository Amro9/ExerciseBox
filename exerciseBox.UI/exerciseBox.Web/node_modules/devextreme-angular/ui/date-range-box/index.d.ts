/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ApplyValueMode, EditorStyle, LabelMode, Mode, Position, ValidationMessageMode, ValidationStatus } from 'devextreme/common';
import { Format } from 'devextreme/localization';
import { dxCalendarOptions } from 'devextreme/ui/calendar';
import { ChangeEvent, ClosedEvent, ContentReadyEvent, CopyEvent, CutEvent, DisposingEvent, EnterKeyEvent, FocusInEvent, FocusOutEvent, InitializedEvent, InputEvent, KeyDownEvent, KeyUpEvent, OpenedEvent, OptionChangedEvent, PasteEvent, ValueChangedEvent } from 'devextreme/ui/date_range_box';
import { DropDownPredefinedButton } from 'devextreme/ui/drop_down_editor/ui.drop_down_editor';
import { Properties as dxPopupOptions } from 'devextreme/ui/popup';
import DxDateRangeBox from 'devextreme/ui/date_range_box';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiButtonComponent } from 'devextreme-angular/ui/nested';
import type * as DxDateRangeBoxTypes from "devextreme/ui/date_range_box_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxDateRangeBox]

 */
export declare class DxDateRangeBoxComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDateRangeBox;
    /**
     * [descr:dxDropDownEditorOptions.acceptCustomValue]
    
     */
    get acceptCustomValue(): boolean;
    set acceptCustomValue(value: boolean);
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:dxDropDownEditorOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:DateBoxBaseOptions.applyButtonText]
    
     */
    get applyButtonText(): string;
    set applyButtonText(value: string);
    /**
     * [descr:dxDropDownEditorOptions.applyValueMode]
    
     */
    get applyValueMode(): ApplyValueMode;
    set applyValueMode(value: ApplyValueMode);
    /**
     * [descr:dxDropDownEditorOptions.buttons]
    
     */
    get buttons(): Array<DropDownPredefinedButton | DevExpress.common.TextEditorButton>;
    set buttons(value: Array<DropDownPredefinedButton | DevExpress.common.TextEditorButton>);
    /**
     * [descr:DateBoxBaseOptions.calendarOptions]
    
     */
    get calendarOptions(): dxCalendarOptions;
    set calendarOptions(value: dxCalendarOptions);
    /**
     * [descr:DateBoxBaseOptions.cancelButtonText]
    
     */
    get cancelButtonText(): string;
    set cancelButtonText(value: string);
    /**
     * [descr:DateBoxBaseOptions.dateSerializationFormat]
    
     */
    get dateSerializationFormat(): string | undefined;
    set dateSerializationFormat(value: string | undefined);
    /**
     * [descr:dxDropDownEditorOptions.deferRendering]
    
     */
    get deferRendering(): boolean;
    set deferRendering(value: boolean);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:dxDateRangeBoxOptions.disableOutOfRangeSelection]
    
     */
    get disableOutOfRangeSelection(): boolean;
    set disableOutOfRangeSelection(value: boolean);
    /**
     * [descr:DateBoxBaseOptions.displayFormat]
    
     */
    get displayFormat(): Format | string;
    set displayFormat(value: Format | string);
    /**
     * [descr:dxDropDownEditorOptions.dropDownButtonTemplate]
    
     */
    get dropDownButtonTemplate(): any;
    set dropDownButtonTemplate(value: any);
    /**
     * [descr:DateBoxBaseOptions.dropDownOptions]
    
     */
    get dropDownOptions(): dxPopupOptions;
    set dropDownOptions(value: dxPopupOptions);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxDateRangeBoxOptions.endDate]
    
     */
    get endDate(): Date | number | string;
    set endDate(value: Date | number | string);
    /**
     * [descr:dxDateRangeBoxOptions.endDateInputAttr]
    
     */
    get endDateInputAttr(): any;
    set endDateInputAttr(value: any);
    /**
     * [descr:dxDateRangeBoxOptions.endDateLabel]
    
     */
    get endDateLabel(): string;
    set endDateLabel(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.endDateName]
    
     */
    get endDateName(): string;
    set endDateName(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.endDateOutOfRangeMessage]
    
     */
    get endDateOutOfRangeMessage(): string;
    set endDateOutOfRangeMessage(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.endDatePlaceholder]
    
     */
    get endDatePlaceholder(): string;
    set endDatePlaceholder(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.endDateText]
    
     */
    get endDateText(): string;
    set endDateText(value: string);
    /**
     * [descr:dxTextEditorOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:dxTextEditorOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxDateRangeBoxOptions.invalidEndDateMessage]
    
     */
    get invalidEndDateMessage(): string;
    set invalidEndDateMessage(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.invalidStartDateMessage]
    
     */
    get invalidStartDateMessage(): string;
    set invalidStartDateMessage(value: string);
    /**
     * [descr:EditorOptions.isDirty]
    
     */
    get isDirty(): boolean;
    set isDirty(value: boolean);
    /**
     * [descr:EditorOptions.isValid]
    
     */
    get isValid(): boolean;
    set isValid(value: boolean);
    /**
     * [descr:dxTextEditorOptions.labelMode]
    
     */
    get labelMode(): LabelMode;
    set labelMode(value: LabelMode);
    /**
     * [descr:DateBoxBaseOptions.max]
    
     */
    get max(): Date | number | string | undefined;
    set max(value: Date | number | string | undefined);
    /**
     * [descr:DateBoxBaseOptions.min]
    
     */
    get min(): Date | number | string | undefined;
    set min(value: Date | number | string | undefined);
    /**
     * [descr:dxDateRangeBoxOptions.multiView]
    
     */
    get multiView(): boolean;
    set multiView(value: boolean);
    /**
     * [descr:dxDropDownEditorOptions.opened]
    
     */
    get opened(): boolean;
    set opened(value: boolean);
    /**
     * [descr:dxDateRangeBoxOptions.openOnFieldClick]
    
     */
    get openOnFieldClick(): boolean;
    set openOnFieldClick(value: boolean);
    /**
     * [descr:EditorOptions.readOnly]
    
     */
    get readOnly(): boolean;
    set readOnly(value: boolean);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxTextEditorOptions.showClearButton]
    
     */
    get showClearButton(): boolean;
    set showClearButton(value: boolean);
    /**
     * [descr:dxDropDownEditorOptions.showDropDownButton]
    
     */
    get showDropDownButton(): boolean;
    set showDropDownButton(value: boolean);
    /**
     * [descr:dxTextEditorOptions.spellcheck]
    
     */
    get spellcheck(): boolean;
    set spellcheck(value: boolean);
    /**
     * [descr:dxDateRangeBoxOptions.startDate]
    
     */
    get startDate(): Date | number | string;
    set startDate(value: Date | number | string);
    /**
     * [descr:dxDateRangeBoxOptions.startDateInputAttr]
    
     */
    get startDateInputAttr(): any;
    set startDateInputAttr(value: any);
    /**
     * [descr:dxDateRangeBoxOptions.startDateLabel]
    
     */
    get startDateLabel(): string;
    set startDateLabel(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.startDateName]
    
     */
    get startDateName(): string;
    set startDateName(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.startDateOutOfRangeMessage]
    
     */
    get startDateOutOfRangeMessage(): string;
    set startDateOutOfRangeMessage(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.startDatePlaceholder]
    
     */
    get startDatePlaceholder(): string;
    set startDatePlaceholder(value: string);
    /**
     * [descr:dxDateRangeBoxOptions.startDateText]
    
     */
    get startDateText(): string;
    set startDateText(value: string);
    /**
     * [descr:dxTextEditorOptions.stylingMode]
    
     */
    get stylingMode(): EditorStyle;
    set stylingMode(value: EditorStyle);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:DateBoxBaseOptions.todayButtonText]
    
     */
    get todayButtonText(): string;
    set todayButtonText(value: string);
    /**
     * [descr:DateBoxBaseOptions.useMaskBehavior]
    
     */
    get useMaskBehavior(): boolean;
    set useMaskBehavior(value: boolean);
    /**
     * [descr:EditorOptions.validationError]
    
     */
    get validationError(): any;
    set validationError(value: any);
    /**
     * [descr:EditorOptions.validationErrors]
    
     */
    get validationErrors(): Array<any>;
    set validationErrors(value: Array<any>);
    /**
     * [descr:EditorOptions.validationMessageMode]
    
     */
    get validationMessageMode(): ValidationMessageMode;
    set validationMessageMode(value: ValidationMessageMode);
    /**
     * [descr:dxDropDownEditorOptions.validationMessagePosition]
    
     */
    get validationMessagePosition(): Position | Mode;
    set validationMessagePosition(value: Position | Mode);
    /**
     * [descr:EditorOptions.validationStatus]
    
     */
    get validationStatus(): ValidationStatus;
    set validationStatus(value: ValidationStatus);
    /**
     * [descr:dxDateRangeBoxOptions.value]
    
     */
    get value(): Array<Date | number | string>;
    set value(value: Array<Date | number | string>);
    /**
     * [descr:dxTextEditorOptions.valueChangeEvent]
    
     */
    get valueChangeEvent(): string;
    set valueChangeEvent(value: string);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxDateRangeBoxOptions.onChange]
    
    
     */
    onChange: EventEmitter<ChangeEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onClosed]
    
    
     */
    onClosed: EventEmitter<ClosedEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onCopy]
    
    
     */
    onCopy: EventEmitter<CopyEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onCut]
    
    
     */
    onCut: EventEmitter<CutEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onEnterKey]
    
    
     */
    onEnterKey: EventEmitter<EnterKeyEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onFocusIn]
    
    
     */
    onFocusIn: EventEmitter<FocusInEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onFocusOut]
    
    
     */
    onFocusOut: EventEmitter<FocusOutEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onInput]
    
    
     */
    onInput: EventEmitter<InputEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onKeyDown]
    
    
     */
    onKeyDown: EventEmitter<KeyDownEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onKeyUp]
    
    
     */
    onKeyUp: EventEmitter<KeyUpEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onOpened]
    
    
     */
    onOpened: EventEmitter<OpenedEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onPaste]
    
    
     */
    onPaste: EventEmitter<PasteEvent>;
    /**
    
     * [descr:dxDateRangeBoxOptions.onValueChanged]
    
    
     */
    onValueChanged: EventEmitter<ValueChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    acceptCustomValueChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    applyButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    applyValueModeChange: EventEmitter<ApplyValueMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    buttonsChange: EventEmitter<Array<DropDownPredefinedButton | DevExpress.common.TextEditorButton>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    calendarOptionsChange: EventEmitter<dxCalendarOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cancelButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateSerializationFormatChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disableOutOfRangeSelectionChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayFormatChange: EventEmitter<Format | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownButtonTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownOptionsChange: EventEmitter<dxPopupOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateChange: EventEmitter<Date | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateInputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateLabelChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateNameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateOutOfRangeMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDatePlaceholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    invalidEndDateMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    invalidStartDateMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isDirtyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelModeChange: EventEmitter<LabelMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxChange: EventEmitter<Date | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minChange: EventEmitter<Date | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    multiViewChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openOnFieldClickChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showClearButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDropDownButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    spellcheckChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateChange: EventEmitter<Date | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateInputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateLabelChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateNameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateOutOfRangeMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDatePlaceholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<EditorStyle>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    todayButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useMaskBehaviorChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<ValidationMessageMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessagePositionChange: EventEmitter<Position | Mode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<ValidationStatus>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<Array<Date | number | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChangeEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * [descr:undefined]
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    get buttonsChildren(): QueryList<DxiButtonComponent>;
    set buttonsChildren(value: QueryList<DxiButtonComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDateRangeBox;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDateRangeBoxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxDateRangeBoxComponent, "dx-date-range-box", never, { "acceptCustomValue": "acceptCustomValue"; "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "applyButtonText": "applyButtonText"; "applyValueMode": "applyValueMode"; "buttons": "buttons"; "calendarOptions": "calendarOptions"; "cancelButtonText": "cancelButtonText"; "dateSerializationFormat": "dateSerializationFormat"; "deferRendering": "deferRendering"; "disabled": "disabled"; "disableOutOfRangeSelection": "disableOutOfRangeSelection"; "displayFormat": "displayFormat"; "dropDownButtonTemplate": "dropDownButtonTemplate"; "dropDownOptions": "dropDownOptions"; "elementAttr": "elementAttr"; "endDate": "endDate"; "endDateInputAttr": "endDateInputAttr"; "endDateLabel": "endDateLabel"; "endDateName": "endDateName"; "endDateOutOfRangeMessage": "endDateOutOfRangeMessage"; "endDatePlaceholder": "endDatePlaceholder"; "endDateText": "endDateText"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "invalidEndDateMessage": "invalidEndDateMessage"; "invalidStartDateMessage": "invalidStartDateMessage"; "isDirty": "isDirty"; "isValid": "isValid"; "labelMode": "labelMode"; "max": "max"; "min": "min"; "multiView": "multiView"; "opened": "opened"; "openOnFieldClick": "openOnFieldClick"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "showClearButton": "showClearButton"; "showDropDownButton": "showDropDownButton"; "spellcheck": "spellcheck"; "startDate": "startDate"; "startDateInputAttr": "startDateInputAttr"; "startDateLabel": "startDateLabel"; "startDateName": "startDateName"; "startDateOutOfRangeMessage": "startDateOutOfRangeMessage"; "startDatePlaceholder": "startDatePlaceholder"; "startDateText": "startDateText"; "stylingMode": "stylingMode"; "tabIndex": "tabIndex"; "todayButtonText": "todayButtonText"; "useMaskBehavior": "useMaskBehavior"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationMessagePosition": "validationMessagePosition"; "validationStatus": "validationStatus"; "value": "value"; "valueChangeEvent": "valueChangeEvent"; "visible": "visible"; "width": "width"; }, { "onChange": "onChange"; "onClosed": "onClosed"; "onContentReady": "onContentReady"; "onCopy": "onCopy"; "onCut": "onCut"; "onDisposing": "onDisposing"; "onEnterKey": "onEnterKey"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onInitialized": "onInitialized"; "onInput": "onInput"; "onKeyDown": "onKeyDown"; "onKeyUp": "onKeyUp"; "onOpened": "onOpened"; "onOptionChanged": "onOptionChanged"; "onPaste": "onPaste"; "onValueChanged": "onValueChanged"; "acceptCustomValueChange": "acceptCustomValueChange"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "applyButtonTextChange": "applyButtonTextChange"; "applyValueModeChange": "applyValueModeChange"; "buttonsChange": "buttonsChange"; "calendarOptionsChange": "calendarOptionsChange"; "cancelButtonTextChange": "cancelButtonTextChange"; "dateSerializationFormatChange": "dateSerializationFormatChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "disableOutOfRangeSelectionChange": "disableOutOfRangeSelectionChange"; "displayFormatChange": "displayFormatChange"; "dropDownButtonTemplateChange": "dropDownButtonTemplateChange"; "dropDownOptionsChange": "dropDownOptionsChange"; "elementAttrChange": "elementAttrChange"; "endDateChange": "endDateChange"; "endDateInputAttrChange": "endDateInputAttrChange"; "endDateLabelChange": "endDateLabelChange"; "endDateNameChange": "endDateNameChange"; "endDateOutOfRangeMessageChange": "endDateOutOfRangeMessageChange"; "endDatePlaceholderChange": "endDatePlaceholderChange"; "endDateTextChange": "endDateTextChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "invalidEndDateMessageChange": "invalidEndDateMessageChange"; "invalidStartDateMessageChange": "invalidStartDateMessageChange"; "isDirtyChange": "isDirtyChange"; "isValidChange": "isValidChange"; "labelModeChange": "labelModeChange"; "maxChange": "maxChange"; "minChange": "minChange"; "multiViewChange": "multiViewChange"; "openedChange": "openedChange"; "openOnFieldClickChange": "openOnFieldClickChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "showClearButtonChange": "showClearButtonChange"; "showDropDownButtonChange": "showDropDownButtonChange"; "spellcheckChange": "spellcheckChange"; "startDateChange": "startDateChange"; "startDateInputAttrChange": "startDateInputAttrChange"; "startDateLabelChange": "startDateLabelChange"; "startDateNameChange": "startDateNameChange"; "startDateOutOfRangeMessageChange": "startDateOutOfRangeMessageChange"; "startDatePlaceholderChange": "startDatePlaceholderChange"; "startDateTextChange": "startDateTextChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "todayButtonTextChange": "todayButtonTextChange"; "useMaskBehaviorChange": "useMaskBehaviorChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationMessagePositionChange": "validationMessagePositionChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueChangeEventChange": "valueChangeEventChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, ["buttonsChildren"], never>;
}
export declare class DxDateRangeBoxModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxDateRangeBoxModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxDateRangeBoxModule, [typeof DxDateRangeBoxComponent], [typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i1.DxoCalendarOptionsModule, typeof i1.DxoDisplayFormatModule, typeof i1.DxoDropDownOptionsModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxDateRangeBoxComponent, typeof i1.DxiButtonModule, typeof i1.DxoOptionsModule, typeof i1.DxoCalendarOptionsModule, typeof i1.DxoDisplayFormatModule, typeof i1.DxoDropDownOptionsModule, typeof i1.DxoAnimationModule, typeof i1.DxoHideModule, typeof i1.DxoFromModule, typeof i1.DxoPositionModule, typeof i1.DxoAtModule, typeof i1.DxoBoundaryOffsetModule, typeof i1.DxoCollisionModule, typeof i1.DxoMyModule, typeof i1.DxoOffsetModule, typeof i1.DxoToModule, typeof i1.DxoShowModule, typeof i1.DxiToolbarItemModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxDateRangeBoxModule>;
}
export { DxDateRangeBoxTypes };
