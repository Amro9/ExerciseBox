/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { ExportFormat, HorizontalAlignment, Orientation, Position, SingleMultipleOrNone, VerticalEdge } from 'devextreme/common';
import { DashStyle, Font, Palette, TextOverflow, Theme, WordWrap } from 'devextreme/common/charts';
import { UserDefinedElement } from 'devextreme/core/element';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { CenterChangedEvent, ClickEvent, DisposingEvent, DrawnEvent, dxVectorMapCommonAnnotationConfig, ExportedEvent, ExportingEvent, FileSavingEvent, IncidentOccurredEvent, InitializedEvent, OptionChangedEvent, SelectionChangedEvent, TooltipHiddenEvent, TooltipShownEvent, VectorMapLayerType, VectorMapMarkerShape, VectorMapMarkerType, ZoomFactorChangedEvent } from 'devextreme/viz/vector_map';
import { VectorMapProjection } from 'devextreme/viz/vector_map/projection';
import DxVectorMap from 'devextreme/viz/vector_map';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiAnnotationComponent } from 'devextreme-angular/ui/nested';
import { DxiLayerComponent } from 'devextreme-angular/ui/nested';
import { DxiLegendComponent } from 'devextreme-angular/ui/nested';
import type * as DxVectorMapTypes from "devextreme/viz/vector_map_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxVectorMap]

 */
export declare class DxVectorMapComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxVectorMap;
    /**
     * [descr:dxVectorMapOptions.annotations]
    
     */
    get annotations(): Array<DevExpress.viz.dxVectorMapAnnotationConfig | any>;
    set annotations(value: Array<DevExpress.viz.dxVectorMapAnnotationConfig | any>);
    /**
     * [descr:dxVectorMapOptions.background]
    
     */
    get background(): {
        borderColor?: string;
        color?: string;
    };
    set background(value: {
        borderColor?: string;
        color?: string;
    });
    /**
     * [descr:dxVectorMapOptions.bounds]
    
     */
    get bounds(): Array<number>;
    set bounds(value: Array<number>);
    /**
     * [descr:dxVectorMapOptions.center]
    
     */
    get center(): Array<number>;
    set center(value: Array<number>);
    /**
     * [descr:dxVectorMapOptions.commonAnnotationSettings]
    
     */
    get commonAnnotationSettings(): dxVectorMapCommonAnnotationConfig;
    set commonAnnotationSettings(value: dxVectorMapCommonAnnotationConfig);
    /**
     * [descr:dxVectorMapOptions.controlBar]
    
     */
    get controlBar(): {
        borderColor?: string;
        color?: string;
        enabled?: boolean;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number;
        opacity?: number;
        panVisible?: boolean;
        verticalAlignment?: VerticalEdge;
        zoomVisible?: boolean;
    };
    set controlBar(value: {
        borderColor?: string;
        color?: string;
        enabled?: boolean;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number;
        opacity?: number;
        panVisible?: boolean;
        verticalAlignment?: VerticalEdge;
        zoomVisible?: boolean;
    });
    /**
     * [descr:dxVectorMapOptions.customizeAnnotation]
    
     */
    get customizeAnnotation(): Function | undefined;
    set customizeAnnotation(value: Function | undefined);
    /**
     * [descr:BaseWidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:BaseWidgetOptions.export]
    
     */
    get export(): {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    };
    set export(value: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    });
    /**
     * [descr:dxVectorMapOptions.layers]
    
     */
    get layers(): Array<any | {
        borderColor?: string;
        borderWidth?: number;
        color?: string;
        colorGroupingField?: string | undefined;
        colorGroups?: Array<number>;
        customize?: Function;
        dataField?: string | undefined;
        dataSource?: any | DataSource | DataSourceOptions | Store | null | string | Array<any>;
        elementType?: VectorMapMarkerType;
        hoveredBorderColor?: string;
        hoveredBorderWidth?: number;
        hoveredColor?: string;
        hoverEnabled?: boolean;
        label?: {
            dataField?: string;
            enabled?: boolean;
            font?: Font;
        };
        maxSize?: number;
        minSize?: number;
        name?: string;
        opacity?: number;
        palette?: Palette | string | Array<string>;
        paletteIndex?: number;
        paletteSize?: number;
        selectedBorderColor?: string;
        selectedBorderWidth?: number;
        selectedColor?: string;
        selectionMode?: SingleMultipleOrNone;
        size?: number;
        sizeGroupingField?: string | undefined;
        sizeGroups?: Array<number>;
        type?: VectorMapLayerType;
    }>;
    set layers(value: Array<any | {
        borderColor?: string;
        borderWidth?: number;
        color?: string;
        colorGroupingField?: string | undefined;
        colorGroups?: Array<number>;
        customize?: Function;
        dataField?: string | undefined;
        dataSource?: any | DataSource | DataSourceOptions | Store | null | string | Array<any>;
        elementType?: VectorMapMarkerType;
        hoveredBorderColor?: string;
        hoveredBorderWidth?: number;
        hoveredColor?: string;
        hoverEnabled?: boolean;
        label?: {
            dataField?: string;
            enabled?: boolean;
            font?: Font;
        };
        maxSize?: number;
        minSize?: number;
        name?: string;
        opacity?: number;
        palette?: Palette | string | Array<string>;
        paletteIndex?: number;
        paletteSize?: number;
        selectedBorderColor?: string;
        selectedBorderWidth?: number;
        selectedColor?: string;
        selectionMode?: SingleMultipleOrNone;
        size?: number;
        sizeGroupingField?: string | undefined;
        sizeGroups?: Array<number>;
        type?: VectorMapLayerType;
    }>);
    /**
     * [descr:dxVectorMapOptions.legends]
    
     */
    get legends(): Array<any | {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerColor?: string | undefined;
        markerShape?: VectorMapMarkerShape;
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        rowCount?: number;
        rowItemSpacing?: number;
        source?: {
            grouping?: string;
            layer?: string;
        };
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    }>;
    set legends(value: Array<any | {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerColor?: string | undefined;
        markerShape?: VectorMapMarkerShape;
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        rowCount?: number;
        rowItemSpacing?: number;
        source?: {
            grouping?: string;
            layer?: string;
        };
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    }>);
    /**
     * [descr:BaseWidgetOptions.loadingIndicator]
    
     */
    get loadingIndicator(): {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    set loadingIndicator(value: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    });
    /**
     * [descr:dxVectorMapOptions.maxZoomFactor]
    
     */
    get maxZoomFactor(): number;
    set maxZoomFactor(value: number);
    /**
     * [descr:dxVectorMapOptions.panningEnabled]
    
     */
    get panningEnabled(): boolean;
    set panningEnabled(value: boolean);
    /**
     * [descr:BaseWidgetOptions.pathModified]
    
     */
    get pathModified(): boolean;
    set pathModified(value: boolean);
    /**
     * [descr:dxVectorMapOptions.projection]
    
     */
    get projection(): VectorMapProjection | any | DevExpress.viz.VectorMapProjectionConfig | string;
    set projection(value: VectorMapProjection | any | DevExpress.viz.VectorMapProjectionConfig | string);
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
    
     */
    get redrawOnResize(): boolean;
    set redrawOnResize(value: boolean);
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:BaseWidgetOptions.size]
    
     */
    get size(): {
        height?: number | undefined;
        width?: number | undefined;
    };
    set size(value: {
        height?: number | undefined;
        width?: number | undefined;
    });
    /**
     * [descr:BaseWidgetOptions.theme]
    
     */
    get theme(): Theme;
    set theme(value: Theme);
    /**
     * [descr:BaseWidgetOptions.title]
    
     */
    get title(): string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    };
    set title(value: string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    });
    /**
     * [descr:dxVectorMapOptions.tooltip]
    
     */
    get tooltip(): {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    };
    set tooltip(value: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    });
    /**
     * [descr:dxVectorMapOptions.touchEnabled]
    
     */
    get touchEnabled(): boolean;
    set touchEnabled(value: boolean);
    /**
     * [descr:dxVectorMapOptions.wheelEnabled]
    
     */
    get wheelEnabled(): boolean;
    set wheelEnabled(value: boolean);
    /**
     * [descr:dxVectorMapOptions.zoomFactor]
    
     */
    get zoomFactor(): number;
    set zoomFactor(value: number);
    /**
     * [descr:dxVectorMapOptions.zoomingEnabled]
    
     */
    get zoomingEnabled(): boolean;
    set zoomingEnabled(value: boolean);
    /**
    
     * [descr:dxVectorMapOptions.onCenterChanged]
    
    
     */
    onCenterChanged: EventEmitter<CenterChangedEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onClick]
    
    
     */
    onClick: EventEmitter<ClickEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onDrawn]
    
    
     */
    onDrawn: EventEmitter<DrawnEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onExported]
    
    
     */
    onExported: EventEmitter<ExportedEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onExporting]
    
    
     */
    onExporting: EventEmitter<ExportingEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onFileSaving]
    
    
     */
    onFileSaving: EventEmitter<FileSavingEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onIncidentOccurred]
    
    
     */
    onIncidentOccurred: EventEmitter<IncidentOccurredEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onSelectionChanged]
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onTooltipHidden]
    
    
     */
    onTooltipHidden: EventEmitter<TooltipHiddenEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onTooltipShown]
    
    
     */
    onTooltipShown: EventEmitter<TooltipShownEvent>;
    /**
    
     * [descr:dxVectorMapOptions.onZoomFactorChanged]
    
    
     */
    onZoomFactorChanged: EventEmitter<ZoomFactorChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    annotationsChange: EventEmitter<Array<DevExpress.viz.dxVectorMapAnnotationConfig | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    backgroundChange: EventEmitter<{
        borderColor?: string;
        color?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    boundsChange: EventEmitter<Array<number>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    centerChange: EventEmitter<Array<number>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAnnotationSettingsChange: EventEmitter<dxVectorMapCommonAnnotationConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    controlBarChange: EventEmitter<{
        borderColor?: string;
        color?: string;
        enabled?: boolean;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number;
        opacity?: number;
        panVisible?: boolean;
        verticalAlignment?: VerticalEdge;
        zoomVisible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeAnnotationChange: EventEmitter<Function | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: any | Array<ExportFormat>;
        margin?: number;
        printingEnabled?: boolean;
        svgToCanvas?: Function | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    layersChange: EventEmitter<Array<any | {
        borderColor?: string;
        borderWidth?: number;
        color?: string;
        colorGroupingField?: string | undefined;
        colorGroups?: Array<number>;
        customize?: Function;
        dataField?: string | undefined;
        dataSource?: any | DataSource | DataSourceOptions | Store | null | string | Array<any>;
        elementType?: VectorMapMarkerType;
        hoveredBorderColor?: string;
        hoveredBorderWidth?: number;
        hoveredColor?: string;
        hoverEnabled?: boolean;
        label?: {
            dataField?: string;
            enabled?: boolean;
            font?: Font;
        };
        maxSize?: number;
        minSize?: number;
        name?: string;
        opacity?: number;
        palette?: Palette | string | Array<string>;
        paletteIndex?: number;
        paletteSize?: number;
        selectedBorderColor?: string;
        selectedBorderWidth?: number;
        selectedColor?: string;
        selectionMode?: SingleMultipleOrNone;
        size?: number;
        sizeGroupingField?: string | undefined;
        sizeGroups?: Array<number>;
        type?: VectorMapLayerType;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    legendsChange: EventEmitter<Array<any | {
        backgroundColor?: string | undefined;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        itemsAlignment?: HorizontalAlignment | undefined;
        itemTextPosition?: Position | undefined;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerColor?: string | undefined;
        markerShape?: VectorMapMarkerShape;
        markerSize?: number;
        markerTemplate?: any | undefined;
        orientation?: Orientation | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        rowCount?: number;
        rowItemSpacing?: number;
        source?: {
            grouping?: string;
            layer?: string;
        };
        title?: string | {
            font?: Font;
            horizontalAlignment?: HorizontalAlignment | undefined;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number | undefined;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: VerticalEdge;
        };
        verticalAlignment?: VerticalEdge;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxZoomFactorChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    panningEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    projectionChange: EventEmitter<VectorMapProjection | any | DevExpress.viz.VectorMapProjectionConfig | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number | undefined;
        width?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<Theme>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: HorizontalAlignment;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number | undefined;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: TextOverflow;
            wordWrap?: WordWrap;
        };
        text?: string;
        textOverflow?: TextOverflow;
        verticalAlignment?: VerticalEdge;
        wordWrap?: WordWrap;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: DashStyle;
            opacity?: number | undefined;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement | undefined;
        contentTemplate?: any | undefined;
        cornerRadius?: number;
        customizeTooltip?: Function | undefined;
        enabled?: boolean;
        font?: Font;
        opacity?: number | undefined;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number | undefined;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    touchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wheelEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomFactorChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomingEnabledChange: EventEmitter<boolean>;
    get annotationsChildren(): QueryList<DxiAnnotationComponent>;
    set annotationsChildren(value: QueryList<DxiAnnotationComponent>);
    get layersChildren(): QueryList<DxiLayerComponent>;
    set layersChildren(value: QueryList<DxiLayerComponent>);
    get legendsChildren(): QueryList<DxiLegendComponent>;
    set legendsChildren(value: QueryList<DxiLegendComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxVectorMap;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxVectorMapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxVectorMapComponent, "dx-vector-map", never, { "annotations": "annotations"; "background": "background"; "bounds": "bounds"; "center": "center"; "commonAnnotationSettings": "commonAnnotationSettings"; "controlBar": "controlBar"; "customizeAnnotation": "customizeAnnotation"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "layers": "layers"; "legends": "legends"; "loadingIndicator": "loadingIndicator"; "maxZoomFactor": "maxZoomFactor"; "panningEnabled": "panningEnabled"; "pathModified": "pathModified"; "projection": "projection"; "redrawOnResize": "redrawOnResize"; "rtlEnabled": "rtlEnabled"; "size": "size"; "theme": "theme"; "title": "title"; "tooltip": "tooltip"; "touchEnabled": "touchEnabled"; "wheelEnabled": "wheelEnabled"; "zoomFactor": "zoomFactor"; "zoomingEnabled": "zoomingEnabled"; }, { "onCenterChanged": "onCenterChanged"; "onClick": "onClick"; "onDisposing": "onDisposing"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "onTooltipHidden": "onTooltipHidden"; "onTooltipShown": "onTooltipShown"; "onZoomFactorChanged": "onZoomFactorChanged"; "annotationsChange": "annotationsChange"; "backgroundChange": "backgroundChange"; "boundsChange": "boundsChange"; "centerChange": "centerChange"; "commonAnnotationSettingsChange": "commonAnnotationSettingsChange"; "controlBarChange": "controlBarChange"; "customizeAnnotationChange": "customizeAnnotationChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "layersChange": "layersChange"; "legendsChange": "legendsChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "maxZoomFactorChange": "maxZoomFactorChange"; "panningEnabledChange": "panningEnabledChange"; "pathModifiedChange": "pathModifiedChange"; "projectionChange": "projectionChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "rtlEnabledChange": "rtlEnabledChange"; "sizeChange": "sizeChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "touchEnabledChange": "touchEnabledChange"; "wheelEnabledChange": "wheelEnabledChange"; "zoomFactorChange": "zoomFactorChange"; "zoomingEnabledChange": "zoomingEnabledChange"; }, ["annotationsChildren", "layersChildren", "legendsChildren"], never>;
}
export declare class DxVectorMapModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxVectorMapModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxVectorMapModule, [typeof DxVectorMapComponent], [typeof i1.DxiAnnotationModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoImageModule, typeof i1.DxoShadowModule, typeof i1.DxoBackgroundModule, typeof i1.DxoCommonAnnotationSettingsModule, typeof i1.DxoControlBarModule, typeof i1.DxoExportModule, typeof i1.DxiLayerModule, typeof i1.DxoLabelModule, typeof i1.DxiLegendModule, typeof i1.DxoMarginModule, typeof i1.DxoSourceModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoProjectionModule, typeof i1.DxoSizeModule, typeof i1.DxoTooltipModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxVectorMapComponent, typeof i1.DxiAnnotationModule, typeof i1.DxoBorderModule, typeof i1.DxoFontModule, typeof i1.DxoImageModule, typeof i1.DxoShadowModule, typeof i1.DxoBackgroundModule, typeof i1.DxoCommonAnnotationSettingsModule, typeof i1.DxoControlBarModule, typeof i1.DxoExportModule, typeof i1.DxiLayerModule, typeof i1.DxoLabelModule, typeof i1.DxiLegendModule, typeof i1.DxoMarginModule, typeof i1.DxoSourceModule, typeof i1.DxoTitleModule, typeof i1.DxoSubtitleModule, typeof i1.DxoLoadingIndicatorModule, typeof i1.DxoProjectionModule, typeof i1.DxoSizeModule, typeof i1.DxoTooltipModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxVectorMapModule>;
}
export { DxVectorMapTypes };
