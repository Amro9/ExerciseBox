/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { FirstDayOfWeek, Orientation } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { AllDayPanelMode, AppointmentAddedEvent, AppointmentAddingEvent, AppointmentClickEvent, AppointmentContextMenuEvent, AppointmentDblClickEvent, AppointmentDeletedEvent, AppointmentDeletingEvent, AppointmentFormOpeningEvent, AppointmentRenderedEvent, AppointmentTooltipShowingEvent, AppointmentUpdatedEvent, AppointmentUpdatingEvent, CellAppointmentsLimit, CellClickEvent, CellContextMenuEvent, ContentReadyEvent, DisposingEvent, dxSchedulerScrolling, InitializedEvent, OptionChangedEvent, RecurrenceEditMode, ViewType } from 'devextreme/ui/scheduler';
import DxScheduler from 'devextreme/ui/scheduler';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiResourceComponent } from 'devextreme-angular/ui/nested';
import { DxiViewComponent } from 'devextreme-angular/ui/nested';
import type * as DxSchedulerTypes from "devextreme/ui/scheduler_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxScheduler]

 */
export declare class DxSchedulerComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxScheduler;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:dxSchedulerOptions.adaptivityEnabled]
    
     */
    get adaptivityEnabled(): boolean;
    set adaptivityEnabled(value: boolean);
    /**
     * [descr:dxSchedulerOptions.allDayExpr]
    
     */
    get allDayExpr(): string;
    set allDayExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.allDayPanelMode]
    
     */
    get allDayPanelMode(): AllDayPanelMode;
    set allDayPanelMode(value: AllDayPanelMode);
    /**
     * [descr:dxSchedulerOptions.appointmentCollectorTemplate]
    
     */
    get appointmentCollectorTemplate(): any;
    set appointmentCollectorTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.appointmentDragging]
    
     */
    get appointmentDragging(): {
        autoScroll?: boolean;
        data?: any | undefined;
        group?: string | undefined;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    };
    set appointmentDragging(value: {
        autoScroll?: boolean;
        data?: any | undefined;
        group?: string | undefined;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    });
    /**
     * [descr:dxSchedulerOptions.appointmentTemplate]
    
     */
    get appointmentTemplate(): any;
    set appointmentTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.appointmentTooltipTemplate]
    
     */
    get appointmentTooltipTemplate(): any;
    set appointmentTooltipTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.cellDuration]
    
     */
    get cellDuration(): number;
    set cellDuration(value: number);
    /**
     * [descr:dxSchedulerOptions.crossScrollingEnabled]
    
     */
    get crossScrollingEnabled(): boolean;
    set crossScrollingEnabled(value: boolean);
    /**
     * [descr:dxSchedulerOptions.currentDate]
    
     */
    get currentDate(): Date | number | string;
    set currentDate(value: Date | number | string);
    /**
     * [descr:dxSchedulerOptions.currentView]
    
     */
    get currentView(): ViewType;
    set currentView(value: ViewType);
    /**
     * [descr:dxSchedulerOptions.customizeDateNavigatorText]
    
     */
    get customizeDateNavigatorText(): Function | undefined;
    set customizeDateNavigatorText(value: Function | undefined);
    /**
     * [descr:dxSchedulerOptions.dataCellTemplate]
    
     */
    get dataCellTemplate(): any;
    set dataCellTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.dataSource]
    
     */
    get dataSource(): DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxSchedulerAppointment>;
    set dataSource(value: DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxSchedulerAppointment>);
    /**
     * [descr:dxSchedulerOptions.dateCellTemplate]
    
     */
    get dateCellTemplate(): any;
    set dateCellTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.dateSerializationFormat]
    
     */
    get dateSerializationFormat(): string | undefined;
    set dateSerializationFormat(value: string | undefined);
    /**
     * [descr:dxSchedulerOptions.descriptionExpr]
    
     */
    get descriptionExpr(): string;
    set descriptionExpr(value: string);
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:dxSchedulerOptions.dropDownAppointmentTemplate]
    
     * @deprecated [depNote:dxSchedulerOptions.dropDownAppointmentTemplate]
    
     */
    get dropDownAppointmentTemplate(): any;
    set dropDownAppointmentTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.editing]
    
     */
    get editing(): boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    };
    set editing(value: boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    });
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxSchedulerOptions.endDateExpr]
    
     */
    get endDateExpr(): string;
    set endDateExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.endDateTimeZoneExpr]
    
     */
    get endDateTimeZoneExpr(): string;
    set endDateTimeZoneExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.endDayHour]
    
     */
    get endDayHour(): number;
    set endDayHour(value: number);
    /**
     * [descr:dxSchedulerOptions.firstDayOfWeek]
    
     */
    get firstDayOfWeek(): FirstDayOfWeek | undefined;
    set firstDayOfWeek(value: FirstDayOfWeek | undefined);
    /**
     * [descr:dxSchedulerOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxSchedulerOptions.groupByDate]
    
     */
    get groupByDate(): boolean;
    set groupByDate(value: boolean);
    /**
     * [descr:dxSchedulerOptions.groups]
    
     */
    get groups(): Array<string>;
    set groups(value: Array<string>);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:dxSchedulerOptions.indicatorUpdateInterval]
    
     */
    get indicatorUpdateInterval(): number;
    set indicatorUpdateInterval(value: number);
    /**
     * [descr:dxSchedulerOptions.max]
    
     */
    get max(): Date | number | string | undefined;
    set max(value: Date | number | string | undefined);
    /**
     * [descr:dxSchedulerOptions.maxAppointmentsPerCell]
    
     */
    get maxAppointmentsPerCell(): CellAppointmentsLimit | number;
    set maxAppointmentsPerCell(value: CellAppointmentsLimit | number);
    /**
     * [descr:dxSchedulerOptions.min]
    
     */
    get min(): Date | number | string | undefined;
    set min(value: Date | number | string | undefined);
    /**
     * [descr:dxSchedulerOptions.noDataText]
    
     */
    get noDataText(): string;
    set noDataText(value: string);
    /**
     * [descr:dxSchedulerOptions.offset]
    
     */
    get offset(): number;
    set offset(value: number);
    /**
     * [descr:dxSchedulerOptions.recurrenceEditMode]
    
     */
    get recurrenceEditMode(): RecurrenceEditMode;
    set recurrenceEditMode(value: RecurrenceEditMode);
    /**
     * [descr:dxSchedulerOptions.recurrenceExceptionExpr]
    
     */
    get recurrenceExceptionExpr(): string;
    set recurrenceExceptionExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.recurrenceRuleExpr]
    
     */
    get recurrenceRuleExpr(): string;
    set recurrenceRuleExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.remoteFiltering]
    
     */
    get remoteFiltering(): boolean;
    set remoteFiltering(value: boolean);
    /**
     * [descr:dxSchedulerOptions.resourceCellTemplate]
    
     */
    get resourceCellTemplate(): any;
    set resourceCellTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.resources]
    
     */
    get resources(): Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>;
    set resources(value: Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>);
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
    
     */
    get rtlEnabled(): boolean;
    set rtlEnabled(value: boolean);
    /**
     * [descr:dxSchedulerOptions.scrolling]
    
     */
    get scrolling(): dxSchedulerScrolling;
    set scrolling(value: dxSchedulerScrolling);
    /**
     * [descr:dxSchedulerOptions.selectedCellData]
    
     */
    get selectedCellData(): Array<any>;
    set selectedCellData(value: Array<any>);
    /**
     * [descr:dxSchedulerOptions.shadeUntilCurrentTime]
    
     */
    get shadeUntilCurrentTime(): boolean;
    set shadeUntilCurrentTime(value: boolean);
    /**
     * [descr:dxSchedulerOptions.showAllDayPanel]
    
     */
    get showAllDayPanel(): boolean;
    set showAllDayPanel(value: boolean);
    /**
     * [descr:dxSchedulerOptions.showCurrentTimeIndicator]
    
     */
    get showCurrentTimeIndicator(): boolean;
    set showCurrentTimeIndicator(value: boolean);
    /**
     * [descr:dxSchedulerOptions.startDateExpr]
    
     */
    get startDateExpr(): string;
    set startDateExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.startDateTimeZoneExpr]
    
     */
    get startDateTimeZoneExpr(): string;
    set startDateTimeZoneExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.startDayHour]
    
     */
    get startDayHour(): number;
    set startDayHour(value: number);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxSchedulerOptions.textExpr]
    
     */
    get textExpr(): string;
    set textExpr(value: string);
    /**
     * [descr:dxSchedulerOptions.timeCellTemplate]
    
     */
    get timeCellTemplate(): any;
    set timeCellTemplate(value: any);
    /**
     * [descr:dxSchedulerOptions.timeZone]
    
     */
    get timeZone(): string;
    set timeZone(value: string);
    /**
     * [descr:dxSchedulerOptions.useDropDownViewSwitcher]
    
     */
    get useDropDownViewSwitcher(): boolean;
    set useDropDownViewSwitcher(value: boolean);
    /**
     * [descr:dxSchedulerOptions.views]
    
     */
    get views(): string | Array<string | any | {
        agendaDuration?: number;
        allDayPanelMode?: AllDayPanelMode;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: FirstDayOfWeek | undefined;
        groupByDate?: boolean;
        groupOrientation?: Orientation;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: CellAppointmentsLimit | number;
        name?: string | undefined;
        offset?: number;
        resourceCellTemplate?: any;
        scrolling?: dxSchedulerScrolling;
        startDate?: Date | number | string | undefined;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: ViewType | undefined;
    }>;
    set views(value: string | Array<string | any | {
        agendaDuration?: number;
        allDayPanelMode?: AllDayPanelMode;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: FirstDayOfWeek | undefined;
        groupByDate?: boolean;
        groupOrientation?: Orientation;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: CellAppointmentsLimit | number;
        name?: string | undefined;
        offset?: number;
        resourceCellTemplate?: any;
        scrolling?: dxSchedulerScrolling;
        startDate?: Date | number | string | undefined;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: ViewType | undefined;
    }>);
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentAdded]
    
    
     */
    onAppointmentAdded: EventEmitter<AppointmentAddedEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentAdding]
    
    
     */
    onAppointmentAdding: EventEmitter<AppointmentAddingEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentClick]
    
    
     */
    onAppointmentClick: EventEmitter<AppointmentClickEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentContextMenu]
    
    
     */
    onAppointmentContextMenu: EventEmitter<AppointmentContextMenuEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentDblClick]
    
    
     */
    onAppointmentDblClick: EventEmitter<AppointmentDblClickEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentDeleted]
    
    
     */
    onAppointmentDeleted: EventEmitter<AppointmentDeletedEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentDeleting]
    
    
     */
    onAppointmentDeleting: EventEmitter<AppointmentDeletingEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentFormOpening]
    
    
     */
    onAppointmentFormOpening: EventEmitter<AppointmentFormOpeningEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentRendered]
    
    
     */
    onAppointmentRendered: EventEmitter<AppointmentRenderedEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentTooltipShowing]
    
    
     */
    onAppointmentTooltipShowing: EventEmitter<AppointmentTooltipShowingEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentUpdated]
    
    
     */
    onAppointmentUpdated: EventEmitter<AppointmentUpdatedEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onAppointmentUpdating]
    
    
     */
    onAppointmentUpdating: EventEmitter<AppointmentUpdatingEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onCellClick]
    
    
     */
    onCellClick: EventEmitter<CellClickEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onCellContextMenu]
    
    
     */
    onCellContextMenu: EventEmitter<CellContextMenuEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxSchedulerOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptivityEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allDayExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allDayPanelModeChange: EventEmitter<AllDayPanelMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentCollectorTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentDraggingChange: EventEmitter<{
        autoScroll?: boolean;
        data?: any | undefined;
        group?: string | undefined;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    appointmentTooltipTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cellDurationChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    crossScrollingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    currentDateChange: EventEmitter<Date | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    currentViewChange: EventEmitter<ViewType>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeDateNavigatorTextChange: EventEmitter<Function | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DataSource | DataSourceOptions | Store | null | string | Array<DevExpress.ui.dxSchedulerAppointment>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dateSerializationFormatChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    descriptionExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownAppointmentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateTimeZoneExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDayHourChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    firstDayOfWeekChange: EventEmitter<FirstDayOfWeek | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupByDateChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupsChange: EventEmitter<Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indicatorUpdateIntervalChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxChange: EventEmitter<Date | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxAppointmentsPerCellChange: EventEmitter<CellAppointmentsLimit | number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minChange: EventEmitter<Date | number | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    offsetChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    recurrenceEditModeChange: EventEmitter<RecurrenceEditMode>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    recurrenceExceptionExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    recurrenceRuleExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    remoteFilteringChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourceCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourcesChange: EventEmitter<Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingChange: EventEmitter<dxSchedulerScrolling>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedCellDataChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadeUntilCurrentTimeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showAllDayPanelChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showCurrentTimeIndicatorChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateTimeZoneExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDayHourChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    timeCellTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    timeZoneChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useDropDownViewSwitcherChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    viewsChange: EventEmitter<string | Array<string | any | {
        agendaDuration?: number;
        allDayPanelMode?: AllDayPanelMode;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: FirstDayOfWeek | undefined;
        groupByDate?: boolean;
        groupOrientation?: Orientation;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: CellAppointmentsLimit | number;
        name?: string | undefined;
        offset?: number;
        resourceCellTemplate?: any;
        scrolling?: dxSchedulerScrolling;
        startDate?: Date | number | string | undefined;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: ViewType | undefined;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get resourcesChildren(): QueryList<DxiResourceComponent>;
    set resourcesChildren(value: QueryList<DxiResourceComponent>);
    get viewsChildren(): QueryList<DxiViewComponent>;
    set viewsChildren(value: QueryList<DxiViewComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxScheduler;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSchedulerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxSchedulerComponent, "dx-scheduler", never, { "accessKey": "accessKey"; "adaptivityEnabled": "adaptivityEnabled"; "allDayExpr": "allDayExpr"; "allDayPanelMode": "allDayPanelMode"; "appointmentCollectorTemplate": "appointmentCollectorTemplate"; "appointmentDragging": "appointmentDragging"; "appointmentTemplate": "appointmentTemplate"; "appointmentTooltipTemplate": "appointmentTooltipTemplate"; "cellDuration": "cellDuration"; "crossScrollingEnabled": "crossScrollingEnabled"; "currentDate": "currentDate"; "currentView": "currentView"; "customizeDateNavigatorText": "customizeDateNavigatorText"; "dataCellTemplate": "dataCellTemplate"; "dataSource": "dataSource"; "dateCellTemplate": "dateCellTemplate"; "dateSerializationFormat": "dateSerializationFormat"; "descriptionExpr": "descriptionExpr"; "disabled": "disabled"; "dropDownAppointmentTemplate": "dropDownAppointmentTemplate"; "editing": "editing"; "elementAttr": "elementAttr"; "endDateExpr": "endDateExpr"; "endDateTimeZoneExpr": "endDateTimeZoneExpr"; "endDayHour": "endDayHour"; "firstDayOfWeek": "firstDayOfWeek"; "focusStateEnabled": "focusStateEnabled"; "groupByDate": "groupByDate"; "groups": "groups"; "height": "height"; "hint": "hint"; "indicatorUpdateInterval": "indicatorUpdateInterval"; "max": "max"; "maxAppointmentsPerCell": "maxAppointmentsPerCell"; "min": "min"; "noDataText": "noDataText"; "offset": "offset"; "recurrenceEditMode": "recurrenceEditMode"; "recurrenceExceptionExpr": "recurrenceExceptionExpr"; "recurrenceRuleExpr": "recurrenceRuleExpr"; "remoteFiltering": "remoteFiltering"; "resourceCellTemplate": "resourceCellTemplate"; "resources": "resources"; "rtlEnabled": "rtlEnabled"; "scrolling": "scrolling"; "selectedCellData": "selectedCellData"; "shadeUntilCurrentTime": "shadeUntilCurrentTime"; "showAllDayPanel": "showAllDayPanel"; "showCurrentTimeIndicator": "showCurrentTimeIndicator"; "startDateExpr": "startDateExpr"; "startDateTimeZoneExpr": "startDateTimeZoneExpr"; "startDayHour": "startDayHour"; "tabIndex": "tabIndex"; "textExpr": "textExpr"; "timeCellTemplate": "timeCellTemplate"; "timeZone": "timeZone"; "useDropDownViewSwitcher": "useDropDownViewSwitcher"; "views": "views"; "visible": "visible"; "width": "width"; }, { "onAppointmentAdded": "onAppointmentAdded"; "onAppointmentAdding": "onAppointmentAdding"; "onAppointmentClick": "onAppointmentClick"; "onAppointmentContextMenu": "onAppointmentContextMenu"; "onAppointmentDblClick": "onAppointmentDblClick"; "onAppointmentDeleted": "onAppointmentDeleted"; "onAppointmentDeleting": "onAppointmentDeleting"; "onAppointmentFormOpening": "onAppointmentFormOpening"; "onAppointmentRendered": "onAppointmentRendered"; "onAppointmentTooltipShowing": "onAppointmentTooltipShowing"; "onAppointmentUpdated": "onAppointmentUpdated"; "onAppointmentUpdating": "onAppointmentUpdating"; "onCellClick": "onCellClick"; "onCellContextMenu": "onCellContextMenu"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "accessKeyChange": "accessKeyChange"; "adaptivityEnabledChange": "adaptivityEnabledChange"; "allDayExprChange": "allDayExprChange"; "allDayPanelModeChange": "allDayPanelModeChange"; "appointmentCollectorTemplateChange": "appointmentCollectorTemplateChange"; "appointmentDraggingChange": "appointmentDraggingChange"; "appointmentTemplateChange": "appointmentTemplateChange"; "appointmentTooltipTemplateChange": "appointmentTooltipTemplateChange"; "cellDurationChange": "cellDurationChange"; "crossScrollingEnabledChange": "crossScrollingEnabledChange"; "currentDateChange": "currentDateChange"; "currentViewChange": "currentViewChange"; "customizeDateNavigatorTextChange": "customizeDateNavigatorTextChange"; "dataCellTemplateChange": "dataCellTemplateChange"; "dataSourceChange": "dataSourceChange"; "dateCellTemplateChange": "dateCellTemplateChange"; "dateSerializationFormatChange": "dateSerializationFormatChange"; "descriptionExprChange": "descriptionExprChange"; "disabledChange": "disabledChange"; "dropDownAppointmentTemplateChange": "dropDownAppointmentTemplateChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "endDateExprChange": "endDateExprChange"; "endDateTimeZoneExprChange": "endDateTimeZoneExprChange"; "endDayHourChange": "endDayHourChange"; "firstDayOfWeekChange": "firstDayOfWeekChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "groupByDateChange": "groupByDateChange"; "groupsChange": "groupsChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "indicatorUpdateIntervalChange": "indicatorUpdateIntervalChange"; "maxChange": "maxChange"; "maxAppointmentsPerCellChange": "maxAppointmentsPerCellChange"; "minChange": "minChange"; "noDataTextChange": "noDataTextChange"; "offsetChange": "offsetChange"; "recurrenceEditModeChange": "recurrenceEditModeChange"; "recurrenceExceptionExprChange": "recurrenceExceptionExprChange"; "recurrenceRuleExprChange": "recurrenceRuleExprChange"; "remoteFilteringChange": "remoteFilteringChange"; "resourceCellTemplateChange": "resourceCellTemplateChange"; "resourcesChange": "resourcesChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollingChange": "scrollingChange"; "selectedCellDataChange": "selectedCellDataChange"; "shadeUntilCurrentTimeChange": "shadeUntilCurrentTimeChange"; "showAllDayPanelChange": "showAllDayPanelChange"; "showCurrentTimeIndicatorChange": "showCurrentTimeIndicatorChange"; "startDateExprChange": "startDateExprChange"; "startDateTimeZoneExprChange": "startDateTimeZoneExprChange"; "startDayHourChange": "startDayHourChange"; "tabIndexChange": "tabIndexChange"; "textExprChange": "textExprChange"; "timeCellTemplateChange": "timeCellTemplateChange"; "timeZoneChange": "timeZoneChange"; "useDropDownViewSwitcherChange": "useDropDownViewSwitcherChange"; "viewsChange": "viewsChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["resourcesChildren", "viewsChildren"], never>;
}
export declare class DxSchedulerModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxSchedulerModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxSchedulerModule, [typeof DxSchedulerComponent], [typeof i1.DxoAppointmentDraggingModule, typeof i1.DxoEditingModule, typeof i1.DxiResourceModule, typeof i1.DxoScrollingModule, typeof i1.DxiViewModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxSchedulerComponent, typeof i1.DxoAppointmentDraggingModule, typeof i1.DxoEditingModule, typeof i1.DxiResourceModule, typeof i1.DxoScrollingModule, typeof i1.DxiViewModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxSchedulerModule>;
}
export { DxSchedulerTypes };
