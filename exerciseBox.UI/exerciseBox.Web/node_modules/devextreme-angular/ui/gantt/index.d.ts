/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { FirstDayOfWeek } from 'devextreme/common';
import { Store } from 'devextreme/data';
import DataSource, { Options as DataSourceOptions } from 'devextreme/data/data_source';
import { ContentReadyEvent, ContextMenuPreparingEvent, CustomCommandEvent, DependencyDeletedEvent, DependencyDeletingEvent, DependencyInsertedEvent, DependencyInsertingEvent, DisposingEvent, dxGanttContextMenu, dxGanttFilterRow, dxGanttHeaderFilter, dxGanttSorting, dxGanttToolbar, GanttScaleType, GanttTaskTitlePosition, InitializedEvent, OptionChangedEvent, ResourceAssignedEvent, ResourceAssigningEvent, ResourceDeletedEvent, ResourceDeletingEvent, ResourceInsertedEvent, ResourceInsertingEvent, ResourceManagerDialogShowingEvent, ResourceUnassignedEvent, ResourceUnassigningEvent, ScaleCellPreparedEvent, SelectionChangedEvent, TaskClickEvent, TaskDblClickEvent, TaskDeletedEvent, TaskDeletingEvent, TaskEditDialogShowingEvent, TaskInsertedEvent, TaskInsertingEvent, TaskMovingEvent, TaskUpdatedEvent, TaskUpdatingEvent } from 'devextreme/ui/gantt';
import DxGantt from 'devextreme/ui/gantt';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiColumnComponent } from 'devextreme-angular/ui/nested';
import { DxiStripLineComponent } from 'devextreme-angular/ui/nested';
import type * as DxGanttTypes from "devextreme/ui/gantt_types";
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/ui/nested";
import * as i2 from "devextreme-angular/core";
/**
 * [descr:dxGantt]

 */
export declare class DxGanttComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxGantt;
    /**
     * [descr:WidgetOptions.accessKey]
    
     */
    get accessKey(): string | undefined;
    set accessKey(value: string | undefined);
    /**
     * [descr:WidgetOptions.activeStateEnabled]
    
     */
    get activeStateEnabled(): boolean;
    set activeStateEnabled(value: boolean);
    /**
     * [descr:dxGanttOptions.allowSelection]
    
     */
    get allowSelection(): boolean;
    set allowSelection(value: boolean);
    /**
     * [descr:dxGanttOptions.columns]
    
     */
    get columns(): Array<DevExpress.ui.dxGanttColumn | string>;
    set columns(value: Array<DevExpress.ui.dxGanttColumn | string>);
    /**
     * [descr:dxGanttOptions.contextMenu]
    
     */
    get contextMenu(): dxGanttContextMenu;
    set contextMenu(value: dxGanttContextMenu);
    /**
     * [descr:dxGanttOptions.dependencies]
    
     */
    get dependencies(): {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    };
    set dependencies(value: {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    });
    /**
     * [descr:WidgetOptions.disabled]
    
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * [descr:dxGanttOptions.editing]
    
     */
    get editing(): {
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskResourceUpdating?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    };
    set editing(value: {
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskResourceUpdating?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    });
    /**
     * [descr:DOMComponentOptions.elementAttr]
    
     */
    get elementAttr(): any;
    set elementAttr(value: any);
    /**
     * [descr:dxGanttOptions.endDateRange]
    
     */
    get endDateRange(): Date;
    set endDateRange(value: Date);
    /**
     * [descr:dxGanttOptions.filterRow]
    
     */
    get filterRow(): dxGanttFilterRow;
    set filterRow(value: dxGanttFilterRow);
    /**
     * [descr:dxGanttOptions.firstDayOfWeek]
    
     */
    get firstDayOfWeek(): FirstDayOfWeek | undefined;
    set firstDayOfWeek(value: FirstDayOfWeek | undefined);
    /**
     * [descr:WidgetOptions.focusStateEnabled]
    
     */
    get focusStateEnabled(): boolean;
    set focusStateEnabled(value: boolean);
    /**
     * [descr:dxGanttOptions.headerFilter]
    
     */
    get headerFilter(): dxGanttHeaderFilter;
    set headerFilter(value: dxGanttHeaderFilter);
    /**
     * [descr:DOMComponentOptions.height]
    
     */
    get height(): number | Function | string | undefined;
    set height(value: number | Function | string | undefined);
    /**
     * [descr:WidgetOptions.hint]
    
     */
    get hint(): string | undefined;
    set hint(value: string | undefined);
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
    
     */
    get hoverStateEnabled(): boolean;
    set hoverStateEnabled(value: boolean);
    /**
     * [descr:dxGanttOptions.resourceAssignments]
    
     */
    get resourceAssignments(): {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    };
    set resourceAssignments(value: {
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    });
    /**
     * [descr:dxGanttOptions.resources]
    
     */
    get resources(): {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    };
    set resources(value: {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    });
    /**
     * [descr:dxGanttOptions.rootValue]
    
     */
    get rootValue(): any;
    set rootValue(value: any);
    /**
     * [descr:dxGanttOptions.scaleType]
    
     */
    get scaleType(): GanttScaleType;
    set scaleType(value: GanttScaleType);
    /**
     * [descr:dxGanttOptions.scaleTypeRange]
    
     */
    get scaleTypeRange(): {
        max?: GanttScaleType;
        min?: GanttScaleType;
    };
    set scaleTypeRange(value: {
        max?: GanttScaleType;
        min?: GanttScaleType;
    });
    /**
     * [descr:dxGanttOptions.selectedRowKey]
    
     */
    get selectedRowKey(): any | undefined;
    set selectedRowKey(value: any | undefined);
    /**
     * [descr:dxGanttOptions.showDependencies]
    
     */
    get showDependencies(): boolean;
    set showDependencies(value: boolean);
    /**
     * [descr:dxGanttOptions.showResources]
    
     */
    get showResources(): boolean;
    set showResources(value: boolean);
    /**
     * [descr:dxGanttOptions.showRowLines]
    
     */
    get showRowLines(): boolean;
    set showRowLines(value: boolean);
    /**
     * [descr:dxGanttOptions.sorting]
    
     */
    get sorting(): dxGanttSorting;
    set sorting(value: dxGanttSorting);
    /**
     * [descr:dxGanttOptions.startDateRange]
    
     */
    get startDateRange(): Date;
    set startDateRange(value: Date);
    /**
     * [descr:dxGanttOptions.stripLines]
    
     */
    get stripLines(): Array<DevExpress.ui.dxGanttStripLine>;
    set stripLines(value: Array<DevExpress.ui.dxGanttStripLine>);
    /**
     * [descr:WidgetOptions.tabIndex]
    
     */
    get tabIndex(): number;
    set tabIndex(value: number);
    /**
     * [descr:dxGanttOptions.taskContentTemplate]
    
     */
    get taskContentTemplate(): any;
    set taskContentTemplate(value: any);
    /**
     * [descr:dxGanttOptions.taskListWidth]
    
     */
    get taskListWidth(): number;
    set taskListWidth(value: number);
    /**
     * [descr:dxGanttOptions.taskProgressTooltipContentTemplate]
    
     */
    get taskProgressTooltipContentTemplate(): any;
    set taskProgressTooltipContentTemplate(value: any);
    /**
     * [descr:dxGanttOptions.tasks]
    
     */
    get tasks(): {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    };
    set tasks(value: {
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    });
    /**
     * [descr:dxGanttOptions.taskTimeTooltipContentTemplate]
    
     */
    get taskTimeTooltipContentTemplate(): any;
    set taskTimeTooltipContentTemplate(value: any);
    /**
     * [descr:dxGanttOptions.taskTitlePosition]
    
     */
    get taskTitlePosition(): GanttTaskTitlePosition;
    set taskTitlePosition(value: GanttTaskTitlePosition);
    /**
     * [descr:dxGanttOptions.taskTooltipContentTemplate]
    
     */
    get taskTooltipContentTemplate(): any;
    set taskTooltipContentTemplate(value: any);
    /**
     * [descr:dxGanttOptions.toolbar]
    
     */
    get toolbar(): dxGanttToolbar;
    set toolbar(value: dxGanttToolbar);
    /**
     * [descr:dxGanttOptions.validation]
    
     */
    get validation(): {
        autoUpdateParentTasks?: boolean;
        enablePredecessorGap?: boolean;
        validateDependencies?: boolean;
    };
    set validation(value: {
        autoUpdateParentTasks?: boolean;
        enablePredecessorGap?: boolean;
        validateDependencies?: boolean;
    });
    /**
     * [descr:WidgetOptions.visible]
    
     */
    get visible(): boolean;
    set visible(value: boolean);
    /**
     * [descr:DOMComponentOptions.width]
    
     */
    get width(): number | Function | string | undefined;
    set width(value: number | Function | string | undefined);
    /**
    
     * [descr:dxGanttOptions.onContentReady]
    
    
     */
    onContentReady: EventEmitter<ContentReadyEvent>;
    /**
    
     * [descr:dxGanttOptions.onContextMenuPreparing]
    
    
     */
    onContextMenuPreparing: EventEmitter<ContextMenuPreparingEvent>;
    /**
    
     * [descr:dxGanttOptions.onCustomCommand]
    
    
     */
    onCustomCommand: EventEmitter<CustomCommandEvent>;
    /**
    
     * [descr:dxGanttOptions.onDependencyDeleted]
    
    
     */
    onDependencyDeleted: EventEmitter<DependencyDeletedEvent>;
    /**
    
     * [descr:dxGanttOptions.onDependencyDeleting]
    
    
     */
    onDependencyDeleting: EventEmitter<DependencyDeletingEvent>;
    /**
    
     * [descr:dxGanttOptions.onDependencyInserted]
    
    
     */
    onDependencyInserted: EventEmitter<DependencyInsertedEvent>;
    /**
    
     * [descr:dxGanttOptions.onDependencyInserting]
    
    
     */
    onDependencyInserting: EventEmitter<DependencyInsertingEvent>;
    /**
    
     * [descr:dxGanttOptions.onDisposing]
    
    
     */
    onDisposing: EventEmitter<DisposingEvent>;
    /**
    
     * [descr:dxGanttOptions.onInitialized]
    
    
     */
    onInitialized: EventEmitter<InitializedEvent>;
    /**
    
     * [descr:dxGanttOptions.onOptionChanged]
    
    
     */
    onOptionChanged: EventEmitter<OptionChangedEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceAssigned]
    
    
     */
    onResourceAssigned: EventEmitter<ResourceAssignedEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceAssigning]
    
    
     */
    onResourceAssigning: EventEmitter<ResourceAssigningEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceDeleted]
    
    
     */
    onResourceDeleted: EventEmitter<ResourceDeletedEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceDeleting]
    
    
     */
    onResourceDeleting: EventEmitter<ResourceDeletingEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceInserted]
    
    
     */
    onResourceInserted: EventEmitter<ResourceInsertedEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceInserting]
    
    
     */
    onResourceInserting: EventEmitter<ResourceInsertingEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceManagerDialogShowing]
    
    
     */
    onResourceManagerDialogShowing: EventEmitter<ResourceManagerDialogShowingEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceUnassigned]
    
    
     */
    onResourceUnassigned: EventEmitter<ResourceUnassignedEvent>;
    /**
    
     * [descr:dxGanttOptions.onResourceUnassigning]
    
    
     */
    onResourceUnassigning: EventEmitter<ResourceUnassigningEvent>;
    /**
    
     * [descr:dxGanttOptions.onScaleCellPrepared]
    
    
     */
    onScaleCellPrepared: EventEmitter<ScaleCellPreparedEvent>;
    /**
    
     * [descr:dxGanttOptions.onSelectionChanged]
    
    
     */
    onSelectionChanged: EventEmitter<SelectionChangedEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskClick]
    
    
     */
    onTaskClick: EventEmitter<TaskClickEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskDblClick]
    
    
     */
    onTaskDblClick: EventEmitter<TaskDblClickEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskDeleted]
    
    
     */
    onTaskDeleted: EventEmitter<TaskDeletedEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskDeleting]
    
    
     */
    onTaskDeleting: EventEmitter<TaskDeletingEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskEditDialogShowing]
    
    
     */
    onTaskEditDialogShowing: EventEmitter<TaskEditDialogShowingEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskInserted]
    
    
     */
    onTaskInserted: EventEmitter<TaskInsertedEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskInserting]
    
    
     */
    onTaskInserting: EventEmitter<TaskInsertingEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskMoving]
    
    
     */
    onTaskMoving: EventEmitter<TaskMovingEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskUpdated]
    
    
     */
    onTaskUpdated: EventEmitter<TaskUpdatedEvent>;
    /**
    
     * [descr:dxGanttOptions.onTaskUpdating]
    
    
     */
    onTaskUpdating: EventEmitter<TaskUpdatingEvent>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowSelectionChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    columnsChange: EventEmitter<Array<DevExpress.ui.dxGanttColumn | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<dxGanttContextMenu>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dependenciesChange: EventEmitter<{
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        predecessorIdExpr?: Function | string;
        successorIdExpr?: Function | string;
        typeExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    editingChange: EventEmitter<{
        allowDependencyAdding?: boolean;
        allowDependencyDeleting?: boolean;
        allowResourceAdding?: boolean;
        allowResourceDeleting?: boolean;
        allowResourceUpdating?: boolean;
        allowTaskAdding?: boolean;
        allowTaskDeleting?: boolean;
        allowTaskResourceUpdating?: boolean;
        allowTaskUpdating?: boolean;
        enabled?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    endDateRangeChange: EventEmitter<Date>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterRowChange: EventEmitter<dxGanttFilterRow>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    firstDayOfWeekChange: EventEmitter<FirstDayOfWeek | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    headerFilterChange: EventEmitter<dxGanttHeaderFilter>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourceAssignmentsChange: EventEmitter<{
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        resourceIdExpr?: Function | string;
        taskIdExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resourcesChange: EventEmitter<{
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        keyExpr?: Function | string;
        textExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootValueChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleTypeChange: EventEmitter<GanttScaleType>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scaleTypeRangeChange: EventEmitter<{
        max?: GanttScaleType;
        min?: GanttScaleType;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedRowKeyChange: EventEmitter<any | undefined>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showDependenciesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showResourcesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showRowLinesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sortingChange: EventEmitter<dxGanttSorting>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    startDateRangeChange: EventEmitter<Date>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stripLinesChange: EventEmitter<Array<DevExpress.ui.dxGanttStripLine>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskListWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskProgressTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tasksChange: EventEmitter<{
        colorExpr?: Function | string;
        dataSource?: DataSource | DataSourceOptions | Store | null | string | Array<any>;
        endExpr?: Function | string;
        keyExpr?: Function | string;
        parentIdExpr?: Function | string;
        progressExpr?: Function | string;
        startExpr?: Function | string;
        titleExpr?: Function | string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTimeTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTitlePositionChange: EventEmitter<GanttTaskTitlePosition>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    taskTooltipContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxGanttToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationChange: EventEmitter<{
        autoUpdateParentTasks?: boolean;
        enablePredecessorGap?: boolean;
        validateDependencies?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string | undefined>;
    get columnsChildren(): QueryList<DxiColumnComponent>;
    set columnsChildren(value: QueryList<DxiColumnComponent>);
    get stripLinesChildren(): QueryList<DxiStripLineComponent>;
    set stripLinesChildren(value: QueryList<DxiStripLineComponent>);
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxGantt;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<DxGanttComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DxGanttComponent, "dx-gantt", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowSelection": "allowSelection"; "columns": "columns"; "contextMenu": "contextMenu"; "dependencies": "dependencies"; "disabled": "disabled"; "editing": "editing"; "elementAttr": "elementAttr"; "endDateRange": "endDateRange"; "filterRow": "filterRow"; "firstDayOfWeek": "firstDayOfWeek"; "focusStateEnabled": "focusStateEnabled"; "headerFilter": "headerFilter"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "resourceAssignments": "resourceAssignments"; "resources": "resources"; "rootValue": "rootValue"; "scaleType": "scaleType"; "scaleTypeRange": "scaleTypeRange"; "selectedRowKey": "selectedRowKey"; "showDependencies": "showDependencies"; "showResources": "showResources"; "showRowLines": "showRowLines"; "sorting": "sorting"; "startDateRange": "startDateRange"; "stripLines": "stripLines"; "tabIndex": "tabIndex"; "taskContentTemplate": "taskContentTemplate"; "taskListWidth": "taskListWidth"; "taskProgressTooltipContentTemplate": "taskProgressTooltipContentTemplate"; "tasks": "tasks"; "taskTimeTooltipContentTemplate": "taskTimeTooltipContentTemplate"; "taskTitlePosition": "taskTitlePosition"; "taskTooltipContentTemplate": "taskTooltipContentTemplate"; "toolbar": "toolbar"; "validation": "validation"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onContextMenuPreparing": "onContextMenuPreparing"; "onCustomCommand": "onCustomCommand"; "onDependencyDeleted": "onDependencyDeleted"; "onDependencyDeleting": "onDependencyDeleting"; "onDependencyInserted": "onDependencyInserted"; "onDependencyInserting": "onDependencyInserting"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onResourceAssigned": "onResourceAssigned"; "onResourceAssigning": "onResourceAssigning"; "onResourceDeleted": "onResourceDeleted"; "onResourceDeleting": "onResourceDeleting"; "onResourceInserted": "onResourceInserted"; "onResourceInserting": "onResourceInserting"; "onResourceManagerDialogShowing": "onResourceManagerDialogShowing"; "onResourceUnassigned": "onResourceUnassigned"; "onResourceUnassigning": "onResourceUnassigning"; "onScaleCellPrepared": "onScaleCellPrepared"; "onSelectionChanged": "onSelectionChanged"; "onTaskClick": "onTaskClick"; "onTaskDblClick": "onTaskDblClick"; "onTaskDeleted": "onTaskDeleted"; "onTaskDeleting": "onTaskDeleting"; "onTaskEditDialogShowing": "onTaskEditDialogShowing"; "onTaskInserted": "onTaskInserted"; "onTaskInserting": "onTaskInserting"; "onTaskMoving": "onTaskMoving"; "onTaskUpdated": "onTaskUpdated"; "onTaskUpdating": "onTaskUpdating"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowSelectionChange": "allowSelectionChange"; "columnsChange": "columnsChange"; "contextMenuChange": "contextMenuChange"; "dependenciesChange": "dependenciesChange"; "disabledChange": "disabledChange"; "editingChange": "editingChange"; "elementAttrChange": "elementAttrChange"; "endDateRangeChange": "endDateRangeChange"; "filterRowChange": "filterRowChange"; "firstDayOfWeekChange": "firstDayOfWeekChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "headerFilterChange": "headerFilterChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "resourceAssignmentsChange": "resourceAssignmentsChange"; "resourcesChange": "resourcesChange"; "rootValueChange": "rootValueChange"; "scaleTypeChange": "scaleTypeChange"; "scaleTypeRangeChange": "scaleTypeRangeChange"; "selectedRowKeyChange": "selectedRowKeyChange"; "showDependenciesChange": "showDependenciesChange"; "showResourcesChange": "showResourcesChange"; "showRowLinesChange": "showRowLinesChange"; "sortingChange": "sortingChange"; "startDateRangeChange": "startDateRangeChange"; "stripLinesChange": "stripLinesChange"; "tabIndexChange": "tabIndexChange"; "taskContentTemplateChange": "taskContentTemplateChange"; "taskListWidthChange": "taskListWidthChange"; "taskProgressTooltipContentTemplateChange": "taskProgressTooltipContentTemplateChange"; "tasksChange": "tasksChange"; "taskTimeTooltipContentTemplateChange": "taskTimeTooltipContentTemplateChange"; "taskTitlePositionChange": "taskTitlePositionChange"; "taskTooltipContentTemplateChange": "taskTooltipContentTemplateChange"; "toolbarChange": "toolbarChange"; "validationChange": "validationChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["columnsChildren", "stripLinesChildren"], never>;
}
export declare class DxGanttModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<DxGanttModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<DxGanttModule, [typeof DxGanttComponent], [typeof i1.DxiColumnModule, typeof i1.DxoFormatModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoSearchModule, typeof i1.DxoContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoDependenciesModule, typeof i1.DxoEditingModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoTextsModule, typeof i1.DxoResourceAssignmentsModule, typeof i1.DxoResourcesModule, typeof i1.DxoScaleTypeRangeModule, typeof i1.DxoSortingModule, typeof i1.DxiStripLineModule, typeof i1.DxoTasksModule, typeof i1.DxoToolbarModule, typeof i1.DxoValidationModule, typeof i2.DxIntegrationModule, typeof i2.DxTemplateModule], [typeof DxGanttComponent, typeof i1.DxiColumnModule, typeof i1.DxoFormatModule, typeof i1.DxoHeaderFilterModule, typeof i1.DxoSearchModule, typeof i1.DxoContextMenuModule, typeof i1.DxiItemModule, typeof i1.DxoDependenciesModule, typeof i1.DxoEditingModule, typeof i1.DxoFilterRowModule, typeof i1.DxoOperationDescriptionsModule, typeof i1.DxoTextsModule, typeof i1.DxoResourceAssignmentsModule, typeof i1.DxoResourcesModule, typeof i1.DxoScaleTypeRangeModule, typeof i1.DxoSortingModule, typeof i1.DxiStripLineModule, typeof i1.DxoTasksModule, typeof i1.DxoToolbarModule, typeof i1.DxoValidationModule, typeof i2.DxTemplateModule]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<DxGanttModule>;
}
export { DxGanttTypes };
