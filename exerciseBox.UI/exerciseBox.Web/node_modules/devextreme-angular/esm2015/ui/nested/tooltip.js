/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { Component, NgModule, Host, SkipSelf, Input } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoTooltipComponent extends NestedOption {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get arrowLength() {
        return this._getOption('arrowLength');
    }
    set arrowLength(value) {
        this._setOption('arrowLength', value);
    }
    get border() {
        return this._getOption('border');
    }
    set border(value) {
        this._setOption('border', value);
    }
    get color() {
        return this._getOption('color');
    }
    set color(value) {
        this._setOption('color', value);
    }
    get container() {
        return this._getOption('container');
    }
    set container(value) {
        this._setOption('container', value);
    }
    get contentTemplate() {
        return this._getOption('contentTemplate');
    }
    set contentTemplate(value) {
        this._setOption('contentTemplate', value);
    }
    get cornerRadius() {
        return this._getOption('cornerRadius');
    }
    set cornerRadius(value) {
        this._setOption('cornerRadius', value);
    }
    get customizeTooltip() {
        return this._getOption('customizeTooltip');
    }
    set customizeTooltip(value) {
        this._setOption('customizeTooltip', value);
    }
    get enabled() {
        return this._getOption('enabled');
    }
    set enabled(value) {
        this._setOption('enabled', value);
    }
    get font() {
        return this._getOption('font');
    }
    set font(value) {
        this._setOption('font', value);
    }
    get format() {
        return this._getOption('format');
    }
    set format(value) {
        this._setOption('format', value);
    }
    get interactive() {
        return this._getOption('interactive');
    }
    set interactive(value) {
        this._setOption('interactive', value);
    }
    get opacity() {
        return this._getOption('opacity');
    }
    set opacity(value) {
        this._setOption('opacity', value);
    }
    get paddingLeftRight() {
        return this._getOption('paddingLeftRight');
    }
    set paddingLeftRight(value) {
        this._setOption('paddingLeftRight', value);
    }
    get paddingTopBottom() {
        return this._getOption('paddingTopBottom');
    }
    set paddingTopBottom(value) {
        this._setOption('paddingTopBottom', value);
    }
    get shadow() {
        return this._getOption('shadow');
    }
    set shadow(value) {
        this._setOption('shadow', value);
    }
    get zIndex() {
        return this._getOption('zIndex');
    }
    set zIndex(value) {
        this._setOption('zIndex', value);
    }
    get argumentFormat() {
        return this._getOption('argumentFormat');
    }
    set argumentFormat(value) {
        this._setOption('argumentFormat', value);
    }
    get location() {
        return this._getOption('location');
    }
    set location(value) {
        this._setOption('location', value);
    }
    get shared() {
        return this._getOption('shared');
    }
    set shared(value) {
        this._setOption('shared', value);
    }
    get isShown() {
        return this._getOption('isShown');
    }
    set isShown(value) {
        this._setOption('isShown', value);
    }
    get text() {
        return this._getOption('text');
    }
    set text(value) {
        this._setOption('text', value);
    }
    get position() {
        return this._getOption('position');
    }
    set position(value) {
        this._setOption('position', value);
    }
    get showMode() {
        return this._getOption('showMode');
    }
    set showMode(value) {
        this._setOption('showMode', value);
    }
    get customizeLinkTooltip() {
        return this._getOption('customizeLinkTooltip');
    }
    set customizeLinkTooltip(value) {
        this._setOption('customizeLinkTooltip', value);
    }
    get customizeNodeTooltip() {
        return this._getOption('customizeNodeTooltip');
    }
    set customizeNodeTooltip(value) {
        this._setOption('customizeNodeTooltip', value);
    }
    get linkTooltipTemplate() {
        return this._getOption('linkTooltipTemplate');
    }
    set linkTooltipTemplate(value) {
        this._setOption('linkTooltipTemplate', value);
    }
    get nodeTooltipTemplate() {
        return this._getOption('nodeTooltipTemplate');
    }
    set nodeTooltipTemplate(value) {
        this._setOption('nodeTooltipTemplate', value);
    }
    get _optionPath() {
        return 'tooltip';
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
}
/** @nocollapse */ DxoTooltipComponent.ɵfac = function DxoTooltipComponent_Factory(t) { return new (t || DxoTooltipComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxoTooltipComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoTooltipComponent, selectors: [["dxo-tooltip"]], inputs: { arrowLength: "arrowLength", border: "border", color: "color", container: "container", contentTemplate: "contentTemplate", cornerRadius: "cornerRadius", customizeTooltip: "customizeTooltip", enabled: "enabled", font: "font", format: "format", interactive: "interactive", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", shadow: "shadow", zIndex: "zIndex", argumentFormat: "argumentFormat", location: "location", shared: "shared", isShown: "isShown", text: "text", position: "position", showMode: "showMode", customizeLinkTooltip: "customizeLinkTooltip", customizeNodeTooltip: "customizeNodeTooltip", linkTooltipTemplate: "linkTooltipTemplate", nodeTooltipTemplate: "nodeTooltipTemplate" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTooltipComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoTooltipComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-tooltip',
                template: '',
                styles: [''],
                providers: [NestedOptionHost]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { arrowLength: [{
            type: Input
        }], border: [{
            type: Input
        }], color: [{
            type: Input
        }], container: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }], cornerRadius: [{
            type: Input
        }], customizeTooltip: [{
            type: Input
        }], enabled: [{
            type: Input
        }], font: [{
            type: Input
        }], format: [{
            type: Input
        }], interactive: [{
            type: Input
        }], opacity: [{
            type: Input
        }], paddingLeftRight: [{
            type: Input
        }], paddingTopBottom: [{
            type: Input
        }], shadow: [{
            type: Input
        }], zIndex: [{
            type: Input
        }], argumentFormat: [{
            type: Input
        }], location: [{
            type: Input
        }], shared: [{
            type: Input
        }], isShown: [{
            type: Input
        }], text: [{
            type: Input
        }], position: [{
            type: Input
        }], showMode: [{
            type: Input
        }], customizeLinkTooltip: [{
            type: Input
        }], customizeNodeTooltip: [{
            type: Input
        }], linkTooltipTemplate: [{
            type: Input
        }], nodeTooltipTemplate: [{
            type: Input
        }] }); })();
export class DxoTooltipModule {
}
/** @nocollapse */ DxoTooltipModule.ɵfac = function DxoTooltipModule_Factory(t) { return new (t || DxoTooltipModule)(); };
/** @nocollapse */ DxoTooltipModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxoTooltipModule });
/** @nocollapse */ DxoTooltipModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoTooltipModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoTooltipComponent
                ],
                exports: [
                    DxoTooltipComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxoTooltipModule, { declarations: [DxoTooltipComponent], exports: [DxoTooltipComponent] }); })();
//# sourceMappingURL=data:application/json;base64,