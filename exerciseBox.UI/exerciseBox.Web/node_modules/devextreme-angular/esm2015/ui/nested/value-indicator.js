/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoGaugeIndicator } from './base/gauge-indicator';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoValueIndicatorComponent extends DxoGaugeIndicator {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'valueIndicator';
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
}
/** @nocollapse */ DxoValueIndicatorComponent.ɵfac = function DxoValueIndicatorComponent_Factory(t) { return new (t || DxoValueIndicatorComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxoValueIndicatorComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoValueIndicatorComponent, selectors: [["dxo-value-indicator"]], inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoValueIndicatorComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoValueIndicatorComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-value-indicator',
                template: '',
                styles: [''],
                providers: [NestedOptionHost],
                inputs: [
                    'arrowLength',
                    'backgroundColor',
                    'baseValue',
                    'beginAdaptingAtRadius',
                    'color',
                    'horizontalOrientation',
                    'indentFromCenter',
                    'length',
                    'offset',
                    'palette',
                    'secondColor',
                    'secondFraction',
                    'size',
                    'spindleGapSize',
                    'spindleSize',
                    'text',
                    'type',
                    'verticalOrientation',
                    'width'
                ]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
export class DxoValueIndicatorModule {
}
/** @nocollapse */ DxoValueIndicatorModule.ɵfac = function DxoValueIndicatorModule_Factory(t) { return new (t || DxoValueIndicatorModule)(); };
/** @nocollapse */ DxoValueIndicatorModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxoValueIndicatorModule });
/** @nocollapse */ DxoValueIndicatorModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoValueIndicatorModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoValueIndicatorComponent
                ],
                exports: [
                    DxoValueIndicatorComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxoValueIndicatorModule, { declarations: [DxoValueIndicatorComponent], exports: [DxoValueIndicatorComponent] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtaW5kaWNhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZGlzdC91aS9uZXN0ZWQvdmFsdWUtaW5kaWNhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHO0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUdULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQzs7O0FBOEIzRCxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsaUJBQWlCO0lBTzdELFlBQWdDLGdCQUFrQyxFQUNsRCxVQUE0QjtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUNSLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFWRCxJQUFjLFdBQVc7UUFDckIsT0FBTyxnQkFBZ0IsQ0FBQztJQUM1QixDQUFDO0lBV0QsUUFBUTtRQUNKLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7O3VIQXJCUSwwQkFBMEI7NEdBQTFCLDBCQUEwQiw2bEJBdkJ4QixDQUFDLGdCQUFnQixDQUFDO3VGQXVCcEIsMEJBQTBCO2NBM0J0QyxTQUFTO2VBQUM7Z0JBQ1AsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO2dCQUNaLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dCQUM3QixNQUFNLEVBQUU7b0JBQ0osYUFBYTtvQkFDYixpQkFBaUI7b0JBQ2pCLFdBQVc7b0JBQ1gsdUJBQXVCO29CQUN2QixPQUFPO29CQUNQLHVCQUF1QjtvQkFDdkIsa0JBQWtCO29CQUNsQixRQUFRO29CQUNSLFFBQVE7b0JBQ1IsU0FBUztvQkFDVCxhQUFhO29CQUNiLGdCQUFnQjtvQkFDaEIsTUFBTTtvQkFDTixnQkFBZ0I7b0JBQ2hCLGFBQWE7b0JBQ2IsTUFBTTtvQkFDTixNQUFNO29CQUNOLHFCQUFxQjtvQkFDckIsT0FBTztpQkFDVjthQUNKOztzQkFRZ0IsUUFBUTs7c0JBQUksSUFBSTs7c0JBQ3BCLElBQUk7O0FBMEJqQixNQUFNLE9BQU8sdUJBQXVCOztpSEFBdkIsdUJBQXVCO3dHQUF2Qix1QkFBdUI7O3VGQUF2Qix1QkFBdUI7Y0FSbkMsUUFBUTtlQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWiwwQkFBMEI7aUJBQzNCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCwwQkFBMEI7aUJBQzNCO2FBQ0Y7O3dGQUNZLHVCQUF1QixtQkFsQ3ZCLDBCQUEwQixhQUExQiwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjMuMi40XG4gKiBCdWlsZCBkYXRlOiBNb24gSmFuIDI5IDIwMjRcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDI0IERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXG5cbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cblxuaW1wb3J0IHtcbiAgICBDb21wb25lbnQsXG4gICAgT25Jbml0LFxuICAgIE9uRGVzdHJveSxcbiAgICBOZ01vZHVsZSxcbiAgICBIb3N0LFxuICAgIFNraXBTZWxmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cblxuXG5cbmltcG9ydCB7XG4gICAgTmVzdGVkT3B0aW9uSG9zdCxcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHhvR2F1Z2VJbmRpY2F0b3IgfSBmcm9tICcuL2Jhc2UvZ2F1Z2UtaW5kaWNhdG9yJztcblxuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2R4by12YWx1ZS1pbmRpY2F0b3InLFxuICAgIHRlbXBsYXRlOiAnJyxcbiAgICBzdHlsZXM6IFsnJ10sXG4gICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXG4gICAgaW5wdXRzOiBbXG4gICAgICAgICdhcnJvd0xlbmd0aCcsXG4gICAgICAgICdiYWNrZ3JvdW5kQ29sb3InLFxuICAgICAgICAnYmFzZVZhbHVlJyxcbiAgICAgICAgJ2JlZ2luQWRhcHRpbmdBdFJhZGl1cycsXG4gICAgICAgICdjb2xvcicsXG4gICAgICAgICdob3Jpem9udGFsT3JpZW50YXRpb24nLFxuICAgICAgICAnaW5kZW50RnJvbUNlbnRlcicsXG4gICAgICAgICdsZW5ndGgnLFxuICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgJ3BhbGV0dGUnLFxuICAgICAgICAnc2Vjb25kQ29sb3InLFxuICAgICAgICAnc2Vjb25kRnJhY3Rpb24nLFxuICAgICAgICAnc2l6ZScsXG4gICAgICAgICdzcGluZGxlR2FwU2l6ZScsXG4gICAgICAgICdzcGluZGxlU2l6ZScsXG4gICAgICAgICd0ZXh0JyxcbiAgICAgICAgJ3R5cGUnLFxuICAgICAgICAndmVydGljYWxPcmllbnRhdGlvbicsXG4gICAgICAgICd3aWR0aCdcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIER4b1ZhbHVlSW5kaWNhdG9yQ29tcG9uZW50IGV4dGVuZHMgRHhvR2F1Z2VJbmRpY2F0b3IgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCAge1xuXG4gICAgcHJvdGVjdGVkIGdldCBfb3B0aW9uUGF0aCgpIHtcbiAgICAgICAgcmV0dXJuICd2YWx1ZUluZGljYXRvcic7XG4gICAgfVxuXG5cbiAgICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBASG9zdCgpIHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXG4gICAgICAgICAgICBASG9zdCgpIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLl9hZGRSZWNyZWF0ZWRDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5fYWRkUmVtb3ZlZE9wdGlvbih0aGlzLl9nZXRPcHRpb25QYXRoKCkpO1xuICAgIH1cblxuXG59XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIER4b1ZhbHVlSW5kaWNhdG9yQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBEeG9WYWx1ZUluZGljYXRvckNvbXBvbmVudFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBEeG9WYWx1ZUluZGljYXRvck1vZHVsZSB7IH1cbiJdfQ==