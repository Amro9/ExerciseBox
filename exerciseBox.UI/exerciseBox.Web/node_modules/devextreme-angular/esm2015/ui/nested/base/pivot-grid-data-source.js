/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { NestedOption } from 'devextreme-angular/core';
import { Component, } from '@angular/core';
import * as i0 from "@angular/core";
export class DxoPivotGridDataSource extends NestedOption {
    get fields() {
        return this._getOption('fields');
    }
    set fields(value) {
        this._setOption('fields', value);
    }
    get filter() {
        return this._getOption('filter');
    }
    set filter(value) {
        this._setOption('filter', value);
    }
    get onChanged() {
        return this._getOption('onChanged');
    }
    set onChanged(value) {
        this._setOption('onChanged', value);
    }
    get onFieldsPrepared() {
        return this._getOption('onFieldsPrepared');
    }
    set onFieldsPrepared(value) {
        this._setOption('onFieldsPrepared', value);
    }
    get onLoadError() {
        return this._getOption('onLoadError');
    }
    set onLoadError(value) {
        this._setOption('onLoadError', value);
    }
    get onLoadingChanged() {
        return this._getOption('onLoadingChanged');
    }
    set onLoadingChanged(value) {
        this._setOption('onLoadingChanged', value);
    }
    get remoteOperations() {
        return this._getOption('remoteOperations');
    }
    set remoteOperations(value) {
        this._setOption('remoteOperations', value);
    }
    get retrieveFields() {
        return this._getOption('retrieveFields');
    }
    set retrieveFields(value) {
        this._setOption('retrieveFields', value);
    }
    get store() {
        return this._getOption('store');
    }
    set store(value) {
        this._setOption('store', value);
    }
}
/** @nocollapse */ DxoPivotGridDataSource.ɵfac = /** @pureOrBreakMyCode */ function () { let ɵDxoPivotGridDataSource_BaseFactory; return function DxoPivotGridDataSource_Factory(t) { return (ɵDxoPivotGridDataSource_BaseFactory || (ɵDxoPivotGridDataSource_BaseFactory = i0.ɵɵgetInheritedFactory(DxoPivotGridDataSource)))(t || DxoPivotGridDataSource); }; }();
/** @nocollapse */ DxoPivotGridDataSource.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoPivotGridDataSource, selectors: [["ng-component"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPivotGridDataSource_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoPivotGridDataSource, [{
        type: Component,
        args: [{
                template: ''
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGl2b3QtZ3JpZC1kYXRhLXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2Rpc3QvdWkvbmVzdGVkL2Jhc2UvcGl2b3QtZ3JpZC1kYXRhLXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7R0FXRztBQUVILG9DQUFvQztBQUVwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUNILFNBQVMsR0FDWixNQUFNLGVBQWUsQ0FBQzs7QUFTdkIsTUFBTSxPQUFnQixzQkFBdUIsU0FBUSxZQUFZO0lBQzdELElBQUksTUFBTTtRQUNOLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsS0FBb2dDO1FBQzNnQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNELElBQUksU0FBUyxDQUFDLEtBQWU7UUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQUksZ0JBQWdCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxJQUFJLGdCQUFnQixDQUFDLEtBQWU7UUFDaEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDRCxJQUFJLFdBQVcsQ0FBQyxLQUFlO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNoQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBQ0QsSUFBSSxnQkFBZ0IsQ0FBQyxLQUFlO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQUksZ0JBQWdCO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFDRCxJQUFJLGdCQUFnQixDQUFDLEtBQWM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNELElBQUksY0FBYyxDQUFDLEtBQWM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRCxJQUFJLEtBQUssQ0FBQyxLQUEyRjtRQUNqRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDOztxU0E5RGlCLHNCQUFzQixTQUF0QixzQkFBc0I7d0dBQXRCLHNCQUFzQjt1RkFBdEIsc0JBQXNCO2NBSDNDLFNBQVM7ZUFBQztnQkFDUCxRQUFRLEVBQUUsRUFBRTthQUNmIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIzLjIuNFxuICogQnVpbGQgZGF0ZTogTW9uIEphbiAyOSAyMDI0XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyNCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuXG5pbXBvcnQgeyBOZXN0ZWRPcHRpb24gfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN0b3JlLCBTdG9yZU9wdGlvbnMgfSBmcm9tICdkZXZleHRyZW1lL2RhdGEnO1xuaW1wb3J0IFhtbGFTdG9yZSwgeyBYbWxhU3RvcmVPcHRpb25zIH0gZnJvbSAnZGV2ZXh0cmVtZS91aS9waXZvdF9ncmlkL3htbGFfc3RvcmUnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnZGV2ZXh0cmVtZS91aS93aWRnZXQvdWkud2lkZ2V0JztcblxuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6ICcnXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER4b1Bpdm90R3JpZERhdGFTb3VyY2UgZXh0ZW5kcyBOZXN0ZWRPcHRpb24ge1xuICAgIGdldCBmaWVsZHMoKTogQXJyYXk8YW55IHwgeyBhbGxvd0Nyb3NzR3JvdXBDYWxjdWxhdGlvbj86IGJvb2xlYW4sIGFsbG93RXhwYW5kQWxsPzogYm9vbGVhbiwgYWxsb3dGaWx0ZXJpbmc/OiBib29sZWFuLCBhbGxvd1NvcnRpbmc/OiBib29sZWFuLCBhbGxvd1NvcnRpbmdCeVN1bW1hcnk/OiBib29sZWFuLCBhcmVhPzogc3RyaW5nLCBhcmVhSW5kZXg/OiBudW1iZXIsIGNhbGN1bGF0ZUN1c3RvbVN1bW1hcnk/OiBGdW5jdGlvbiwgY2FsY3VsYXRlU3VtbWFyeVZhbHVlPzogRnVuY3Rpb24sIGNhcHRpb24/OiBzdHJpbmcsIGN1c3RvbWl6ZVRleHQ/OiBGdW5jdGlvbiwgZGF0YUZpZWxkPzogc3RyaW5nLCBkYXRhVHlwZT86IHN0cmluZywgZGlzcGxheUZvbGRlcj86IHN0cmluZywgZXhwYW5kZWQ/OiBib29sZWFuLCBmaWx0ZXJUeXBlPzogc3RyaW5nLCBmaWx0ZXJWYWx1ZXM/OiBBcnJheTxhbnk+LCBmb3JtYXQ/OiBmb3JtYXQgfCBzdHJpbmcsIGdyb3VwSW5kZXg/OiBudW1iZXIsIGdyb3VwSW50ZXJ2YWw/OiBudW1iZXIgfCBzdHJpbmcsIGdyb3VwTmFtZT86IHN0cmluZywgaGVhZGVyRmlsdGVyPzogeyBhbGxvd1NlYXJjaD86IGJvb2xlYW4sIGhlaWdodD86IG51bWJlciwgd2lkdGg/OiBudW1iZXIgfSwgaXNNZWFzdXJlPzogYm9vbGVhbiwgcHJlY2lzaW9uPzogbnVtYmVyLCBydW5uaW5nVG90YWw/OiBzdHJpbmcsIHNlbGVjdG9yPzogRnVuY3Rpb24sIHNob3dHcmFuZFRvdGFscz86IGJvb2xlYW4sIHNob3dUb3RhbHM/OiBib29sZWFuLCBzaG93VmFsdWVzPzogYm9vbGVhbiwgc29ydEJ5Pzogc3RyaW5nLCBzb3J0QnlTdW1tYXJ5RmllbGQ/OiBzdHJpbmcsIHNvcnRCeVN1bW1hcnlQYXRoPzogQXJyYXk8bnVtYmVyIHwgc3RyaW5nPiwgc29ydGluZ01ldGhvZD86IEZ1bmN0aW9uLCBzb3J0T3JkZXI/OiBzdHJpbmcsIHN1bW1hcnlEaXNwbGF5TW9kZT86IHN0cmluZywgc3VtbWFyeVR5cGU/OiBzdHJpbmcsIHZpc2libGU/OiBib29sZWFuLCB3aWR0aD86IG51bWJlciwgd29yZFdyYXBFbmFibGVkPzogYm9vbGVhbiB9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2ZpZWxkcycpO1xuICAgIH1cbiAgICBzZXQgZmllbGRzKHZhbHVlOiBBcnJheTxhbnkgfCB7IGFsbG93Q3Jvc3NHcm91cENhbGN1bGF0aW9uPzogYm9vbGVhbiwgYWxsb3dFeHBhbmRBbGw/OiBib29sZWFuLCBhbGxvd0ZpbHRlcmluZz86IGJvb2xlYW4sIGFsbG93U29ydGluZz86IGJvb2xlYW4sIGFsbG93U29ydGluZ0J5U3VtbWFyeT86IGJvb2xlYW4sIGFyZWE/OiBzdHJpbmcsIGFyZWFJbmRleD86IG51bWJlciwgY2FsY3VsYXRlQ3VzdG9tU3VtbWFyeT86IEZ1bmN0aW9uLCBjYWxjdWxhdGVTdW1tYXJ5VmFsdWU/OiBGdW5jdGlvbiwgY2FwdGlvbj86IHN0cmluZywgY3VzdG9taXplVGV4dD86IEZ1bmN0aW9uLCBkYXRhRmllbGQ/OiBzdHJpbmcsIGRhdGFUeXBlPzogc3RyaW5nLCBkaXNwbGF5Rm9sZGVyPzogc3RyaW5nLCBleHBhbmRlZD86IGJvb2xlYW4sIGZpbHRlclR5cGU/OiBzdHJpbmcsIGZpbHRlclZhbHVlcz86IEFycmF5PGFueT4sIGZvcm1hdD86IGZvcm1hdCB8IHN0cmluZywgZ3JvdXBJbmRleD86IG51bWJlciwgZ3JvdXBJbnRlcnZhbD86IG51bWJlciB8IHN0cmluZywgZ3JvdXBOYW1lPzogc3RyaW5nLCBoZWFkZXJGaWx0ZXI/OiB7IGFsbG93U2VhcmNoPzogYm9vbGVhbiwgaGVpZ2h0PzogbnVtYmVyLCB3aWR0aD86IG51bWJlciB9LCBpc01lYXN1cmU/OiBib29sZWFuLCBwcmVjaXNpb24/OiBudW1iZXIsIHJ1bm5pbmdUb3RhbD86IHN0cmluZywgc2VsZWN0b3I/OiBGdW5jdGlvbiwgc2hvd0dyYW5kVG90YWxzPzogYm9vbGVhbiwgc2hvd1RvdGFscz86IGJvb2xlYW4sIHNob3dWYWx1ZXM/OiBib29sZWFuLCBzb3J0Qnk/OiBzdHJpbmcsIHNvcnRCeVN1bW1hcnlGaWVsZD86IHN0cmluZywgc29ydEJ5U3VtbWFyeVBhdGg/OiBBcnJheTxudW1iZXIgfCBzdHJpbmc+LCBzb3J0aW5nTWV0aG9kPzogRnVuY3Rpb24sIHNvcnRPcmRlcj86IHN0cmluZywgc3VtbWFyeURpc3BsYXlNb2RlPzogc3RyaW5nLCBzdW1tYXJ5VHlwZT86IHN0cmluZywgdmlzaWJsZT86IGJvb2xlYW4sIHdpZHRoPzogbnVtYmVyLCB3b3JkV3JhcEVuYWJsZWQ/OiBib29sZWFuIH0+KSB7XG4gICAgICAgIHRoaXMuX3NldE9wdGlvbignZmllbGRzJywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBmaWx0ZXIoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignZmlsdGVyJyk7XG4gICAgfVxuICAgIHNldCBmaWx0ZXIodmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2ZpbHRlcicsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgb25DaGFuZ2VkKCk6IEZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignb25DaGFuZ2VkJyk7XG4gICAgfVxuICAgIHNldCBvbkNoYW5nZWQodmFsdWU6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuX3NldE9wdGlvbignb25DaGFuZ2VkJywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBvbkZpZWxkc1ByZXBhcmVkKCk6IEZ1bmN0aW9uIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignb25GaWVsZHNQcmVwYXJlZCcpO1xuICAgIH1cbiAgICBzZXQgb25GaWVsZHNQcmVwYXJlZCh2YWx1ZTogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdvbkZpZWxkc1ByZXBhcmVkJywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBvbkxvYWRFcnJvcigpOiBGdW5jdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ29uTG9hZEVycm9yJyk7XG4gICAgfVxuICAgIHNldCBvbkxvYWRFcnJvcih2YWx1ZTogRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdvbkxvYWRFcnJvcicsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgb25Mb2FkaW5nQ2hhbmdlZCgpOiBGdW5jdGlvbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ29uTG9hZGluZ0NoYW5nZWQnKTtcbiAgICB9XG4gICAgc2V0IG9uTG9hZGluZ0NoYW5nZWQodmFsdWU6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHRoaXMuX3NldE9wdGlvbignb25Mb2FkaW5nQ2hhbmdlZCcsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgcmVtb3RlT3BlcmF0aW9ucygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbigncmVtb3RlT3BlcmF0aW9ucycpO1xuICAgIH1cbiAgICBzZXQgcmVtb3RlT3BlcmF0aW9ucyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ3JlbW90ZU9wZXJhdGlvbnMnLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0IHJldHJpZXZlRmllbGRzKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdyZXRyaWV2ZUZpZWxkcycpO1xuICAgIH1cbiAgICBzZXQgcmV0cmlldmVGaWVsZHModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdyZXRyaWV2ZUZpZWxkcycsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgc3RvcmUoKTogU3RvcmUgfCBTdG9yZU9wdGlvbnMgfCBYbWxhU3RvcmUgfCBYbWxhU3RvcmVPcHRpb25zIHwgeyB0eXBlPzogc3RyaW5nIH0gfCBBcnJheTxhbnk+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignc3RvcmUnKTtcbiAgICB9XG4gICAgc2V0IHN0b3JlKHZhbHVlOiBTdG9yZSB8IFN0b3JlT3B0aW9ucyB8IFhtbGFTdG9yZSB8IFhtbGFTdG9yZU9wdGlvbnMgfCB7IHR5cGU/OiBzdHJpbmcgfSB8IEFycmF5PGFueT4pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdzdG9yZScsIHZhbHVlKTtcbiAgICB9XG59XG4iXX0=