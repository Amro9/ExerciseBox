/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { NestedOption } from 'devextreme-angular/core';
import { Component, } from '@angular/core';
import * as i0 from "@angular/core";
export class DxoPositionConfig extends NestedOption {
    get at() {
        return this._getOption('at');
    }
    set at(value) {
        this._setOption('at', value);
    }
    get boundary() {
        return this._getOption('boundary');
    }
    set boundary(value) {
        this._setOption('boundary', value);
    }
    get boundaryOffset() {
        return this._getOption('boundaryOffset');
    }
    set boundaryOffset(value) {
        this._setOption('boundaryOffset', value);
    }
    get collision() {
        return this._getOption('collision');
    }
    set collision(value) {
        this._setOption('collision', value);
    }
    get my() {
        return this._getOption('my');
    }
    set my(value) {
        this._setOption('my', value);
    }
    get of() {
        return this._getOption('of');
    }
    set of(value) {
        this._setOption('of', value);
    }
    get offset() {
        return this._getOption('offset');
    }
    set offset(value) {
        this._setOption('offset', value);
    }
}
/** @nocollapse */ DxoPositionConfig.ɵfac = /** @pureOrBreakMyCode */ function () { let ɵDxoPositionConfig_BaseFactory; return function DxoPositionConfig_Factory(t) { return (ɵDxoPositionConfig_BaseFactory || (ɵDxoPositionConfig_BaseFactory = i0.ɵɵgetInheritedFactory(DxoPositionConfig)))(t || DxoPositionConfig); }; }();
/** @nocollapse */ DxoPositionConfig.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoPositionConfig, selectors: [["ng-component"]], features: [i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoPositionConfig_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoPositionConfig, [{
        type: Component,
        args: [{
                template: ''
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zaXRpb24tY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZGlzdC91aS9uZXN0ZWQvYmFzZS9wb3NpdGlvbi1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxvQ0FBb0M7QUFFcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFDSCxTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7O0FBU3ZCLE1BQU0sT0FBZ0IsaUJBQWtCLFNBQVEsWUFBWTtJQUN4RCxJQUFJLEVBQUU7UUFDRixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNELElBQUksRUFBRSxDQUFDLEtBQTZFO1FBQ2hGLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNELElBQUksUUFBUSxDQUFDLEtBQTJDO1FBQ3BELElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxJQUFJLGNBQWM7UUFDZCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0QsSUFBSSxjQUFjLENBQUMsS0FBMEM7UUFDekQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFDRCxJQUFJLFNBQVMsQ0FBQyxLQUE0RjtRQUN0RyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBSSxFQUFFO1FBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLEVBQUUsQ0FBQyxLQUE2RTtRQUNoRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxFQUFFO1FBQ0YsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDRCxJQUFJLEVBQUUsQ0FBQyxLQUEyQztRQUM5QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFDRCxJQUFJLE1BQU0sQ0FBQyxLQUEwQztRQUNqRCxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs0UUFoRGlCLGlCQUFpQixTQUFqQixpQkFBaUI7bUdBQWpCLGlCQUFpQjt1RkFBakIsaUJBQWlCO2NBSHRDLFNBQVM7ZUFBQztnQkFDUCxRQUFRLEVBQUUsRUFBRTthQUNmIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIzLjIuNFxuICogQnVpbGQgZGF0ZTogTW9uIEphbiAyOSAyMDI0XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyNCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuXG5pbXBvcnQgeyBOZXN0ZWRPcHRpb24gfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENvbGxpc2lvblJlc29sdXRpb24sIENvbGxpc2lvblJlc29sdXRpb25Db21iaW5hdGlvbiB9IGZyb20gJ2RldmV4dHJlbWUvYW5pbWF0aW9uL3Bvc2l0aW9uJztcbmltcG9ydCB7IEhvcml6b250YWxBbGlnbm1lbnQsIFBvc2l0aW9uQWxpZ25tZW50LCBWZXJ0aWNhbEFsaWdubWVudCB9IGZyb20gJ2RldmV4dHJlbWUvY29tbW9uJztcbmltcG9ydCB7IFVzZXJEZWZpbmVkRWxlbWVudCB9IGZyb20gJ2RldmV4dHJlbWUvY29yZS9lbGVtZW50JztcblxuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6ICcnXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIER4b1Bvc2l0aW9uQ29uZmlnIGV4dGVuZHMgTmVzdGVkT3B0aW9uIHtcbiAgICBnZXQgYXQoKTogUG9zaXRpb25BbGlnbm1lbnQgfCB7IHg/OiBIb3Jpem9udGFsQWxpZ25tZW50LCB5PzogVmVydGljYWxBbGlnbm1lbnQgfSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2F0Jyk7XG4gICAgfVxuICAgIHNldCBhdCh2YWx1ZTogUG9zaXRpb25BbGlnbm1lbnQgfCB7IHg/OiBIb3Jpem9udGFsQWxpZ25tZW50LCB5PzogVmVydGljYWxBbGlnbm1lbnQgfSkge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2F0JywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBib3VuZGFyeSgpOiBzdHJpbmcgfCBVc2VyRGVmaW5lZEVsZW1lbnQgfCBXaW5kb3cge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdib3VuZGFyeScpO1xuICAgIH1cbiAgICBzZXQgYm91bmRhcnkodmFsdWU6IHN0cmluZyB8IFVzZXJEZWZpbmVkRWxlbWVudCB8IFdpbmRvdykge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2JvdW5kYXJ5JywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBib3VuZGFyeU9mZnNldCgpOiBzdHJpbmcgfCB7IHg/OiBudW1iZXIsIHk/OiBudW1iZXIgfSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ2JvdW5kYXJ5T2Zmc2V0Jyk7XG4gICAgfVxuICAgIHNldCBib3VuZGFyeU9mZnNldCh2YWx1ZTogc3RyaW5nIHwgeyB4PzogbnVtYmVyLCB5PzogbnVtYmVyIH0pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdib3VuZGFyeU9mZnNldCcsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgY29sbGlzaW9uKCk6IENvbGxpc2lvblJlc29sdXRpb25Db21iaW5hdGlvbiB8IHsgeD86IENvbGxpc2lvblJlc29sdXRpb24sIHk/OiBDb2xsaXNpb25SZXNvbHV0aW9uIH0ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdjb2xsaXNpb24nKTtcbiAgICB9XG4gICAgc2V0IGNvbGxpc2lvbih2YWx1ZTogQ29sbGlzaW9uUmVzb2x1dGlvbkNvbWJpbmF0aW9uIHwgeyB4PzogQ29sbGlzaW9uUmVzb2x1dGlvbiwgeT86IENvbGxpc2lvblJlc29sdXRpb24gfSkge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ2NvbGxpc2lvbicsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXQgbXkoKTogUG9zaXRpb25BbGlnbm1lbnQgfCB7IHg/OiBIb3Jpem9udGFsQWxpZ25tZW50LCB5PzogVmVydGljYWxBbGlnbm1lbnQgfSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcHRpb24oJ215Jyk7XG4gICAgfVxuICAgIHNldCBteSh2YWx1ZTogUG9zaXRpb25BbGlnbm1lbnQgfCB7IHg/OiBIb3Jpem9udGFsQWxpZ25tZW50LCB5PzogVmVydGljYWxBbGlnbm1lbnQgfSkge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ215JywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBvZigpOiBzdHJpbmcgfCBVc2VyRGVmaW5lZEVsZW1lbnQgfCBXaW5kb3cge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdvZicpO1xuICAgIH1cbiAgICBzZXQgb2YodmFsdWU6IHN0cmluZyB8IFVzZXJEZWZpbmVkRWxlbWVudCB8IFdpbmRvdykge1xuICAgICAgICB0aGlzLl9zZXRPcHRpb24oJ29mJywgdmFsdWUpO1xuICAgIH1cblxuICAgIGdldCBvZmZzZXQoKTogc3RyaW5nIHwgeyB4PzogbnVtYmVyLCB5PzogbnVtYmVyIH0ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3B0aW9uKCdvZmZzZXQnKTtcbiAgICB9XG4gICAgc2V0IG9mZnNldCh2YWx1ZTogc3RyaW5nIHwgeyB4PzogbnVtYmVyLCB5PzogbnVtYmVyIH0pIHtcbiAgICAgICAgdGhpcy5fc2V0T3B0aW9uKCdvZmZzZXQnLCB2YWx1ZSk7XG4gICAgfVxufVxuIl19