/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, Output, EventEmitter, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoTabPanelOptions } from './base/tab-panel-options';
import { DxiItemComponent } from './item-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxoTabPanelOptionsComponent extends DxoTabPanelOptions {
    constructor(parentOptionHost, optionHost) {
        super();
        this._createEventEmitters([
            { emit: 'itemsChange' },
            { emit: 'selectedIndexChange' },
            { emit: 'selectedItemChange' }
        ]);
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'tabPanelOptions';
    }
    get itemsChildren() {
        return this._getOption('items');
    }
    set itemsChildren(value) {
        this.setChildren('items', value);
    }
    ngOnInit() {
        this._addRecreatedComponent();
    }
    ngOnDestroy() {
        this._addRemovedOption(this._getOptionPath());
    }
}
/** @nocollapse */ DxoTabPanelOptionsComponent.ɵfac = function DxoTabPanelOptionsComponent_Factory(t) { return new (t || DxoTabPanelOptionsComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxoTabPanelOptionsComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxoTabPanelOptionsComponent, selectors: [["dxo-tab-panel-options"]], contentQueries: function DxoTabPanelOptionsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, DxiItemComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.itemsChildren = _t);
    } }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", animationEnabled: "animationEnabled", dataSource: "dataSource", deferRendering: "deferRendering", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", iconPosition: "iconPosition", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", itemTitleTemplate: "itemTitleTemplate", loop: "loop", noDataText: "noDataText", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", onTitleClick: "onTitleClick", onTitleHold: "onTitleHold", onTitleRendered: "onTitleRendered", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", scrollByContent: "scrollByContent", scrollingEnabled: "scrollingEnabled", selectedIndex: "selectedIndex", selectedItem: "selectedItem", showNavButtons: "showNavButtons", stylingMode: "stylingMode", swipeEnabled: "swipeEnabled", tabIndex: "tabIndex", tabsPosition: "tabsPosition", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange", selectedIndexChange: "selectedIndexChange", selectedItemChange: "selectedItemChange" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoTabPanelOptionsComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoTabPanelOptionsComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-tab-panel-options',
                template: '',
                styles: [''],
                providers: [NestedOptionHost],
                inputs: [
                    'accessKey',
                    'activeStateEnabled',
                    'animationEnabled',
                    'dataSource',
                    'deferRendering',
                    'disabled',
                    'elementAttr',
                    'focusStateEnabled',
                    'height',
                    'hint',
                    'hoverStateEnabled',
                    'iconPosition',
                    'itemHoldTimeout',
                    'items',
                    'itemTemplate',
                    'itemTitleTemplate',
                    'loop',
                    'noDataText',
                    'onContentReady',
                    'onDisposing',
                    'onInitialized',
                    'onItemClick',
                    'onItemContextMenu',
                    'onItemHold',
                    'onItemRendered',
                    'onOptionChanged',
                    'onSelectionChanged',
                    'onTitleClick',
                    'onTitleHold',
                    'onTitleRendered',
                    'repaintChangesOnly',
                    'rtlEnabled',
                    'scrollByContent',
                    'scrollingEnabled',
                    'selectedIndex',
                    'selectedItem',
                    'showNavButtons',
                    'stylingMode',
                    'swipeEnabled',
                    'tabIndex',
                    'tabsPosition',
                    'visible',
                    'width'
                ]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { itemsChange: [{
            type: Output
        }], selectedIndexChange: [{
            type: Output
        }], selectedItemChange: [{
            type: Output
        }], itemsChildren: [{
            type: ContentChildren,
            args: [forwardRef(() => DxiItemComponent)]
        }] }); })();
export class DxoTabPanelOptionsModule {
}
/** @nocollapse */ DxoTabPanelOptionsModule.ɵfac = function DxoTabPanelOptionsModule_Factory(t) { return new (t || DxoTabPanelOptionsModule)(); };
/** @nocollapse */ DxoTabPanelOptionsModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxoTabPanelOptionsModule });
/** @nocollapse */ DxoTabPanelOptionsModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxoTabPanelOptionsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoTabPanelOptionsComponent
                ],
                exports: [
                    DxoTabPanelOptionsComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxoTabPanelOptionsModule, { declarations: [DxoTabPanelOptionsComponent], exports: [DxoTabPanelOptionsComponent] }); })();
//# sourceMappingURL=data:application/json;base64,