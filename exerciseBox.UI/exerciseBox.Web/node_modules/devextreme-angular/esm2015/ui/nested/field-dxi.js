/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiFilterBuilderField } from './base/filter-builder-field-dxi';
import * as i0 from "@angular/core";
import * as i1 from "devextreme-angular/core";
export class DxiFieldComponent extends DxiFilterBuilderField {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'fields';
    }
    ngOnDestroy() {
        this._deleteRemovedOptions(this._fullOptionPath());
    }
}
/** @nocollapse */ DxiFieldComponent.ɵfac = function DxiFieldComponent_Factory(t) { return new (t || DxiFieldComponent)(i0.ɵɵdirectiveInject(i1.NestedOptionHost, 5), i0.ɵɵdirectiveInject(i1.NestedOptionHost, 1)); };
/** @nocollapse */ DxiFieldComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: DxiFieldComponent, selectors: [["dxi-field"]], inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editorOptions: "editorOptions", editorTemplate: "editorTemplate", falseText: "falseText", filterOperations: "filterOperations", format: "format", lookup: "lookup", name: "name", trueText: "trueText", allowCrossGroupCalculation: "allowCrossGroupCalculation", allowExpandAll: "allowExpandAll", allowFiltering: "allowFiltering", allowSorting: "allowSorting", allowSortingBySummary: "allowSortingBySummary", area: "area", areaIndex: "areaIndex", calculateCustomSummary: "calculateCustomSummary", calculateSummaryValue: "calculateSummaryValue", displayFolder: "displayFolder", expanded: "expanded", filterType: "filterType", filterValues: "filterValues", groupIndex: "groupIndex", groupInterval: "groupInterval", groupName: "groupName", headerFilter: "headerFilter", isMeasure: "isMeasure", precision: "precision", runningTotal: "runningTotal", selector: "selector", showGrandTotals: "showGrandTotals", showTotals: "showTotals", showValues: "showValues", sortBy: "sortBy", sortBySummaryField: "sortBySummaryField", sortBySummaryPath: "sortBySummaryPath", sortingMethod: "sortingMethod", sortOrder: "sortOrder", summaryDisplayMode: "summaryDisplayMode", summaryType: "summaryType", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, features: [i0.ɵɵProvidersFeature([NestedOptionHost]), i0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiFieldComponent_Template(rf, ctx) { }, styles: [""] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxiFieldComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-field',
                template: '',
                styles: [''],
                providers: [NestedOptionHost],
                inputs: [
                    'calculateFilterExpression',
                    'caption',
                    'customizeText',
                    'dataField',
                    'dataType',
                    'editorOptions',
                    'editorTemplate',
                    'falseText',
                    'filterOperations',
                    'format',
                    'lookup',
                    'name',
                    'trueText',
                    'allowCrossGroupCalculation',
                    'allowExpandAll',
                    'allowFiltering',
                    'allowSorting',
                    'allowSortingBySummary',
                    'area',
                    'areaIndex',
                    'calculateCustomSummary',
                    'calculateSummaryValue',
                    'displayFolder',
                    'expanded',
                    'filterType',
                    'filterValues',
                    'groupIndex',
                    'groupInterval',
                    'groupName',
                    'headerFilter',
                    'isMeasure',
                    'precision',
                    'runningTotal',
                    'selector',
                    'showGrandTotals',
                    'showTotals',
                    'showValues',
                    'sortBy',
                    'sortBySummaryField',
                    'sortBySummaryPath',
                    'sortingMethod',
                    'sortOrder',
                    'summaryDisplayMode',
                    'summaryType',
                    'visible',
                    'width',
                    'wordWrapEnabled'
                ]
            }]
    }], function () { return [{ type: i1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: i1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
export class DxiFieldModule {
}
/** @nocollapse */ DxiFieldModule.ɵfac = function DxiFieldModule_Factory(t) { return new (t || DxiFieldModule)(); };
/** @nocollapse */ DxiFieldModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxiFieldModule });
/** @nocollapse */ DxiFieldModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxiFieldModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiFieldComponent
                ],
                exports: [
                    DxiFieldComponent
                ],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(DxiFieldModule, { declarations: [DxiFieldComponent], exports: [DxiFieldComponent] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtZHhpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZGlzdC91aS9uZXN0ZWQvZmllbGQtZHhpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHO0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUNULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQzs7O0FBMER4RSxNQUFNLE9BQU8saUJBQWtCLFNBQVEscUJBQXFCO0lBT3hELFlBQWdDLGdCQUFrQyxFQUNsRCxVQUE0QjtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUNSLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFWRCxJQUFjLFdBQVc7UUFDckIsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQVlELFdBQVc7UUFDUCxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7cUdBbEJRLGlCQUFpQjttR0FBakIsaUJBQWlCLHE4Q0FuRGYsQ0FBQyxnQkFBZ0IsQ0FBQzt1RkFtRHBCLGlCQUFpQjtjQXZEN0IsU0FBUztlQUFDO2dCQUNQLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixRQUFRLEVBQUUsRUFBRTtnQkFDWixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUM7Z0JBQ1osU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzdCLE1BQU0sRUFBRTtvQkFDSiwyQkFBMkI7b0JBQzNCLFNBQVM7b0JBQ1QsZUFBZTtvQkFDZixXQUFXO29CQUNYLFVBQVU7b0JBQ1YsZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLFdBQVc7b0JBQ1gsa0JBQWtCO29CQUNsQixRQUFRO29CQUNSLFFBQVE7b0JBQ1IsTUFBTTtvQkFDTixVQUFVO29CQUNWLDRCQUE0QjtvQkFDNUIsZ0JBQWdCO29CQUNoQixnQkFBZ0I7b0JBQ2hCLGNBQWM7b0JBQ2QsdUJBQXVCO29CQUN2QixNQUFNO29CQUNOLFdBQVc7b0JBQ1gsd0JBQXdCO29CQUN4Qix1QkFBdUI7b0JBQ3ZCLGVBQWU7b0JBQ2YsVUFBVTtvQkFDVixZQUFZO29CQUNaLGNBQWM7b0JBQ2QsWUFBWTtvQkFDWixlQUFlO29CQUNmLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxXQUFXO29CQUNYLFdBQVc7b0JBQ1gsY0FBYztvQkFDZCxVQUFVO29CQUNWLGlCQUFpQjtvQkFDakIsWUFBWTtvQkFDWixZQUFZO29CQUNaLFFBQVE7b0JBQ1Isb0JBQW9CO29CQUNwQixtQkFBbUI7b0JBQ25CLGVBQWU7b0JBQ2YsV0FBVztvQkFDWCxvQkFBb0I7b0JBQ3BCLGFBQWE7b0JBQ2IsU0FBUztvQkFDVCxPQUFPO29CQUNQLGlCQUFpQjtpQkFDcEI7YUFDSjs7c0JBUWdCLFFBQVE7O3NCQUFJLElBQUk7O3NCQUNwQixJQUFJOztBQXNCakIsTUFBTSxPQUFPLGNBQWM7OytGQUFkLGNBQWM7K0ZBQWQsY0FBYzs7dUZBQWQsY0FBYztjQVIxQixRQUFRO2VBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLGlCQUFpQjtpQkFDbEI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLGlCQUFpQjtpQkFDbEI7YUFDRjs7d0ZBQ1ksY0FBYyxtQkE5QmQsaUJBQWlCLGFBQWpCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKiBWZXJzaW9uOiAyMy4yLjRcbiAqIEJ1aWxkIGRhdGU6IE1vbiBKYW4gMjkgMjAyNFxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjQgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cblxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xuXG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBOZ01vZHVsZSxcbiAgICBIb3N0LFxuICAgIFNraXBTZWxmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cblxuXG5cbmltcG9ydCB7XG4gICAgTmVzdGVkT3B0aW9uSG9zdCxcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHhpRmlsdGVyQnVpbGRlckZpZWxkIH0gZnJvbSAnLi9iYXNlL2ZpbHRlci1idWlsZGVyLWZpZWxkLWR4aSc7XG5cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdkeGktZmllbGQnLFxuICAgIHRlbXBsYXRlOiAnJyxcbiAgICBzdHlsZXM6IFsnJ10sXG4gICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXG4gICAgaW5wdXRzOiBbXG4gICAgICAgICdjYWxjdWxhdGVGaWx0ZXJFeHByZXNzaW9uJyxcbiAgICAgICAgJ2NhcHRpb24nLFxuICAgICAgICAnY3VzdG9taXplVGV4dCcsXG4gICAgICAgICdkYXRhRmllbGQnLFxuICAgICAgICAnZGF0YVR5cGUnLFxuICAgICAgICAnZWRpdG9yT3B0aW9ucycsXG4gICAgICAgICdlZGl0b3JUZW1wbGF0ZScsXG4gICAgICAgICdmYWxzZVRleHQnLFxuICAgICAgICAnZmlsdGVyT3BlcmF0aW9ucycsXG4gICAgICAgICdmb3JtYXQnLFxuICAgICAgICAnbG9va3VwJyxcbiAgICAgICAgJ25hbWUnLFxuICAgICAgICAndHJ1ZVRleHQnLFxuICAgICAgICAnYWxsb3dDcm9zc0dyb3VwQ2FsY3VsYXRpb24nLFxuICAgICAgICAnYWxsb3dFeHBhbmRBbGwnLFxuICAgICAgICAnYWxsb3dGaWx0ZXJpbmcnLFxuICAgICAgICAnYWxsb3dTb3J0aW5nJyxcbiAgICAgICAgJ2FsbG93U29ydGluZ0J5U3VtbWFyeScsXG4gICAgICAgICdhcmVhJyxcbiAgICAgICAgJ2FyZWFJbmRleCcsXG4gICAgICAgICdjYWxjdWxhdGVDdXN0b21TdW1tYXJ5JyxcbiAgICAgICAgJ2NhbGN1bGF0ZVN1bW1hcnlWYWx1ZScsXG4gICAgICAgICdkaXNwbGF5Rm9sZGVyJyxcbiAgICAgICAgJ2V4cGFuZGVkJyxcbiAgICAgICAgJ2ZpbHRlclR5cGUnLFxuICAgICAgICAnZmlsdGVyVmFsdWVzJyxcbiAgICAgICAgJ2dyb3VwSW5kZXgnLFxuICAgICAgICAnZ3JvdXBJbnRlcnZhbCcsXG4gICAgICAgICdncm91cE5hbWUnLFxuICAgICAgICAnaGVhZGVyRmlsdGVyJyxcbiAgICAgICAgJ2lzTWVhc3VyZScsXG4gICAgICAgICdwcmVjaXNpb24nLFxuICAgICAgICAncnVubmluZ1RvdGFsJyxcbiAgICAgICAgJ3NlbGVjdG9yJyxcbiAgICAgICAgJ3Nob3dHcmFuZFRvdGFscycsXG4gICAgICAgICdzaG93VG90YWxzJyxcbiAgICAgICAgJ3Nob3dWYWx1ZXMnLFxuICAgICAgICAnc29ydEJ5JyxcbiAgICAgICAgJ3NvcnRCeVN1bW1hcnlGaWVsZCcsXG4gICAgICAgICdzb3J0QnlTdW1tYXJ5UGF0aCcsXG4gICAgICAgICdzb3J0aW5nTWV0aG9kJyxcbiAgICAgICAgJ3NvcnRPcmRlcicsXG4gICAgICAgICdzdW1tYXJ5RGlzcGxheU1vZGUnLFxuICAgICAgICAnc3VtbWFyeVR5cGUnLFxuICAgICAgICAndmlzaWJsZScsXG4gICAgICAgICd3aWR0aCcsXG4gICAgICAgICd3b3JkV3JhcEVuYWJsZWQnXG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBEeGlGaWVsZENvbXBvbmVudCBleHRlbmRzIER4aUZpbHRlckJ1aWxkZXJGaWVsZCB7XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IF9vcHRpb25QYXRoKCkge1xuICAgICAgICByZXR1cm4gJ2ZpZWxkcyc7XG4gICAgfVxuXG5cbiAgICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBASG9zdCgpIHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXG4gICAgICAgICAgICBASG9zdCgpIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cblxuXG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2RlbGV0ZVJlbW92ZWRPcHRpb25zKHRoaXMuX2Z1bGxPcHRpb25QYXRoKCkpO1xuICAgIH1cblxufVxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBEeGlGaWVsZENvbXBvbmVudFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgRHhpRmllbGRDb21wb25lbnRcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgRHhpRmllbGRNb2R1bGUgeyB9XG4iXX0=