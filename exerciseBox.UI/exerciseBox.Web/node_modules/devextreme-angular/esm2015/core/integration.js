/*!
 * devextreme-angular
 * Version: 23.2.4
 * Build date: Mon Jan 29 2024
 *
 * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/* tslint:disable:max-line-length */
import { NgModule, Inject, NgZone, Optional, VERSION, } from '@angular/core';
import { DOCUMENT, XhrFactory } from '@angular/common';
import httpRequest from 'devextreme/core/http_request';
import domAdapter from 'devextreme/core/dom_adapter';
import readyCallbacks from 'devextreme/core/utils/ready_callbacks';
import eventsEngine from 'devextreme/events/core/events_engine';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
let originalAdd;
let callbacks = [];
let readyCallbackAdd = function (callback) {
    if (!originalAdd) {
        originalAdd = this.callBase.bind(this);
    }
    callbacks.push(callback);
};
readyCallbacks.inject({
    add(callback) {
        return readyCallbackAdd.call(this, callback);
    },
});
let doInjections = (document, ngZone, xhrFactory) => {
    if (Number(VERSION.major) < 12) {
        console.warn('Your version of Angular is not supported. Please update your project to version 12 or later.'
            + ' Please refer to the Angular Update Guide for more information: https://update.angular.io');
    }
    domAdapter.inject({
        _document: document,
        listen(...args) {
            const eventName = args[1];
            if (outsideZoneEvents.includes(eventName)) {
                return ngZone.runOutsideAngular(() => this.callBase.apply(this, args));
            }
            if (ngZone.isStable && insideZoneEvents.includes(eventName)) {
                return ngZone.run(() => this.callBase.apply(this, args));
            }
            return this.callBase.apply(this, args);
        },
        isElementNode(element) {
            return element && element.nodeType === 1;
        },
        isTextNode(element) {
            return element && element.nodeType === 3;
        },
        isDocument(element) {
            return element && element.nodeType === 9;
        },
    });
    httpRequest.inject({
        getXhr() {
            if (!xhrFactory) {
                return this.callBase.apply(this);
            }
            const _xhr = xhrFactory.build();
            if (!('withCredentials' in _xhr)) {
                _xhr.withCredentials = false;
            }
            return _xhr;
        },
    });
    const runReadyCallbacksInZone = () => {
        ngZone.run(() => {
            eventsEngine.set({});
            callbacks.forEach((callback) => originalAdd.call(null, callback));
            callbacks = [];
            readyCallbacks.fire();
        });
    };
    runReadyCallbacksInZone();
    readyCallbackAdd = (callback) => ngZone.run(() => callback());
    doInjections = runReadyCallbacksInZone;
};
export class DxIntegrationModule {
    constructor(document, ngZone, xhrFactory) {
        doInjections(document, ngZone, xhrFactory);
    }
}
/** @nocollapse */ DxIntegrationModule.ɵfac = function DxIntegrationModule_Factory(t) { return new (t || DxIntegrationModule)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.XhrFactory, 8)); };
/** @nocollapse */ DxIntegrationModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: DxIntegrationModule });
/** @nocollapse */ DxIntegrationModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(DxIntegrationModule, [{
        type: NgModule,
        args: [{}]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i0.NgZone }, { type: i1.XhrFactory, decorators: [{
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZWdyYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9kaXN0L2NvcmUvaW50ZWdyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7QUFFSCxvQ0FBb0M7QUFDcEMsT0FBTyxFQUNMLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLEdBQzVDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDdkQsT0FBTyxXQUFXLE1BQU0sOEJBQThCLENBQUM7QUFFdkQsT0FBTyxVQUFVLE1BQU0sNkJBQTZCLENBQUM7QUFDckQsT0FBTyxjQUFjLE1BQU0sdUNBQXVDLENBQUM7QUFDbkUsT0FBTyxZQUFZLE1BQU0sc0NBQXNDLENBQUM7OztBQUVoRSxNQUFNLGlCQUFpQixHQUFHLENBQUMsV0FBVyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUNqRSxNQUFNLGdCQUFnQixHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBRXJGLElBQUksV0FBVyxDQUFDO0FBQ2hCLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFJLGdCQUFnQixHQUFHLFVBQVUsUUFBUTtJQUN2QyxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN4QztJQUNELFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRUYsY0FBYyxDQUFDLE1BQU0sQ0FBQztJQUNwQixHQUFHLENBQUMsUUFBUTtRQUNWLE9BQU8sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsSUFBSSxZQUFZLEdBQUcsQ0FBQyxRQUFhLEVBQUUsTUFBYyxFQUFFLFVBQXNCLEVBQUUsRUFBRTtJQUMzRSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxFQUFFO1FBQzlCLE9BQU8sQ0FBQyxJQUFJLENBQUMsOEZBQThGO2NBQ3JHLDJGQUEyRixDQUFDLENBQUM7S0FDcEc7SUFFRCxVQUFVLENBQUMsTUFBTSxDQUFDO1FBQ2hCLFNBQVMsRUFBRSxRQUFRO1FBRW5CLE1BQU0sQ0FBQyxHQUFHLElBQUk7WUFDWixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsSUFBSSxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3hFO1lBRUQsSUFBSSxNQUFNLENBQUMsUUFBUSxJQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDM0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQzFEO1lBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUVELGFBQWEsQ0FBQyxPQUFPO1lBQ25CLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUFDO1FBQzNDLENBQUM7UUFFRCxVQUFVLENBQUMsT0FBTztZQUNoQixPQUFPLE9BQU8sSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLENBQUMsQ0FBQztRQUMzQyxDQUFDO1FBRUQsVUFBVSxDQUFDLE9BQU87WUFDaEIsT0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUM7UUFDM0MsQ0FBQztLQUNGLENBQUMsQ0FBQztJQUVILFdBQVcsQ0FBQyxNQUFNLENBQUM7UUFDakIsTUFBTTtZQUNKLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNsQztZQUNELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsRUFBRTtnQkFDL0IsSUFBWSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7YUFDdkM7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FDRixDQUFDLENBQUM7SUFFSCxNQUFNLHVCQUF1QixHQUFHLEdBQUcsRUFBRTtRQUNuQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNkLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckIsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNsRSxTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ2YsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRUYsdUJBQXVCLEVBQUUsQ0FBQztJQUUxQixnQkFBZ0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzlELFlBQVksR0FBRyx1QkFBdUIsQ0FBQztBQUN6QyxDQUFDLENBQUM7QUFHRixNQUFNLE9BQU8sbUJBQW1CO0lBQzlCLFlBQThCLFFBQWEsRUFBRSxNQUFjLEVBQWMsVUFBc0I7UUFDN0YsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7eUdBSFUsbUJBQW1CLGNBQ1YsUUFBUTtvR0FEakIsbUJBQW1COzt1RkFBbkIsbUJBQW1CO2NBRC9CLFFBQVE7ZUFBQyxFQUFFOztzQkFFRyxNQUFNO3VCQUFDLFFBQVE7O3NCQUFrQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIzLjIuNFxuICogQnVpbGQgZGF0ZTogTW9uIEphbiAyOSAyMDI0XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyNCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xuaW1wb3J0IHtcbiAgTmdNb2R1bGUsIEluamVjdCwgTmdab25lLCBPcHRpb25hbCwgVkVSU0lPTixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCwgWGhyRmFjdG9yeSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgaHR0cFJlcXVlc3QgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL2h0dHBfcmVxdWVzdCc7XG5cbmltcG9ydCBkb21BZGFwdGVyIGZyb20gJ2RldmV4dHJlbWUvY29yZS9kb21fYWRhcHRlcic7XG5pbXBvcnQgcmVhZHlDYWxsYmFja3MgZnJvbSAnZGV2ZXh0cmVtZS9jb3JlL3V0aWxzL3JlYWR5X2NhbGxiYWNrcyc7XG5pbXBvcnQgZXZlbnRzRW5naW5lIGZyb20gJ2RldmV4dHJlbWUvZXZlbnRzL2NvcmUvZXZlbnRzX2VuZ2luZSc7XG5cbmNvbnN0IG91dHNpZGVab25lRXZlbnRzID0gWydtb3VzZW1vdmUnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J107XG5jb25zdCBpbnNpZGVab25lRXZlbnRzID0gWydtb3VzZXVwJywgJ2NsaWNrJywgJ21vdXNlZG93bicsICd0cmFuc2l0aW9uZW5kJywgJ3doZWVsJ107XG5cbmxldCBvcmlnaW5hbEFkZDtcbmxldCBjYWxsYmFja3MgPSBbXTtcbmxldCByZWFkeUNhbGxiYWNrQWRkID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIGlmICghb3JpZ2luYWxBZGQpIHtcbiAgICBvcmlnaW5hbEFkZCA9IHRoaXMuY2FsbEJhc2UuYmluZCh0aGlzKTtcbiAgfVxuICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG59O1xuXG5yZWFkeUNhbGxiYWNrcy5pbmplY3Qoe1xuICBhZGQoY2FsbGJhY2spIHtcbiAgICByZXR1cm4gcmVhZHlDYWxsYmFja0FkZC5jYWxsKHRoaXMsIGNhbGxiYWNrKTtcbiAgfSxcbn0pO1xuXG5sZXQgZG9JbmplY3Rpb25zID0gKGRvY3VtZW50OiBhbnksIG5nWm9uZTogTmdab25lLCB4aHJGYWN0b3J5OiBYaHJGYWN0b3J5KSA9PiB7XG4gIGlmIChOdW1iZXIoVkVSU0lPTi5tYWpvcikgPCAxMikge1xuICAgIGNvbnNvbGUud2FybignWW91ciB2ZXJzaW9uIG9mIEFuZ3VsYXIgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVwZGF0ZSB5b3VyIHByb2plY3QgdG8gdmVyc2lvbiAxMiBvciBsYXRlci4nXG4gICAgICAgICsgJyBQbGVhc2UgcmVmZXIgdG8gdGhlIEFuZ3VsYXIgVXBkYXRlIEd1aWRlIGZvciBtb3JlIGluZm9ybWF0aW9uOiBodHRwczovL3VwZGF0ZS5hbmd1bGFyLmlvJyk7XG4gIH1cblxuICBkb21BZGFwdGVyLmluamVjdCh7XG4gICAgX2RvY3VtZW50OiBkb2N1bWVudCxcblxuICAgIGxpc3RlbiguLi5hcmdzKSB7XG4gICAgICBjb25zdCBldmVudE5hbWUgPSBhcmdzWzFdO1xuICAgICAgaWYgKG91dHNpZGVab25lRXZlbnRzLmluY2x1ZGVzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMsIGFyZ3MpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5nWm9uZS5pc1N0YWJsZSAmJiBpbnNpZGVab25lRXZlbnRzLmluY2x1ZGVzKGV2ZW50TmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIG5nWm9uZS5ydW4oKCkgPT4gdGhpcy5jYWxsQmFzZS5hcHBseSh0aGlzLCBhcmdzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH0sXG5cbiAgICBpc0VsZW1lbnROb2RlKGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUgPT09IDE7XG4gICAgfSxcblxuICAgIGlzVGV4dE5vZGUoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMztcbiAgICB9LFxuXG4gICAgaXNEb2N1bWVudChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50Lm5vZGVUeXBlID09PSA5O1xuICAgIH0sXG4gIH0pO1xuXG4gIGh0dHBSZXF1ZXN0LmluamVjdCh7XG4gICAgZ2V0WGhyKCkge1xuICAgICAgaWYgKCF4aHJGYWN0b3J5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxCYXNlLmFwcGx5KHRoaXMpO1xuICAgICAgfVxuICAgICAgY29uc3QgX3hociA9IHhockZhY3RvcnkuYnVpbGQoKTtcbiAgICAgIGlmICghKCd3aXRoQ3JlZGVudGlhbHMnIGluIF94aHIpKSB7XG4gICAgICAgIChfeGhyIGFzIGFueSkud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfeGhyO1xuICAgIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lID0gKCkgPT4ge1xuICAgIG5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgZXZlbnRzRW5naW5lLnNldCh7fSk7XG4gICAgICBjYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IG9yaWdpbmFsQWRkLmNhbGwobnVsbCwgY2FsbGJhY2spKTtcbiAgICAgIGNhbGxiYWNrcyA9IFtdO1xuICAgICAgcmVhZHlDYWxsYmFja3MuZmlyZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJ1blJlYWR5Q2FsbGJhY2tzSW5ab25lKCk7XG5cbiAgcmVhZHlDYWxsYmFja0FkZCA9IChjYWxsYmFjaykgPT4gbmdab25lLnJ1bigoKSA9PiBjYWxsYmFjaygpKTtcbiAgZG9JbmplY3Rpb25zID0gcnVuUmVhZHlDYWxsYmFja3NJblpvbmU7XG59O1xuXG5ATmdNb2R1bGUoe30pXG5leHBvcnQgY2xhc3MgRHhJbnRlZ3JhdGlvbk1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIGRvY3VtZW50OiBhbnksIG5nWm9uZTogTmdab25lLCBAT3B0aW9uYWwoKSB4aHJGYWN0b3J5OiBYaHJGYWN0b3J5KSB7XG4gICAgZG9JbmplY3Rpb25zKGRvY3VtZW50LCBuZ1pvbmUsIHhockZhY3RvcnkpO1xuICB9XG59XG4iXX0=