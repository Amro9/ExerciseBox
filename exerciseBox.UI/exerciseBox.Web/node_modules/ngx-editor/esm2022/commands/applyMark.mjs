import { TextSelection } from 'prosemirror-state';
import { markApplies } from 'ngx-editor/helpers';
// Ref: https://github.com/ProseMirror/prosemirror-commands/blob/master/src/commands.js
export const applyMark = (type, attrs = {}) => {
    return (state, dispatch) => {
        const { tr, selection } = state;
        const { empty, ranges, $from, $to } = selection;
        if (empty && selection instanceof TextSelection) {
            const { $cursor } = selection;
            if (!$cursor || !markApplies(state.doc, ranges, type)) {
                return false;
            }
            tr.addStoredMark(type.create(attrs));
            if (!tr.storedMarksSet) {
                return false;
            }
            dispatch?.(tr);
        }
        else {
            tr.addMark($from.pos, $to.pos, type.create(attrs));
            if (!tr.docChanged) {
                return false;
            }
            dispatch?.(tr.scrollIntoView());
        }
        return true;
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbHlNYXJrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9jb21tYW5kcy9hcHBseU1hcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFlLGFBQWEsRUFBNkIsTUFBTSxtQkFBbUIsQ0FBQztBQUUxRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFFakQsdUZBQXVGO0FBQ3ZGLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxDQUFDLElBQWMsRUFBRSxRQUE2QixFQUFFLEVBQVcsRUFBRTtJQUNwRixPQUFPLENBQUMsS0FBa0IsRUFBRSxRQUFvQyxFQUFXLEVBQUU7UUFDM0UsTUFBTSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDaEMsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQztRQUVoRCxJQUFJLEtBQUssSUFBSSxTQUFTLFlBQVksYUFBYSxFQUFFLENBQUM7WUFDaEQsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLFNBQVMsQ0FBQztZQUU5QixJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQ3RELE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztZQUVELEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7Z0JBQ3ZCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztZQUVELFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLENBQUM7YUFBTSxDQUFDO1lBQ04sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRW5ELElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ25CLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztZQUVELFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmtUeXBlIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnO1xuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIFRleHRTZWxlY3Rpb24sIFRyYW5zYWN0aW9uLCB0eXBlIENvbW1hbmQgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5cbmltcG9ydCB7IG1hcmtBcHBsaWVzIH0gZnJvbSAnbmd4LWVkaXRvci9oZWxwZXJzJztcblxuLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vUHJvc2VNaXJyb3IvcHJvc2VtaXJyb3ItY29tbWFuZHMvYmxvYi9tYXN0ZXIvc3JjL2NvbW1hbmRzLmpzXG5leHBvcnQgY29uc3QgYXBwbHlNYXJrID0gKHR5cGU6IE1hcmtUeXBlLCBhdHRyczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9KTogQ29tbWFuZCA9PiB7XG4gIHJldHVybiAoc3RhdGU6IEVkaXRvclN0YXRlLCBkaXNwYXRjaD86ICh0cjogVHJhbnNhY3Rpb24pID0+IHZvaWQpOiBib29sZWFuID0+IHtcbiAgICBjb25zdCB7IHRyLCBzZWxlY3Rpb24gfSA9IHN0YXRlO1xuICAgIGNvbnN0IHsgZW1wdHksIHJhbmdlcywgJGZyb20sICR0byB9ID0gc2VsZWN0aW9uO1xuXG4gICAgaWYgKGVtcHR5ICYmIHNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHtcbiAgICAgIGNvbnN0IHsgJGN1cnNvciB9ID0gc2VsZWN0aW9uO1xuXG4gICAgICBpZiAoISRjdXJzb3IgfHwgIW1hcmtBcHBsaWVzKHN0YXRlLmRvYywgcmFuZ2VzLCB0eXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRyLmFkZFN0b3JlZE1hcmsodHlwZS5jcmVhdGUoYXR0cnMpKTtcbiAgICAgIGlmICghdHIuc3RvcmVkTWFya3NTZXQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBkaXNwYXRjaD8uKHRyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHIuYWRkTWFyaygkZnJvbS5wb3MsICR0by5wb3MsIHR5cGUuY3JlYXRlKGF0dHJzKSk7XG5cbiAgICAgIGlmICghdHIuZG9jQ2hhbmdlZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGRpc3BhdGNoPy4odHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59O1xuIl19