import { Fragment, Slice } from 'prosemirror-model';
import { Plugin, PluginKey } from 'prosemirror-state';
const HTTP_LINK_REGEX = /(?:https?:\/\/)?[\w-]+(?:\.[\w-]+)+\.?(?:\d+)?(?:\/\S*)?$/;
const linkify = (fragment) => {
    const linkified = [];
    fragment.forEach((child) => {
        if (child.isText) {
            const text = child.text;
            let pos = 0;
            const match = HTTP_LINK_REGEX.exec(text);
            if (match) {
                const start = match.index;
                const end = start + match[0].length;
                const { link } = child.type.schema.marks;
                if (start > 0) {
                    linkified.push(child.cut(pos, start));
                }
                const urlText = text.slice(start, end);
                linkified.push(child.cut(start, end).mark(link.create({ href: urlText }).addToSet(child.marks)));
                pos = end;
            }
            if (pos < text.length) {
                linkified.push(child.cut(pos));
            }
        }
        else {
            linkified.push(child.copy(linkify(child.content)));
        }
    });
    return Fragment.fromArray(linkified);
};
const linkifyPlugin = () => {
    return new Plugin({
        key: new PluginKey('linkify'),
        props: {
            transformPasted: (slice) => {
                return new Slice(linkify(slice.content), slice.openStart, slice.openEnd);
            },
        },
    });
};
export default linkifyPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1lZGl0b3Ivc3JjL2xpYi9wbHVnaW5zL2xpbmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQTJCLE1BQU0sbUJBQW1CLENBQUM7QUFDN0UsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV0RCxNQUFNLGVBQWUsR0FBRywyREFBMkQsQ0FBQztBQUVwRixNQUFNLE9BQU8sR0FBRyxDQUFDLFFBQWtCLEVBQVksRUFBRTtJQUMvQyxNQUFNLFNBQVMsR0FBc0IsRUFBRSxDQUFDO0lBRXhDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFzQixFQUFFLEVBQUU7UUFDMUMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQWMsQ0FBQztZQUNsQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFFWixNQUFNLEtBQUssR0FBNEIsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVsRSxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUNWLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7Z0JBQzFCLE1BQU0sR0FBRyxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUNwQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUV6QyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDZCxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLENBQUM7Z0JBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQ3ZDLFNBQVMsQ0FBQyxJQUFJLENBQ1osS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ2pGLENBQUM7Z0JBQ0YsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNaLENBQUM7WUFFRCxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLENBQUM7UUFDSCxDQUFDO2FBQU0sQ0FBQztZQUNOLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxhQUFhLEdBQUcsR0FBVSxFQUFFO0lBQ2hDLE9BQU8sSUFBSSxNQUFNLENBQUM7UUFDaEIsR0FBRyxFQUFFLElBQUksU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUM3QixLQUFLLEVBQUU7WUFDTCxlQUFlLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtnQkFDaEMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNFLENBQUM7U0FDRjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLGVBQWUsYUFBYSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRnJhZ21lbnQsIFNsaWNlLCBOb2RlIGFzIFByb3NlTWlycm9yTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFBsdWdpbiwgUGx1Z2luS2V5IH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuXG5jb25zdCBIVFRQX0xJTktfUkVHRVggPSAvKD86aHR0cHM/OlxcL1xcLyk/W1xcdy1dKyg/OlxcLltcXHctXSspK1xcLj8oPzpcXGQrKT8oPzpcXC9cXFMqKT8kLztcblxuY29uc3QgbGlua2lmeSA9IChmcmFnbWVudDogRnJhZ21lbnQpOiBGcmFnbWVudCA9PiB7XG4gIGNvbnN0IGxpbmtpZmllZDogUHJvc2VNaXJyb3JOb2RlW10gPSBbXTtcblxuICBmcmFnbWVudC5mb3JFYWNoKChjaGlsZDogUHJvc2VNaXJyb3JOb2RlKSA9PiB7XG4gICAgaWYgKGNoaWxkLmlzVGV4dCkge1xuICAgICAgY29uc3QgdGV4dCA9IGNoaWxkLnRleHQgYXMgc3RyaW5nO1xuICAgICAgbGV0IHBvcyA9IDA7XG5cbiAgICAgIGNvbnN0IG1hdGNoOiBSZWdFeHBNYXRjaEFycmF5IHwgbnVsbCA9IEhUVFBfTElOS19SRUdFWC5leGVjKHRleHQpO1xuXG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBtYXRjaC5pbmRleDtcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHsgbGluayB9ID0gY2hpbGQudHlwZS5zY2hlbWEubWFya3M7XG5cbiAgICAgICAgaWYgKHN0YXJ0ID4gMCkge1xuICAgICAgICAgIGxpbmtpZmllZC5wdXNoKGNoaWxkLmN1dChwb3MsIHN0YXJ0KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1cmxUZXh0ID0gdGV4dC5zbGljZShzdGFydCwgZW5kKTtcbiAgICAgICAgbGlua2lmaWVkLnB1c2goXG4gICAgICAgICAgY2hpbGQuY3V0KHN0YXJ0LCBlbmQpLm1hcmsobGluay5jcmVhdGUoeyBocmVmOiB1cmxUZXh0IH0pLmFkZFRvU2V0KGNoaWxkLm1hcmtzKSksXG4gICAgICAgICk7XG4gICAgICAgIHBvcyA9IGVuZDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvcyA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgIGxpbmtpZmllZC5wdXNoKGNoaWxkLmN1dChwb3MpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGlua2lmaWVkLnB1c2goY2hpbGQuY29weShsaW5raWZ5KGNoaWxkLmNvbnRlbnQpKSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gRnJhZ21lbnQuZnJvbUFycmF5KGxpbmtpZmllZCk7XG59O1xuXG5jb25zdCBsaW5raWZ5UGx1Z2luID0gKCk6UGx1Z2luID0+IHtcbiAgcmV0dXJuIG5ldyBQbHVnaW4oe1xuICAgIGtleTogbmV3IFBsdWdpbktleSgnbGlua2lmeScpLFxuICAgIHByb3BzOiB7XG4gICAgICB0cmFuc2Zvcm1QYXN0ZWQ6IChzbGljZTogU2xpY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTbGljZShsaW5raWZ5KHNsaWNlLmNvbnRlbnQpLCBzbGljZS5vcGVuU3RhcnQsIHNsaWNlLm9wZW5FbmQpO1xuICAgICAgfSxcbiAgICB9LFxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGxpbmtpZnlQbHVnaW47XG4iXX0=