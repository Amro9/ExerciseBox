import { clamp } from 'ngx-editor/utils';
const indentNodeTypes = ['paragraph', 'heading', 'blockquote'];
const minIndent = 0;
const maxIndent = 10;
const udpateIndentLevel = (tr, pos, method) => {
    const node = tr.doc.nodeAt(pos);
    if (!node) {
        return false;
    }
    const nodeIndent = node.attrs['indent'] ?? 0;
    const newIndent = clamp(nodeIndent + (method === 'increase' ? 1 : -1), minIndent, maxIndent);
    if (newIndent === nodeIndent || newIndent < minIndent || newIndent > maxIndent) {
        return false;
    }
    const attrs = {
        ...node.attrs,
        indent: newIndent,
    };
    tr.setNodeMarkup(pos, node.type, attrs);
    return true;
};
class Indent {
    constructor(method) {
        this.method = 'increase';
        this.method = method;
    }
    insert() {
        return (state, dispatch) => {
            const { tr, doc } = state;
            const { from, to } = tr.selection;
            let applicable = false;
            doc.nodesBetween(from, to, (node, pos) => {
                const nodeType = node.type;
                if (indentNodeTypes.includes(nodeType.name)) {
                    applicable = udpateIndentLevel(tr, pos, this.method);
                    return false;
                }
                else if (node.type.name.includes('list')) {
                    return false;
                }
                return true;
            });
            if (!applicable) {
                return false;
            }
            if (tr.docChanged) {
                dispatch?.(tr);
            }
            return true;
        };
    }
    canExecute(state) {
        return this.insert()(state);
    }
}
export default Indent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5kZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9zcmMvbGliL2NvbW1hbmRzL0luZGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHekMsTUFBTSxlQUFlLEdBQUcsQ0FBQyxXQUFXLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBRy9ELE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBQztBQUNwQixNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7QUFFckIsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEVBQWUsRUFBRSxHQUFXLEVBQUUsTUFBb0IsRUFBVyxFQUFFO0lBQ3hGLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUFDLE9BQU8sS0FBSyxDQUFDO0lBQUMsQ0FBQztJQUU1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUU3RixJQUFJLFNBQVMsS0FBSyxVQUFVLElBQUksU0FBUyxHQUFHLFNBQVMsSUFBSSxTQUFTLEdBQUcsU0FBUyxFQUFFLENBQUM7UUFDL0UsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsTUFBTSxLQUFLLEdBQUc7UUFDWixHQUFHLElBQUksQ0FBQyxLQUFLO1FBQ2IsTUFBTSxFQUFFLFNBQVM7S0FDbEIsQ0FBQztJQUVGLEVBQUUsQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDeEMsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFRixNQUFNLE1BQU07SUFHVixZQUFZLE1BQW9CO1FBRmhDLFdBQU0sR0FBaUIsVUFBVSxDQUFDO1FBR2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLEtBQWtCLEVBQUUsUUFBb0MsRUFBVyxFQUFFO1lBQzNFLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBQzFCLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQztZQUVsQyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7WUFFdkIsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUN2QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO2dCQUUzQixJQUFJLGVBQWUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7b0JBQzVDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDckQsT0FBTyxLQUFLLENBQUM7Z0JBQ2YsQ0FBQztxQkFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO29CQUMzQyxPQUFPLEtBQUssQ0FBQztnQkFDZixDQUFDO2dCQUVELE9BQU8sSUFBSSxDQUFDO1lBQ2QsQ0FBQyxDQUFDLENBQUM7WUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQ2hCLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztZQUVELElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNsQixRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNqQixDQUFDO1lBRUQsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQWtCO1FBQzNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7Q0FDRjtBQUVELGVBQWUsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFZGl0b3JTdGF0ZSwgVHJhbnNhY3Rpb24sIENvbW1hbmQgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5cbmltcG9ydCB7IGNsYW1wIH0gZnJvbSAnbmd4LWVkaXRvci91dGlscyc7XG5pbXBvcnQgeyBJbnNlcnRDb21tYW5kIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNvbnN0IGluZGVudE5vZGVUeXBlcyA9IFsncGFyYWdyYXBoJywgJ2hlYWRpbmcnLCAnYmxvY2txdW90ZSddO1xuXG50eXBlIEluZGVudE1ldGhvZCA9ICdpbmNyZWFzZScgfCAnZGVjcmVhc2UnO1xuY29uc3QgbWluSW5kZW50ID0gMDtcbmNvbnN0IG1heEluZGVudCA9IDEwO1xuXG5jb25zdCB1ZHBhdGVJbmRlbnRMZXZlbCA9ICh0cjogVHJhbnNhY3Rpb24sIHBvczogbnVtYmVyLCBtZXRob2Q6IEluZGVudE1ldGhvZCk6IGJvb2xlYW4gPT4ge1xuICBjb25zdCBub2RlID0gdHIuZG9jLm5vZGVBdChwb3MpO1xuICBpZiAoIW5vZGUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgY29uc3Qgbm9kZUluZGVudCA9IG5vZGUuYXR0cnNbJ2luZGVudCddID8/IDA7XG4gIGNvbnN0IG5ld0luZGVudCA9IGNsYW1wKG5vZGVJbmRlbnQgKyAobWV0aG9kID09PSAnaW5jcmVhc2UnID8gMSA6IC0xKSwgbWluSW5kZW50LCBtYXhJbmRlbnQpO1xuXG4gIGlmIChuZXdJbmRlbnQgPT09IG5vZGVJbmRlbnQgfHwgbmV3SW5kZW50IDwgbWluSW5kZW50IHx8IG5ld0luZGVudCA+IG1heEluZGVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGF0dHJzID0ge1xuICAgIC4uLm5vZGUuYXR0cnMsXG4gICAgaW5kZW50OiBuZXdJbmRlbnQsXG4gIH07XG5cbiAgdHIuc2V0Tm9kZU1hcmt1cChwb3MsIG5vZGUudHlwZSwgYXR0cnMpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmNsYXNzIEluZGVudCBpbXBsZW1lbnRzIEluc2VydENvbW1hbmQge1xuICBtZXRob2Q6IEluZGVudE1ldGhvZCA9ICdpbmNyZWFzZSc7XG5cbiAgY29uc3RydWN0b3IobWV0aG9kOiBJbmRlbnRNZXRob2QpIHtcbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZDtcbiAgfVxuXG4gIGluc2VydCgpOiBDb21tYW5kIHtcbiAgICByZXR1cm4gKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g/OiAodHI6IFRyYW5zYWN0aW9uKSA9PiB2b2lkKTogYm9vbGVhbiA9PiB7XG4gICAgICBjb25zdCB7IHRyLCBkb2MgfSA9IHN0YXRlO1xuICAgICAgY29uc3QgeyBmcm9tLCB0byB9ID0gdHIuc2VsZWN0aW9uO1xuXG4gICAgICBsZXQgYXBwbGljYWJsZSA9IGZhbHNlO1xuXG4gICAgICBkb2Mubm9kZXNCZXR3ZWVuKGZyb20sIHRvLCAobm9kZSwgcG9zKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGVUeXBlID0gbm9kZS50eXBlO1xuXG4gICAgICAgIGlmIChpbmRlbnROb2RlVHlwZXMuaW5jbHVkZXMobm9kZVR5cGUubmFtZSkpIHtcbiAgICAgICAgICBhcHBsaWNhYmxlID0gdWRwYXRlSW5kZW50TGV2ZWwodHIsIHBvcywgdGhpcy5tZXRob2QpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLnR5cGUubmFtZS5pbmNsdWRlcygnbGlzdCcpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFhcHBsaWNhYmxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyLmRvY0NoYW5nZWQpIHtcbiAgICAgICAgZGlzcGF0Y2g/Lih0cik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH1cblxuICBjYW5FeGVjdXRlKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmluc2VydCgpKHN0YXRlKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbmRlbnQ7XG4iXX0=