import { setBlockType } from 'prosemirror-commands';
import { getSelectionNodes } from 'ngx-editor/helpers';
class Heading {
    constructor(level) {
        this.level = level;
    }
    apply() {
        return (state, dispatch) => {
            const { schema } = state;
            const type = schema.nodes['heading'];
            if (!type) {
                return false;
            }
            return setBlockType(type)(state, dispatch);
        };
    }
    toggle() {
        return (state, dispatch) => {
            const { schema, selection, doc } = state;
            const type = schema.nodes['heading'];
            if (!type) {
                return false;
            }
            const nodePos = selection.$from.before(1);
            const node = doc.nodeAt(nodePos);
            const attrs = node?.attrs ?? {};
            if (this.isActive(state)) {
                return setBlockType(schema.nodes['paragraph'], attrs)(state, dispatch);
            }
            return setBlockType(type, { ...attrs, level: this.level })(state, dispatch);
        };
    }
    isActive(state) {
        const { schema } = state;
        const nodesInSelection = getSelectionNodes(state);
        const type = schema.nodes['heading'];
        if (!type) {
            return false;
        }
        const supportedNodes = [
            type,
            schema.nodes['text'],
            schema.nodes['blockquote'],
        ];
        // heading is a text node
        // don't mark as active when it has more nodes
        const nodes = nodesInSelection.filter((node) => {
            return supportedNodes.includes(node.type);
        });
        const acitveNode = nodes.find((node) => {
            return node.attrs['level'] === this.level;
        });
        return Boolean(acitveNode);
    }
    canExecute(state) {
        return this.toggle()(state);
    }
}
export default Heading;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGVhZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1lZGl0b3Ivc3JjL2xpYi9jb21tYW5kcy9IZWFkaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQU12RCxNQUFNLE9BQU87SUFHWCxZQUFZLEtBQW9CO1FBQzlCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxLQUFLO1FBQ0gsT0FBTyxDQUFDLEtBQWtCLEVBQUUsUUFBb0MsRUFBVyxFQUFFO1lBQzNFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUM7WUFFekIsTUFBTSxJQUFJLEdBQWEsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ1YsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDO1lBRUQsT0FBTyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxDQUFDLEtBQWtCLEVBQUUsUUFBb0MsRUFBVyxFQUFFO1lBQzNFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQztZQUV6QyxNQUFNLElBQUksR0FBYSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDVixPQUFPLEtBQUssQ0FBQztZQUNmLENBQUM7WUFFRCxNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWpDLE1BQU0sS0FBSyxHQUFHLElBQUksRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDO1lBRWhDLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUN6QixPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztZQUN6RSxDQUFDO1lBRUQsT0FBTyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztRQUM5RSxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWtCO1FBQ3pCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDekIsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsRCxNQUFNLElBQUksR0FBYSxNQUFNLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNWLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztRQUVELE1BQU0sY0FBYyxHQUFHO1lBQ3JCLElBQUk7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztZQUNwQixNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztTQUMzQixDQUFDO1FBRUYseUJBQXlCO1FBQ3pCLDhDQUE4QztRQUM5QyxNQUFNLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUM3QyxPQUFPLGNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQXFCLEVBQUUsRUFBRTtZQUN0RCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBa0I7UUFDM0IsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNGO0FBRUQsZUFBZSxPQUFPLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5vZGVUeXBlLCBOb2RlIGFzIFByb3NlTWlycm9yTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB0eXBlIHsgRWRpdG9yU3RhdGUsIFRyYW5zYWN0aW9uLCBDb21tYW5kIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgc2V0QmxvY2tUeXBlIH0gZnJvbSAncHJvc2VtaXJyb3ItY29tbWFuZHMnO1xuXG5pbXBvcnQgeyBnZXRTZWxlY3Rpb25Ob2RlcyB9IGZyb20gJ25neC1lZGl0b3IvaGVscGVycyc7XG5cbmltcG9ydCB7IFRvZ2dsZUNvbW1hbmQgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgSGVhZGluZ0xldmVscyA9IDEgfCAyIHwgMyB8IDQgfCA1IHwgNjtcblxuY2xhc3MgSGVhZGluZyBpbXBsZW1lbnRzIFRvZ2dsZUNvbW1hbmQge1xuICBsZXZlbDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGxldmVsOiBIZWFkaW5nTGV2ZWxzKSB7XG4gICAgdGhpcy5sZXZlbCA9IGxldmVsO1xuICB9XG5cbiAgYXBwbHkoKTogQ29tbWFuZCB7XG4gICAgcmV0dXJuIChzdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoPzogKHRyOiBUcmFuc2FjdGlvbikgPT4gdm9pZCk6IGJvb2xlYW4gPT4ge1xuICAgICAgY29uc3QgeyBzY2hlbWEgfSA9IHN0YXRlO1xuXG4gICAgICBjb25zdCB0eXBlOiBOb2RlVHlwZSA9IHNjaGVtYS5ub2Rlc1snaGVhZGluZyddO1xuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNldEJsb2NrVHlwZSh0eXBlKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgIH07XG4gIH1cblxuICB0b2dnbGUoKTogQ29tbWFuZCB7XG4gICAgcmV0dXJuIChzdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoPzogKHRyOiBUcmFuc2FjdGlvbikgPT4gdm9pZCk6IGJvb2xlYW4gPT4ge1xuICAgICAgY29uc3QgeyBzY2hlbWEsIHNlbGVjdGlvbiwgZG9jIH0gPSBzdGF0ZTtcblxuICAgICAgY29uc3QgdHlwZTogTm9kZVR5cGUgPSBzY2hlbWEubm9kZXNbJ2hlYWRpbmcnXTtcbiAgICAgIGlmICghdHlwZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vZGVQb3MgPSBzZWxlY3Rpb24uJGZyb20uYmVmb3JlKDEpO1xuICAgICAgY29uc3Qgbm9kZSA9IGRvYy5ub2RlQXQobm9kZVBvcyk7XG5cbiAgICAgIGNvbnN0IGF0dHJzID0gbm9kZT8uYXR0cnMgPz8ge307XG5cbiAgICAgIGlmICh0aGlzLmlzQWN0aXZlKHN0YXRlKSkge1xuICAgICAgICByZXR1cm4gc2V0QmxvY2tUeXBlKHNjaGVtYS5ub2Rlc1sncGFyYWdyYXBoJ10sIGF0dHJzKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2V0QmxvY2tUeXBlKHR5cGUsIHsgLi4uYXR0cnMsIGxldmVsOiB0aGlzLmxldmVsIH0pKHN0YXRlLCBkaXNwYXRjaCk7XG4gICAgfTtcbiAgfVxuXG4gIGlzQWN0aXZlKHN0YXRlOiBFZGl0b3JTdGF0ZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHsgc2NoZW1hIH0gPSBzdGF0ZTtcbiAgICBjb25zdCBub2Rlc0luU2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uTm9kZXMoc3RhdGUpO1xuXG4gICAgY29uc3QgdHlwZTogTm9kZVR5cGUgPSBzY2hlbWEubm9kZXNbJ2hlYWRpbmcnXTtcbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBzdXBwb3J0ZWROb2RlcyA9IFtcbiAgICAgIHR5cGUsXG4gICAgICBzY2hlbWEubm9kZXNbJ3RleHQnXSxcbiAgICAgIHNjaGVtYS5ub2Rlc1snYmxvY2txdW90ZSddLFxuICAgIF07XG5cbiAgICAvLyBoZWFkaW5nIGlzIGEgdGV4dCBub2RlXG4gICAgLy8gZG9uJ3QgbWFyayBhcyBhY3RpdmUgd2hlbiBpdCBoYXMgbW9yZSBub2Rlc1xuICAgIGNvbnN0IG5vZGVzID0gbm9kZXNJblNlbGVjdGlvbi5maWx0ZXIoKG5vZGUpID0+IHtcbiAgICAgIHJldHVybiBzdXBwb3J0ZWROb2Rlcy5pbmNsdWRlcyhub2RlLnR5cGUpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgYWNpdHZlTm9kZSA9IG5vZGVzLmZpbmQoKG5vZGU6IFByb3NlTWlycm9yTm9kZSkgPT4ge1xuICAgICAgcmV0dXJuIG5vZGUuYXR0cnNbJ2xldmVsJ10gPT09IHRoaXMubGV2ZWw7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gQm9vbGVhbihhY2l0dmVOb2RlKTtcbiAgfVxuXG4gIGNhbkV4ZWN1dGUoc3RhdGU6IEVkaXRvclN0YXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9nZ2xlKCkoc3RhdGUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRpbmc7XG4iXX0=