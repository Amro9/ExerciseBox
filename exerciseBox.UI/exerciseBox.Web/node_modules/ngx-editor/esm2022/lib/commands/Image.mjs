import { NodeSelection } from 'prosemirror-state';
class Image {
    insert(src, attrs) {
        return (state, dispatch) => {
            const { schema, tr, selection } = state;
            const type = schema.nodes['image'];
            if (!type) {
                return false;
            }
            const imageAttrs = {
                width: null,
                src,
                ...attrs,
            };
            if (!imageAttrs.width && selection instanceof NodeSelection && selection.node.type === type) {
                imageAttrs.width = selection.node.attrs['width'];
            }
            tr.replaceSelectionWith(type.createAndFill(imageAttrs));
            const resolvedPos = tr.doc.resolve(tr.selection.anchor - tr.selection.$anchor.nodeBefore.nodeSize);
            tr
                .setSelection(new NodeSelection(resolvedPos))
                .scrollIntoView();
            if (tr.docChanged) {
                dispatch?.(tr);
                return true;
            }
            return false;
        };
    }
    isActive(state) {
        const { selection } = state;
        if (selection instanceof NodeSelection) {
            return selection.node.type.name === 'image';
        }
        return false;
    }
}
export default Image;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvY29tbWFuZHMvSW1hZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixhQUFhLEVBQWdCLE1BQU0sbUJBQW1CLENBQUM7QUFVbEYsTUFBTSxLQUFLO0lBQ1QsTUFBTSxDQUFDLEdBQVcsRUFBRSxLQUFpQjtRQUNuQyxPQUFPLENBQUMsS0FBa0IsRUFBRSxRQUFtQixFQUFXLEVBQUU7WUFDMUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBRXhDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNWLE9BQU8sS0FBSyxDQUFDO1lBQ2YsQ0FBQztZQUVELE1BQU0sVUFBVSxHQUFHO2dCQUNqQixLQUFLLEVBQUUsSUFBSTtnQkFDWCxHQUFHO2dCQUNILEdBQUcsS0FBSzthQUNULENBQUM7WUFFRixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxTQUFTLFlBQVksYUFBYSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDO2dCQUM1RixVQUFVLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ25ELENBQUM7WUFFRCxFQUFFLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBRXhELE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUNoQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUMvRCxDQUFDO1lBRUYsRUFBRTtpQkFDQyxZQUFZLENBQUMsSUFBSSxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzVDLGNBQWMsRUFBRSxDQUFDO1lBRXBCLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUNsQixRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDZixPQUFPLElBQUksQ0FBQztZQUNkLENBQUM7WUFFRCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBa0I7UUFDekIsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUM1QixJQUFJLFNBQVMsWUFBWSxhQUFhLEVBQUUsQ0FBQztZQUN2QyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUM7UUFDOUMsQ0FBQztRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsZUFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIEVkaXRvclN0YXRlLCBOb2RlU2VsZWN0aW9uLCB0eXBlIENvbW1hbmQgfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5cbmltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VBdHRycyB7XG4gIGFsdD86IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIHdpZHRoPzogc3RyaW5nO1xufVxuXG5jbGFzcyBJbWFnZSB7XG4gIGluc2VydChzcmM6IHN0cmluZywgYXR0cnM6IEltYWdlQXR0cnMpOiBDb21tYW5kIHtcbiAgICByZXR1cm4gKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g/OiBEaXNwYXRjaCk6IGJvb2xlYW4gPT4ge1xuICAgICAgY29uc3QgeyBzY2hlbWEsIHRyLCBzZWxlY3Rpb24gfSA9IHN0YXRlO1xuXG4gICAgICBjb25zdCB0eXBlID0gc2NoZW1hLm5vZGVzWydpbWFnZSddO1xuICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW1hZ2VBdHRycyA9IHtcbiAgICAgICAgd2lkdGg6IG51bGwsXG4gICAgICAgIHNyYyxcbiAgICAgICAgLi4uYXR0cnMsXG4gICAgICB9O1xuXG4gICAgICBpZiAoIWltYWdlQXR0cnMud2lkdGggJiYgc2VsZWN0aW9uIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzZWxlY3Rpb24ubm9kZS50eXBlID09PSB0eXBlKSB7XG4gICAgICAgIGltYWdlQXR0cnMud2lkdGggPSBzZWxlY3Rpb24ubm9kZS5hdHRyc1snd2lkdGgnXTtcbiAgICAgIH1cblxuICAgICAgdHIucmVwbGFjZVNlbGVjdGlvbldpdGgodHlwZS5jcmVhdGVBbmRGaWxsKGltYWdlQXR0cnMpKTtcblxuICAgICAgY29uc3QgcmVzb2x2ZWRQb3MgPSB0ci5kb2MucmVzb2x2ZShcbiAgICAgICAgdHIuc2VsZWN0aW9uLmFuY2hvciAtIHRyLnNlbGVjdGlvbi4kYW5jaG9yLm5vZGVCZWZvcmUubm9kZVNpemUsXG4gICAgICApO1xuXG4gICAgICB0clxuICAgICAgICAuc2V0U2VsZWN0aW9uKG5ldyBOb2RlU2VsZWN0aW9uKHJlc29sdmVkUG9zKSlcbiAgICAgICAgLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgIGlmICh0ci5kb2NDaGFuZ2VkKSB7XG4gICAgICAgIGRpc3BhdGNoPy4odHIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gIH1cblxuICBpc0FjdGl2ZShzdGF0ZTogRWRpdG9yU3RhdGUpOiBib29sZWFuIHtcbiAgICBjb25zdCB7IHNlbGVjdGlvbiB9ID0gc3RhdGU7XG4gICAgaWYgKHNlbGVjdGlvbiBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBzZWxlY3Rpb24ubm9kZS50eXBlLm5hbWUgPT09ICdpbWFnZSc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEltYWdlO1xuIl19