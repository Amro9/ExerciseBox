import { isObservable, of } from 'rxjs';
export const defaults = {
    // menu
    bold: 'Bold',
    italic: 'Italic',
    code: 'Code',
    underline: 'Underline',
    strike: 'Strike',
    blockquote: 'Blockquote',
    bullet_list: 'Bullet List',
    ordered_list: 'Ordered List',
    heading: 'Heading',
    h1: 'Header 1',
    h2: 'Header 2',
    h3: 'Header 3',
    h4: 'Header 4',
    h5: 'Header 5',
    h6: 'Header 6',
    align_left: 'Left Align',
    align_center: 'Center Align',
    align_right: 'Right Align',
    align_justify: 'Justify',
    text_color: 'Text Color',
    background_color: 'Background Color',
    horizontal_rule: 'Horizontal rule',
    format_clear: 'Clear Formatting',
    insertLink: 'Insert Link',
    removeLink: 'Remove Link',
    insertImage: 'Insert Image',
    indent: 'Increase Indent',
    outdent: 'Decrease Indent',
    superscript: 'Superscript',
    subscript: 'Subscript',
    undo: 'Undo',
    redo: 'Redo',
    // pupups, forms, others...
    url: 'URL',
    text: 'Text',
    openInNewTab: 'Open in new tab',
    insert: 'Insert',
    altText: 'Alt Text',
    title: 'Title',
    remove: 'Remove',
    enterValidUrl: 'Please enter a valid URL',
};
class Locals {
    constructor(newLocals = {}) {
        this.locals = defaults;
        this.get = (key) => {
            const value = this.locals[key];
            if (value) {
                return isObservable(value) ? value : of(value);
            }
            return of('');
        };
        this.locals = { ...defaults, ...newLocals };
    }
}
export default Locals;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9jYWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9zcmMvbGliL0xvY2Fscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsWUFBWSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUVwRCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQWdEO0lBQ25FLE9BQU87SUFDUCxJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLElBQUksRUFBRSxNQUFNO0lBQ1osU0FBUyxFQUFFLFdBQVc7SUFDdEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsWUFBWSxFQUFFLGNBQWM7SUFDNUIsT0FBTyxFQUFFLFNBQVM7SUFDbEIsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLEVBQUUsRUFBRSxVQUFVO0lBQ2QsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsVUFBVTtJQUNkLEVBQUUsRUFBRSxVQUFVO0lBQ2QsVUFBVSxFQUFFLFlBQVk7SUFDeEIsWUFBWSxFQUFFLGNBQWM7SUFDNUIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsYUFBYSxFQUFFLFNBQVM7SUFDeEIsVUFBVSxFQUFFLFlBQVk7SUFDeEIsZ0JBQWdCLEVBQUUsa0JBQWtCO0lBQ3BDLGVBQWUsRUFBRSxpQkFBaUI7SUFDbEMsWUFBWSxFQUFFLGtCQUFrQjtJQUNoQyxVQUFVLEVBQUUsYUFBYTtJQUN6QixVQUFVLEVBQUUsYUFBYTtJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixNQUFNLEVBQUUsaUJBQWlCO0lBQ3pCLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsV0FBVyxFQUFFLGFBQWE7SUFDMUIsU0FBUyxFQUFFLFdBQVc7SUFDdEIsSUFBSSxFQUFFLE1BQU07SUFDWixJQUFJLEVBQUUsTUFBTTtJQUVaLDJCQUEyQjtJQUMzQixHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxNQUFNO0lBQ1osWUFBWSxFQUFFLGlCQUFpQjtJQUMvQixNQUFNLEVBQUUsUUFBUTtJQUNoQixPQUFPLEVBQUUsVUFBVTtJQUNuQixLQUFLLEVBQUUsT0FBTztJQUNkLE1BQU0sRUFBRSxRQUFRO0lBQ2hCLGFBQWEsRUFBRSwwQkFBMEI7Q0FDMUMsQ0FBQztBQUlGLE1BQU0sTUFBTTtJQUdWLFlBQVksWUFBc0UsRUFBRTtRQUZwRixXQUFNLEdBQUcsUUFBUSxDQUFDO1FBTWxCLFFBQUcsR0FBRyxDQUFDLEdBQVcsRUFBc0IsRUFBRTtZQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQy9CLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBQ1YsT0FBTyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELENBQUM7WUFDRCxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUM7UUFUQSxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsR0FBRyxRQUFRLEVBQUUsR0FBRyxTQUFTLEVBQUUsQ0FBQztJQUM5QyxDQUFDO0NBU0Y7QUFFRCxlQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIGlzT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4+ID0ge1xuICAvLyBtZW51XG4gIGJvbGQ6ICdCb2xkJyxcbiAgaXRhbGljOiAnSXRhbGljJyxcbiAgY29kZTogJ0NvZGUnLFxuICB1bmRlcmxpbmU6ICdVbmRlcmxpbmUnLFxuICBzdHJpa2U6ICdTdHJpa2UnLFxuICBibG9ja3F1b3RlOiAnQmxvY2txdW90ZScsXG4gIGJ1bGxldF9saXN0OiAnQnVsbGV0IExpc3QnLFxuICBvcmRlcmVkX2xpc3Q6ICdPcmRlcmVkIExpc3QnLFxuICBoZWFkaW5nOiAnSGVhZGluZycsXG4gIGgxOiAnSGVhZGVyIDEnLFxuICBoMjogJ0hlYWRlciAyJyxcbiAgaDM6ICdIZWFkZXIgMycsXG4gIGg0OiAnSGVhZGVyIDQnLFxuICBoNTogJ0hlYWRlciA1JyxcbiAgaDY6ICdIZWFkZXIgNicsXG4gIGFsaWduX2xlZnQ6ICdMZWZ0IEFsaWduJyxcbiAgYWxpZ25fY2VudGVyOiAnQ2VudGVyIEFsaWduJyxcbiAgYWxpZ25fcmlnaHQ6ICdSaWdodCBBbGlnbicsXG4gIGFsaWduX2p1c3RpZnk6ICdKdXN0aWZ5JyxcbiAgdGV4dF9jb2xvcjogJ1RleHQgQ29sb3InLFxuICBiYWNrZ3JvdW5kX2NvbG9yOiAnQmFja2dyb3VuZCBDb2xvcicsXG4gIGhvcml6b250YWxfcnVsZTogJ0hvcml6b250YWwgcnVsZScsXG4gIGZvcm1hdF9jbGVhcjogJ0NsZWFyIEZvcm1hdHRpbmcnLFxuICBpbnNlcnRMaW5rOiAnSW5zZXJ0IExpbmsnLFxuICByZW1vdmVMaW5rOiAnUmVtb3ZlIExpbmsnLFxuICBpbnNlcnRJbWFnZTogJ0luc2VydCBJbWFnZScsXG4gIGluZGVudDogJ0luY3JlYXNlIEluZGVudCcsXG4gIG91dGRlbnQ6ICdEZWNyZWFzZSBJbmRlbnQnLFxuICBzdXBlcnNjcmlwdDogJ1N1cGVyc2NyaXB0JyxcbiAgc3Vic2NyaXB0OiAnU3Vic2NyaXB0JyxcbiAgdW5kbzogJ1VuZG8nLFxuICByZWRvOiAnUmVkbycsXG5cbiAgLy8gcHVwdXBzLCBmb3Jtcywgb3RoZXJzLi4uXG4gIHVybDogJ1VSTCcsXG4gIHRleHQ6ICdUZXh0JyxcbiAgb3BlbkluTmV3VGFiOiAnT3BlbiBpbiBuZXcgdGFiJyxcbiAgaW5zZXJ0OiAnSW5zZXJ0JyxcbiAgYWx0VGV4dDogJ0FsdCBUZXh0JyxcbiAgdGl0bGU6ICdUaXRsZScsXG4gIHJlbW92ZTogJ1JlbW92ZScsXG4gIGVudGVyVmFsaWRVcmw6ICdQbGVhc2UgZW50ZXIgYSB2YWxpZCBVUkwnLFxufTtcblxuZXhwb3J0IHR5cGUgTG9jYWxzS2V5cyA9IGtleW9mIHR5cGVvZiBkZWZhdWx0cztcblxuY2xhc3MgTG9jYWxzIHtcbiAgbG9jYWxzID0gZGVmYXVsdHM7XG5cbiAgY29uc3RydWN0b3IobmV3TG9jYWxzOiBQYXJ0aWFsPFJlY29yZDxMb2NhbHNLZXlzLCBzdHJpbmcgfCBPYnNlcnZhYmxlPHN0cmluZz4+PiA9IHt9KSB7XG4gICAgdGhpcy5sb2NhbHMgPSB7IC4uLmRlZmF1bHRzLCAuLi5uZXdMb2NhbHMgfTtcbiAgfVxuXG4gIGdldCA9IChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmxvY2Fsc1trZXldO1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JzZXJ2YWJsZSh2YWx1ZSkgPyB2YWx1ZSA6IG9mKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mKCcnKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTG9jYWxzO1xuIl19