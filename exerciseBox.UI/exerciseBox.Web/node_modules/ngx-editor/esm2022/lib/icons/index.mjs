/* eslint-disable @typescript-eslint/naming-convention */
// Icons source: https://material.io/
import bold from './bold';
import italic from './italic';
import code from './code';
import underline from './underline';
import strike from './strike';
import orderedList from './ordered_list';
import bulletList from './bullet_list';
import quote from './quote';
import link from './link';
import unlink from './unlink';
import image from './image';
import alignLeft from './align_left';
import alignCenter from './align_center';
import alignRight from './align_right';
import alignJustify from './align_justify';
import textColor from './text_color';
import colorFill from './color_fill';
import horizontalRule from './horizontal_rule';
import formatClear from './format_clear';
import indent from './indent';
import outdent from './outdent';
import superscript from './superscript';
import subscript from './subscript';
import undo from './undo';
import redo from './redo';
const DEFAULT_ICON_HEIGHT = 20;
const DEFAULT_ICON_WIDTH = 20;
const DEFAULT_ICON_FILL = 'currentColor';
export const icons = {
    bold,
    italic,
    code,
    underline,
    strike,
    ordered_list: orderedList,
    bullet_list: bulletList,
    blockquote: quote,
    link,
    unlink,
    image,
    align_left: alignLeft,
    align_center: alignCenter,
    align_right: alignRight,
    align_justify: alignJustify,
    text_color: textColor,
    color_fill: colorFill,
    horizontal_rule: horizontalRule,
    format_clear: formatClear,
    indent,
    outdent,
    superscript,
    subscript,
    undo,
    redo,
    path: '<path></path>',
};
class Icon {
    static get(name, fill = DEFAULT_ICON_FILL) {
        const fullPath = icons[name];
        if (fullPath && (fullPath.includes('<path') || fullPath.includes('<g'))) {
            return `
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 24 24"
          fill=${fill}
          height=${DEFAULT_ICON_HEIGHT}
          width=${DEFAULT_ICON_WIDTH}
        >
          ${fullPath}
        </svg>
      `;
        }
        return fullPath;
    }
}
export default Icon;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvaWNvbnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEseURBQXlEO0FBQ3pELHFDQUFxQztBQUVyQyxPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMxQixPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQzlCLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sVUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFDNUIsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBQzFCLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFDNUIsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sVUFBVSxNQUFNLGVBQWUsQ0FBQztBQUN2QyxPQUFPLFlBQVksTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sY0FBYyxNQUFNLG1CQUFtQixDQUFDO0FBQy9DLE9BQU8sV0FBVyxNQUFNLGdCQUFnQixDQUFDO0FBQ3pDLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxXQUFXLE1BQU0sZUFBZSxDQUFDO0FBQ3hDLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLElBQUksTUFBTSxRQUFRLENBQUM7QUFDMUIsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFDO0FBRTFCLE1BQU0sbUJBQW1CLEdBQUcsRUFBRSxDQUFDO0FBQy9CLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsY0FBYyxDQUFDO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBd0I7SUFDeEMsSUFBSTtJQUNKLE1BQU07SUFDTixJQUFJO0lBQ0osU0FBUztJQUNULE1BQU07SUFDTixZQUFZLEVBQUUsV0FBVztJQUN6QixXQUFXLEVBQUUsVUFBVTtJQUN2QixVQUFVLEVBQUUsS0FBSztJQUNqQixJQUFJO0lBQ0osTUFBTTtJQUNOLEtBQUs7SUFDTCxVQUFVLEVBQUUsU0FBUztJQUNyQixZQUFZLEVBQUUsV0FBVztJQUN6QixXQUFXLEVBQUUsVUFBVTtJQUN2QixhQUFhLEVBQUUsWUFBWTtJQUMzQixVQUFVLEVBQUUsU0FBUztJQUNyQixVQUFVLEVBQUUsU0FBUztJQUNyQixlQUFlLEVBQUUsY0FBYztJQUMvQixZQUFZLEVBQUUsV0FBVztJQUN6QixNQUFNO0lBQ04sT0FBTztJQUNQLFdBQVc7SUFDWCxTQUFTO0lBQ1QsSUFBSTtJQUNKLElBQUk7SUFDSixJQUFJLEVBQUUsZUFBZTtDQUN0QixDQUFDO0FBSUYsTUFBTSxJQUFJO0lBQ1IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUF3QixFQUFFLElBQUksR0FBRyxpQkFBaUI7UUFDM0QsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4RSxPQUFPOzs7O2lCQUlJLElBQUk7bUJBQ0YsbUJBQW1CO2tCQUNwQixrQkFBa0I7O1lBRXhCLFFBQVE7O09BRWIsQ0FBQztRQUNKLENBQUM7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0Y7QUFFRCxlQUFlLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuLy8gSWNvbnMgc291cmNlOiBodHRwczovL21hdGVyaWFsLmlvL1xuXG5pbXBvcnQgYm9sZCBmcm9tICcuL2JvbGQnO1xuaW1wb3J0IGl0YWxpYyBmcm9tICcuL2l0YWxpYyc7XG5pbXBvcnQgY29kZSBmcm9tICcuL2NvZGUnO1xuaW1wb3J0IHVuZGVybGluZSBmcm9tICcuL3VuZGVybGluZSc7XG5pbXBvcnQgc3RyaWtlIGZyb20gJy4vc3RyaWtlJztcbmltcG9ydCBvcmRlcmVkTGlzdCBmcm9tICcuL29yZGVyZWRfbGlzdCc7XG5pbXBvcnQgYnVsbGV0TGlzdCBmcm9tICcuL2J1bGxldF9saXN0JztcbmltcG9ydCBxdW90ZSBmcm9tICcuL3F1b3RlJztcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluayc7XG5pbXBvcnQgdW5saW5rIGZyb20gJy4vdW5saW5rJztcbmltcG9ydCBpbWFnZSBmcm9tICcuL2ltYWdlJztcbmltcG9ydCBhbGlnbkxlZnQgZnJvbSAnLi9hbGlnbl9sZWZ0JztcbmltcG9ydCBhbGlnbkNlbnRlciBmcm9tICcuL2FsaWduX2NlbnRlcic7XG5pbXBvcnQgYWxpZ25SaWdodCBmcm9tICcuL2FsaWduX3JpZ2h0JztcbmltcG9ydCBhbGlnbkp1c3RpZnkgZnJvbSAnLi9hbGlnbl9qdXN0aWZ5JztcbmltcG9ydCB0ZXh0Q29sb3IgZnJvbSAnLi90ZXh0X2NvbG9yJztcbmltcG9ydCBjb2xvckZpbGwgZnJvbSAnLi9jb2xvcl9maWxsJztcbmltcG9ydCBob3Jpem9udGFsUnVsZSBmcm9tICcuL2hvcml6b250YWxfcnVsZSc7XG5pbXBvcnQgZm9ybWF0Q2xlYXIgZnJvbSAnLi9mb3JtYXRfY2xlYXInO1xuaW1wb3J0IGluZGVudCBmcm9tICcuL2luZGVudCc7XG5pbXBvcnQgb3V0ZGVudCBmcm9tICcuL291dGRlbnQnO1xuaW1wb3J0IHN1cGVyc2NyaXB0IGZyb20gJy4vc3VwZXJzY3JpcHQnO1xuaW1wb3J0IHN1YnNjcmlwdCBmcm9tICcuL3N1YnNjcmlwdCc7XG5pbXBvcnQgdW5kbyBmcm9tICcuL3VuZG8nO1xuaW1wb3J0IHJlZG8gZnJvbSAnLi9yZWRvJztcblxuY29uc3QgREVGQVVMVF9JQ09OX0hFSUdIVCA9IDIwO1xuY29uc3QgREVGQVVMVF9JQ09OX1dJRFRIID0gMjA7XG5jb25zdCBERUZBVUxUX0lDT05fRklMTCA9ICdjdXJyZW50Q29sb3InO1xuXG5leHBvcnQgY29uc3QgaWNvbnM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7XG4gIGJvbGQsXG4gIGl0YWxpYyxcbiAgY29kZSxcbiAgdW5kZXJsaW5lLFxuICBzdHJpa2UsXG4gIG9yZGVyZWRfbGlzdDogb3JkZXJlZExpc3QsXG4gIGJ1bGxldF9saXN0OiBidWxsZXRMaXN0LFxuICBibG9ja3F1b3RlOiBxdW90ZSxcbiAgbGluayxcbiAgdW5saW5rLFxuICBpbWFnZSxcbiAgYWxpZ25fbGVmdDogYWxpZ25MZWZ0LFxuICBhbGlnbl9jZW50ZXI6IGFsaWduQ2VudGVyLFxuICBhbGlnbl9yaWdodDogYWxpZ25SaWdodCxcbiAgYWxpZ25fanVzdGlmeTogYWxpZ25KdXN0aWZ5LFxuICB0ZXh0X2NvbG9yOiB0ZXh0Q29sb3IsXG4gIGNvbG9yX2ZpbGw6IGNvbG9yRmlsbCxcbiAgaG9yaXpvbnRhbF9ydWxlOiBob3Jpem9udGFsUnVsZSxcbiAgZm9ybWF0X2NsZWFyOiBmb3JtYXRDbGVhcixcbiAgaW5kZW50LFxuICBvdXRkZW50LFxuICBzdXBlcnNjcmlwdCxcbiAgc3Vic2NyaXB0LFxuICB1bmRvLFxuICByZWRvLFxuICBwYXRoOiAnPHBhdGg+PC9wYXRoPicsXG59O1xuXG5leHBvcnQgdHlwZSBJY29uc0tleXMgPSBrZXlvZiB0eXBlb2YgaWNvbnM7XG5cbmNsYXNzIEljb24ge1xuICBzdGF0aWMgZ2V0KG5hbWU6IGtleW9mIHR5cGVvZiBpY29ucywgZmlsbCA9IERFRkFVTFRfSUNPTl9GSUxMKTogc3RyaW5nIHtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGljb25zW25hbWVdO1xuICAgIGlmIChmdWxsUGF0aCAmJiAoZnVsbFBhdGguaW5jbHVkZXMoJzxwYXRoJykgfHwgZnVsbFBhdGguaW5jbHVkZXMoJzxnJykpKSB7XG4gICAgICByZXR1cm4gYFxuICAgICAgICA8c3ZnXG4gICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgICAgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgICAgICAgZmlsbD0ke2ZpbGx9XG4gICAgICAgICAgaGVpZ2h0PSR7REVGQVVMVF9JQ09OX0hFSUdIVH1cbiAgICAgICAgICB3aWR0aD0ke0RFRkFVTFRfSUNPTl9XSURUSH1cbiAgICAgICAgPlxuICAgICAgICAgICR7ZnVsbFBhdGh9XG4gICAgICAgIDwvc3ZnPlxuICAgICAgYDtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bGxQYXRoO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEljb247XG4iXX0=