import { Component, HostListener, Input, } from '@angular/core';
import { ToggleCommands } from '../MenuCommands';
import * as i0 from "@angular/core";
import * as i1 from "../../../editor.service";
import * as i2 from "../menu.service";
import * as i3 from "@angular/common";
export class DropdownComponent {
    constructor(ngxeService, menuService, el) {
        this.ngxeService = ngxeService;
        this.menuService = menuService;
        this.el = el;
        this.isDropdownOpen = false;
        this.disabledItems = [];
        this.update = (view) => {
            const { state } = view;
            this.disabledItems = [];
            const activeItems = [];
            this.items.forEach((item) => {
                const command = ToggleCommands[item];
                const isActive = command.isActive(state);
                if (isActive) {
                    activeItems.push(item);
                }
                if (!command.canExecute(state)) {
                    this.disabledItems.push(item);
                }
            });
            if (activeItems.length === 1) {
                [this.activeItem] = activeItems;
            }
            else {
                this.activeItem = null;
            }
        };
    }
    get isSelected() {
        return Boolean(this.activeItem || this.isDropdownOpen);
    }
    get isDropdownDisabled() {
        return this.disabledItems.length === this.items.length;
    }
    onDocumentClick(target) {
        if (!this.el.nativeElement.contains(target) && this.isDropdownOpen) {
            this.isDropdownOpen = false;
        }
    }
    getName(key) {
        return this.ngxeService.locals.get(key);
    }
    getIsDropdownActive(item) {
        return this.activeItem === item;
    }
    toggleDropdown() {
        this.isDropdownOpen = !this.isDropdownOpen;
    }
    onToggleDropdownMouseClick(e) {
        e.preventDefault();
        if (e.button !== 0) {
            return;
        }
        this.toggleDropdown();
    }
    onToggleDropdownKeydown() {
        this.toggleDropdown();
    }
    trackByIndex(index) {
        return index;
    }
    selectItem(item) {
        const command = ToggleCommands[item];
        const { state, dispatch } = this.editorView;
        command.toggle()(state, dispatch);
        this.isDropdownOpen = false;
    }
    onDropdownItemMouseClick(e, item) {
        e.preventDefault();
        // consider only left click
        if (e.button !== 0) {
            return;
        }
        this.selectItem(item);
    }
    onDropdownItemKeydown(event, item) {
        const e = event;
        e.preventDefault();
        this.selectItem(item);
    }
    ngOnInit() {
        this.editorView = this.menuService.editor.view;
        this.updateSubscription = this.menuService.editor.update.subscribe((view) => {
            this.update(view);
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: DropdownComponent, deps: [{ token: i1.NgxEditorService }, { token: i2.MenuService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: DropdownComponent, selector: "ngx-dropdown", inputs: { group: "group", items: "items" }, host: { listeners: { "document:mousedown": "onDocumentClick($event.target)" } }, ngImport: i0, template: "<button\n  type=\"button\"\n  class=\"NgxEditor__Dropdown--Text\"\n  [class.NgxEditor__Dropdown--Selected]=\"isSelected\"\n  [disabled]=\"isDropdownDisabled\"\n  [class.NgxEditor--Disabled]=\"isDropdownDisabled\"\n  (mousedown)=\"onToggleDropdownMouseClick($event)\"\n  (keydown.enter)=\"onToggleDropdownKeydown()\"\n  (keydown.space)=\"onToggleDropdownKeydown()\"\n  [ariaLabel]=\"getName(activeItem || group) | async\"\n  aria-haspopup=\"listbox\"\n  [ariaExpanded]=\"isDropdownOpen\"\n>\n  {{ getName(activeItem || group) | async }}\n</button>\n\n<div class=\"NgxEditor__Dropdown--DropdownMenu\" *ngIf=\"isDropdownOpen\" role=\"listbox\">\n  <button\n    type=\"button\"\n    class=\"NgxEditor__Dropdown--Item\"\n    *ngFor=\"let item of items; trackBy: trackByIndex\"\n    (mousedown)=\"onDropdownItemMouseClick($event, item)\"\n    (keydown.enter)=\"onDropdownItemKeydown($event, item)\"\n    (keydown.space)=\"onDropdownItemKeydown($event, item)\"\n    [ngClass]=\"{\n      'NgxEditor__Dropdown--Active': item === activeItem,\n      'NgxEditor--Disabled': disabledItems.includes(item)\n    }\"\n    [ariaLabel]=\"getName(item) | async\"\n    role=\"option\"\n    [attr.aria-selected]=\"item === activeItem\"\n  >\n    {{ getName(item) | async }}\n  </button>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: DropdownComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-dropdown', template: "<button\n  type=\"button\"\n  class=\"NgxEditor__Dropdown--Text\"\n  [class.NgxEditor__Dropdown--Selected]=\"isSelected\"\n  [disabled]=\"isDropdownDisabled\"\n  [class.NgxEditor--Disabled]=\"isDropdownDisabled\"\n  (mousedown)=\"onToggleDropdownMouseClick($event)\"\n  (keydown.enter)=\"onToggleDropdownKeydown()\"\n  (keydown.space)=\"onToggleDropdownKeydown()\"\n  [ariaLabel]=\"getName(activeItem || group) | async\"\n  aria-haspopup=\"listbox\"\n  [ariaExpanded]=\"isDropdownOpen\"\n>\n  {{ getName(activeItem || group) | async }}\n</button>\n\n<div class=\"NgxEditor__Dropdown--DropdownMenu\" *ngIf=\"isDropdownOpen\" role=\"listbox\">\n  <button\n    type=\"button\"\n    class=\"NgxEditor__Dropdown--Item\"\n    *ngFor=\"let item of items; trackBy: trackByIndex\"\n    (mousedown)=\"onDropdownItemMouseClick($event, item)\"\n    (keydown.enter)=\"onDropdownItemKeydown($event, item)\"\n    (keydown.space)=\"onDropdownItemKeydown($event, item)\"\n    [ngClass]=\"{\n      'NgxEditor__Dropdown--Active': item === activeItem,\n      'NgxEditor--Disabled': disabledItems.includes(item)\n    }\"\n    [ariaLabel]=\"getName(item) | async\"\n    role=\"option\"\n    [attr.aria-selected]=\"item === activeItem\"\n  >\n    {{ getName(item) | async }}\n  </button>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.NgxEditorService }, { type: i2.MenuService }, { type: i0.ElementRef }], propDecorators: { group: [{
                type: Input
            }], items: [{
                type: Input
            }], onDocumentClick: [{
                type: HostListener,
                args: ['document:mousedown', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,