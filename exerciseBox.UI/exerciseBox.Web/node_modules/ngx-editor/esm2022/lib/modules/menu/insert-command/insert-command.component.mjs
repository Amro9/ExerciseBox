import { Component, Input } from '@angular/core';
import { InsertCommands } from '../MenuCommands';
import * as i0 from "@angular/core";
import * as i1 from "../../../editor.service";
import * as i2 from "../menu.service";
import * as i3 from "@angular/common";
import * as i4 from "../../../pipes/sanitize/sanitize-html.pipe";
export class InsertCommandComponent {
    get name() {
        return this.toolbarItem;
    }
    constructor(ngxeService, menuService) {
        this.ngxeService = ngxeService;
        this.menuService = menuService;
        this.disabled = false;
        this.update = (view) => {
            const { state } = view;
            const command = InsertCommands[this.name];
            this.disabled = !command.canExecute(state);
        };
    }
    onMouseClick(e) {
        e.preventDefault();
        if (e.button !== 0) {
            return;
        }
        this.insert();
    }
    onKeydown() {
        this.insert();
    }
    insert() {
        const { state, dispatch } = this.editorView;
        const command = InsertCommands[this.name];
        command.insert()(state, dispatch);
    }
    getTitle(name) {
        return this.ngxeService.locals.get(name);
    }
    ngOnInit() {
        this.html = this.ngxeService.getIcon(this.name);
        this.editorView = this.menuService.editor.view;
        this.updateSubscription = this.menuService.editor.update.subscribe((view) => {
            this.update(view);
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: InsertCommandComponent, deps: [{ token: i1.NgxEditorService }, { token: i2.MenuService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: InsertCommandComponent, selector: "ngx-insert-command", inputs: { toolbarItem: "toolbarItem" }, ngImport: i0, template: "<button\n  class=\"NgxEditor__MenuItem--Icon\"\n  [disabled]=\"disabled\"\n  [class.NgxEditor--Disabled]=\"disabled\"\n  [innerHTML]=\"html | sanitizeHtml\"\n  (mousedown)=\"onMouseClick($event)\"\n  (keydown.enter)=\"onKeydown()\"\n  (keydown.space)=\"onKeydown()\"\n  [title]=\"getTitle(name) | async\"\n  [ariaLabel]=\"getTitle(name) | async\"\n></button>\n", styles: [""], dependencies: [{ kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i4.SanitizeHtmlPipe, name: "sanitizeHtml" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: InsertCommandComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-insert-command', template: "<button\n  class=\"NgxEditor__MenuItem--Icon\"\n  [disabled]=\"disabled\"\n  [class.NgxEditor--Disabled]=\"disabled\"\n  [innerHTML]=\"html | sanitizeHtml\"\n  (mousedown)=\"onMouseClick($event)\"\n  (keydown.enter)=\"onKeydown()\"\n  (keydown.space)=\"onKeydown()\"\n  [title]=\"getTitle(name) | async\"\n  [ariaLabel]=\"getTitle(name) | async\"\n></button>\n" }]
        }], ctorParameters: () => [{ type: i1.NgxEditorService }, { type: i2.MenuService }], propDecorators: { toolbarItem: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zZXJ0LWNvbW1hbmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWVkaXRvci9zcmMvbGliL21vZHVsZXMvbWVudS9pbnNlcnQtY29tbWFuZC9pbnNlcnQtY29tbWFuZC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtZWRpdG9yL3NyYy9saWIvbW9kdWxlcy9tZW51L2luc2VydC1jb21tYW5kL2luc2VydC1jb21tYW5kLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUlwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7Ozs7OztBQVlqRCxNQUFNLE9BQU8sc0JBQXNCO0lBR2pDLElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLFdBQXNCLENBQUM7SUFDckMsQ0FBQztJQU9ELFlBQ1UsV0FBNkIsRUFDN0IsV0FBd0I7UUFEeEIsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBTGxDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUE0QmpCLFdBQU0sR0FBRyxDQUFDLElBQWdCLEVBQVEsRUFBRTtZQUNsQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQ3ZCLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQyxDQUFDO0lBMUJFLENBQUM7SUFFTCxZQUFZLENBQUMsQ0FBYTtRQUN4QixDQUFDLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFbkIsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ25CLE9BQU87UUFDVCxDQUFDO1FBRUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNO1FBQ0osTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzVDLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBUUQsUUFBUSxDQUFDLElBQVk7UUFDbkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUUvQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQWdCLEVBQUUsRUFBRTtZQUN0RixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsa0JBQWtCLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDeEMsQ0FBQzs4R0EzRFUsc0JBQXNCO2tHQUF0QixzQkFBc0Isa0dDaEJuQywwV0FXQTs7MkZES2Esc0JBQXNCO2tCQU5sQyxTQUFTOytCQUNFLG9CQUFvQjsrR0FNckIsV0FBVztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAncHJvc2VtaXJyb3Itdmlldyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSW5zZXJ0Q29tbWFuZHMgfSBmcm9tICcuLi9NZW51Q29tbWFuZHMnO1xuaW1wb3J0IHsgTmd4RWRpdG9yU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL2VkaXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IE1lbnVTZXJ2aWNlIH0gZnJvbSAnLi4vbWVudS5zZXJ2aWNlJztcbmltcG9ydCB7IFRCSXRlbXMsIFRvb2xiYXJJdGVtIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgSFRNTCB9IGZyb20gJy4uLy4uLy4uL3RydXN0ZWRUeXBlc1V0aWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtaW5zZXJ0LWNvbW1hbmQnLFxuICB0ZW1wbGF0ZVVybDogJy4vaW5zZXJ0LWNvbW1hbmQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9pbnNlcnQtY29tbWFuZC5jb21wb25lbnQuc2NzcyddLFxufSlcblxuZXhwb3J0IGNsYXNzIEluc2VydENvbW1hbmRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIEBJbnB1dCgpIHRvb2xiYXJJdGVtOiBUb29sYmFySXRlbTtcblxuICBnZXQgbmFtZSgpOiBUQkl0ZW1zIHtcbiAgICByZXR1cm4gdGhpcy50b29sYmFySXRlbSBhcyBUQkl0ZW1zO1xuICB9XG5cbiAgaHRtbDogSFRNTDtcbiAgZWRpdG9yVmlldzogRWRpdG9yVmlldztcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSB1cGRhdGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIG5neGVTZXJ2aWNlOiBOZ3hFZGl0b3JTZXJ2aWNlLFxuICAgIHByaXZhdGUgbWVudVNlcnZpY2U6IE1lbnVTZXJ2aWNlLFxuICApIHsgfVxuXG4gIG9uTW91c2VDbGljayhlOiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgaWYgKGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5pbnNlcnQoKTtcbiAgfVxuXG4gIG9uS2V5ZG93bigpOiB2b2lkIHtcbiAgICB0aGlzLmluc2VydCgpO1xuICB9XG5cbiAgaW5zZXJ0KCk6IHZvaWQge1xuICAgIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSB0aGlzLmVkaXRvclZpZXc7XG4gICAgY29uc3QgY29tbWFuZCA9IEluc2VydENvbW1hbmRzW3RoaXMubmFtZV07XG4gICAgY29tbWFuZC5pbnNlcnQoKShzdGF0ZSwgZGlzcGF0Y2gpO1xuICB9XG5cbiAgdXBkYXRlID0gKHZpZXc6IEVkaXRvclZpZXcpOiB2b2lkID0+IHtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSB2aWV3O1xuICAgIGNvbnN0IGNvbW1hbmQgPSBJbnNlcnRDb21tYW5kc1t0aGlzLm5hbWVdO1xuICAgIHRoaXMuZGlzYWJsZWQgPSAhY29tbWFuZC5jYW5FeGVjdXRlKHN0YXRlKTtcbiAgfTtcblxuICBnZXRUaXRsZShuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLm5neGVTZXJ2aWNlLmxvY2Fscy5nZXQobmFtZSk7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmh0bWwgPSB0aGlzLm5neGVTZXJ2aWNlLmdldEljb24odGhpcy5uYW1lKTtcblxuICAgIHRoaXMuZWRpdG9yVmlldyA9IHRoaXMubWVudVNlcnZpY2UuZWRpdG9yLnZpZXc7XG5cbiAgICB0aGlzLnVwZGF0ZVN1YnNjcmlwdGlvbiA9IHRoaXMubWVudVNlcnZpY2UuZWRpdG9yLnVwZGF0ZS5zdWJzY3JpYmUoKHZpZXc6IEVkaXRvclZpZXcpID0+IHtcbiAgICAgIHRoaXMudXBkYXRlKHZpZXcpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy51cGRhdGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIiwiPGJ1dHRvblxuICBjbGFzcz1cIk5neEVkaXRvcl9fTWVudUl0ZW0tLUljb25cIlxuICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICBbY2xhc3MuTmd4RWRpdG9yLS1EaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gIFtpbm5lckhUTUxdPVwiaHRtbCB8IHNhbml0aXplSHRtbFwiXG4gIChtb3VzZWRvd24pPVwib25Nb3VzZUNsaWNrKCRldmVudClcIlxuICAoa2V5ZG93bi5lbnRlcik9XCJvbktleWRvd24oKVwiXG4gIChrZXlkb3duLnNwYWNlKT1cIm9uS2V5ZG93bigpXCJcbiAgW3RpdGxlXT1cImdldFRpdGxlKG5hbWUpIHwgYXN5bmNcIlxuICBbYXJpYUxhYmVsXT1cImdldFRpdGxlKG5hbWUpIHwgYXN5bmNcIlxuPjwvYnV0dG9uPlxuIl19