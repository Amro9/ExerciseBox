import { Component, HostListener, } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { NodeSelection } from 'prosemirror-state';
import { uniq } from 'ngx-editor/utils';
import { Image as ImageCommand } from '../MenuCommands';
import * as i0 from "@angular/core";
import * as i1 from "../../../editor.service";
import * as i2 from "../menu.service";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "../../../pipes/sanitize/sanitize-html.pipe";
export class ImageComponent {
    constructor(el, ngxeService, menuService) {
        this.el = el;
        this.ngxeService = ngxeService;
        this.menuService = menuService;
        this.showPopup = false;
        this.isActive = false;
        this.componentId = uniq();
        this.form = new FormGroup({
            src: new FormControl('', [
                Validators.required,
                Validators.pattern('(https?://)?([\\da-z.-]+)\\.([a-z.]{2,6})[/\\w .-]*/??([^#\n\r]*)?#?([^\n\r]*)'),
            ]),
            alt: new FormControl(''),
            title: new FormControl(''),
        });
        this.update = (view) => {
            const { state } = view;
            this.isActive = ImageCommand.isActive(state);
        };
    }
    get icon() {
        return this.ngxeService.getIcon('image');
    }
    get src() {
        return this.form.get('src');
    }
    onDocumentClick(e) {
        if (!this.el.nativeElement.contains(e.target) && this.showPopup) {
            this.hideForm();
        }
    }
    getId(name) {
        return `${name}-${this.componentId}`;
    }
    getLabel(key) {
        return this.ngxeService.locals.get(key);
    }
    hideForm() {
        this.showPopup = false;
        this.form.reset({
            src: '',
            alt: '',
            title: '',
        });
    }
    togglePopup() {
        this.showPopup = !this.showPopup;
        if (this.showPopup) {
            this.fillForm();
        }
    }
    onTogglePopupMouseClick(e) {
        if (e.button !== 0) {
            return;
        }
        this.togglePopup();
    }
    onTogglePopupKeydown() {
        this.togglePopup();
    }
    fillForm() {
        const { state } = this.editorView;
        const { selection } = state;
        if (selection instanceof NodeSelection && this.isActive) {
            const { src, alt = '', title = '' } = selection.node.attrs;
            this.form.setValue({
                src,
                alt,
                title,
            });
        }
    }
    insertLink(e) {
        e.preventDefault();
        const { src, alt, title } = this.form.getRawValue();
        const { dispatch, state } = this.editorView;
        const attrs = {
            alt,
            title,
        };
        ImageCommand.insert(src, attrs)(state, dispatch);
        this.editorView.focus();
        this.hideForm();
    }
    ngOnInit() {
        this.editorView = this.menuService.editor.view;
        this.updateSubscription = this.menuService.editor.update.subscribe((view) => {
            this.update(view);
        });
    }
    ngOnDestroy() {
        this.updateSubscription.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: ImageComponent, deps: [{ token: i0.ElementRef }, { token: i1.NgxEditorService }, { token: i2.MenuService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: ImageComponent, selector: "ngx-image", host: { listeners: { "document:mousedown": "onDocumentClick($event)" } }, ngImport: i0, template: "<button\n  type=\"button\"\n  class=\"NgxEditor__MenuItem--Icon\"\n  [class.NgxEditor__MenuItem--Active]=\"isActive || showPopup\"\n  [innerHTML]=\"icon | sanitizeHtml\"\n  (mousedown)=\"onTogglePopupMouseClick($event)\"\n  (keydown.enter)=\"onTogglePopupKeydown()\"\n  (keydown.space)=\"onTogglePopupKeydown()\"\n  [title]=\"getLabel('insertImage') | async\"\n  [ariaLabel]=\"getLabel('insertImage') | async\"\n  aria-haspopup=\"dialog\"\n  [ariaExpanded]=\"showPopup\"\n></button>\n\n<!-- popup -->\n<div *ngIf=\"showPopup\" class=\"NgxEditor__Popup\">\n  <form class=\"NgxEditor__Popup--Form\" [formGroup]=\"form\" (ngSubmit)=\"insertLink($event)\">\n    <div class=\"NgxEditor__Popup--FormGroup\">\n      <div class=\"NgxEditor__Popup--Col\">\n        <label class=\"NgxEditor__Popup--Label\" [htmlFor]=\"getId('image-popup-url')\">{{\n          getLabel('url') | async\n        }}</label>\n        <input type=\"href\" [id]=\"getId('image-popup-url')\" formControlName=\"src\" autocomplete=\"off\" />\n        <div *ngIf=\"src.touched && src.invalid\" class=\"NgxEditor__HelpText NgxEditor__HelpText--Error\">\n          {{ src.errors?.['pattern'] && getLabel('enterValidUrl') | async }}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"NgxEditor__Popup--FormGroup\">\n      <div class=\"NgxEditor__Popup--Col\">\n        <label class=\"NgxEditor__Popup--Label\" [htmlFor]=\"getId('image-popup-label')\">{{\n          getLabel('altText') | async\n        }}</label>\n        <input type=\"text\" [id]=\"getId('image-popup-label')\" formControlName=\"alt\" autocomplete=\"off\" />\n      </div>\n    </div>\n\n    <div class=\"NgxEditor__Popup--FormGroup\">\n      <div class=\"NgxEditor__Popup--Col\">\n        <label class=\"NgxEditor__Popup--Label\" [htmlFor]=\"getId('image-popup-title')\">{{\n          getLabel('title') | async\n        }}</label>\n        <input type=\"text\" [id]=\"getId('image-popup-title')\" formControlName=\"title\" autocomplete=\"off\" />\n      </div>\n    </div>\n\n    <button type=\"submit\" [disabled]=\"!form.valid || !form.dirty\">{{ getLabel('insert') | async }}</button>\n  </form>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "pipe", type: i3.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.SanitizeHtmlPipe, name: "sanitizeHtml" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: ImageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-image', template: "<button\n  type=\"button\"\n  class=\"NgxEditor__MenuItem--Icon\"\n  [class.NgxEditor__MenuItem--Active]=\"isActive || showPopup\"\n  [innerHTML]=\"icon | sanitizeHtml\"\n  (mousedown)=\"onTogglePopupMouseClick($event)\"\n  (keydown.enter)=\"onTogglePopupKeydown()\"\n  (keydown.space)=\"onTogglePopupKeydown()\"\n  [title]=\"getLabel('insertImage') | async\"\n  [ariaLabel]=\"getLabel('insertImage') | async\"\n  aria-haspopup=\"dialog\"\n  [ariaExpanded]=\"showPopup\"\n></button>\n\n<!-- popup -->\n<div *ngIf=\"showPopup\" class=\"NgxEditor__Popup\">\n  <form class=\"NgxEditor__Popup--Form\" [formGroup]=\"form\" (ngSubmit)=\"insertLink($event)\">\n    <div class=\"NgxEditor__Popup--FormGroup\">\n      <div class=\"NgxEditor__Popup--Col\">\n        <label class=\"NgxEditor__Popup--Label\" [htmlFor]=\"getId('image-popup-url')\">{{\n          getLabel('url') | async\n        }}</label>\n        <input type=\"href\" [id]=\"getId('image-popup-url')\" formControlName=\"src\" autocomplete=\"off\" />\n        <div *ngIf=\"src.touched && src.invalid\" class=\"NgxEditor__HelpText NgxEditor__HelpText--Error\">\n          {{ src.errors?.['pattern'] && getLabel('enterValidUrl') | async }}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"NgxEditor__Popup--FormGroup\">\n      <div class=\"NgxEditor__Popup--Col\">\n        <label class=\"NgxEditor__Popup--Label\" [htmlFor]=\"getId('image-popup-label')\">{{\n          getLabel('altText') | async\n        }}</label>\n        <input type=\"text\" [id]=\"getId('image-popup-label')\" formControlName=\"alt\" autocomplete=\"off\" />\n      </div>\n    </div>\n\n    <div class=\"NgxEditor__Popup--FormGroup\">\n      <div class=\"NgxEditor__Popup--Col\">\n        <label class=\"NgxEditor__Popup--Label\" [htmlFor]=\"getId('image-popup-title')\">{{\n          getLabel('title') | async\n        }}</label>\n        <input type=\"text\" [id]=\"getId('image-popup-title')\" formControlName=\"title\" autocomplete=\"off\" />\n      </div>\n    </div>\n\n    <button type=\"submit\" [disabled]=\"!form.valid || !form.dirty\">{{ getLabel('insert') | async }}</button>\n  </form>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.NgxEditorService }, { type: i2.MenuService }], propDecorators: { onDocumentClick: [{
                type: HostListener,
                args: ['document:mousedown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,