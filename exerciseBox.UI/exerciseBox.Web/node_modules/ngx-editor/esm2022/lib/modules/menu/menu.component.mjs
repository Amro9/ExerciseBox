import { Component, Input, } from '@angular/core';
import { NgxEditorError } from 'ngx-editor/utils';
import { MenuService } from './menu.service';
import * as i0 from "@angular/core";
import * as i1 from "./menu.service";
import * as i2 from "@angular/common";
import * as i3 from "./toggle-command/toggle-command.component";
import * as i4 from "./insert-command/insert-command.component";
import * as i5 from "./link/link.component";
import * as i6 from "./dropdown/dropdown.component";
import * as i7 from "./image/image.component";
import * as i8 from "./color-picker/color-picker.component";
export const DEFAULT_TOOLBAR = [
    ['bold', 'italic'],
    ['code', 'blockquote'],
    ['underline', 'strike'],
    ['ordered_list', 'bullet_list'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
    ['align_left', 'align_center', 'align_right', 'align_justify'],
    ['format_clear'],
];
export const TOOLBAR_MINIMAL = [
    ['bold', 'italic'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
];
export const TOOLBAR_FULL = [
    ['bold', 'italic'],
    ['code', 'blockquote'],
    ['underline', 'strike'],
    ['ordered_list', 'bullet_list'],
    [{ heading: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'] }],
    ['link', 'image'],
    ['text_color', 'background_color'],
    ['align_left', 'align_center', 'align_right', 'align_justify'],
    ['horizontal_rule', 'format_clear', 'indent', 'outdent'],
    ['superscript', 'subscript'],
    ['undo', 'redo'],
];
const DEFAULT_COLOR_PRESETS = [
    '#b60205',
    '#d93f0b',
    '#fbca04',
    '#0e8a16',
    '#006b75',
    '#1d76db',
    '#0052cc',
    '#5319e7',
    '#e99695',
    '#f9d0c4',
    '#fef2c0',
    '#c2e0c6',
    '#bfdadc',
    '#c5def5',
    '#bfd4f2',
    '#d4c5f9',
];
export class MenuComponent {
    constructor(menuService) {
        this.menuService = menuService;
        this.toolbar = TOOLBAR_MINIMAL;
        this.colorPresets = DEFAULT_COLOR_PRESETS;
        this.disabled = false;
        this.customMenuRef = null;
        this.dropdownPlacement = 'bottom';
        this.toggleCommands = [
            'bold',
            'italic',
            'underline',
            'strike',
            'code',
            'blockquote',
            'ordered_list',
            'bullet_list',
            'align_left',
            'align_center',
            'align_right',
            'align_justify',
            'superscript',
            'subscript',
        ];
        this.insertCommands = [
            'horizontal_rule',
            'format_clear',
            'indent',
            'outdent',
            'undo',
            'redo',
        ];
        this.iconContainerClass = ['NgxEditor__MenuItem', 'NgxEditor__MenuItem--IconContainer'];
        this.dropdownContainerClass = ['NgxEditor__Dropdown'];
        this.seperatorClass = ['NgxEditor__Seperator'];
    }
    get presets() {
        const col = 8;
        const colors = [];
        this.colorPresets.forEach((color, index) => {
            const row = Math.floor(index / col);
            if (!colors[row]) {
                colors.push([]);
            }
            colors[row].push(color);
        });
        return colors;
    }
    trackByIndex(index) {
        return index;
    }
    isDropDown(item) {
        if (item?.heading) {
            return true;
        }
        return false;
    }
    getDropdownItems(item) {
        return item;
    }
    isLinkItem(item) {
        if (item === 'link') {
            return true;
        }
        // NOTE: it is not sufficient to check for a `link` property
        // as String.prototype.link is a valid (although deprecated) method
        return typeof item === 'object'
            && typeof item?.link === 'object';
    }
    isLinkWithOptions(item) {
        // NOTE: it is not sufficient to check for a `link` property
        // as String.prototype.link is a valid (although deprecated) method
        return typeof item === 'object'
            && typeof item?.link === 'object';
    }
    getLinkOptions(item) {
        return item?.link;
    }
    ngOnInit() {
        if (!this.editor) {
            throw new NgxEditorError('Required editor instance to initialize menu component');
        }
        this.menuService.editor = this.editor;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: MenuComponent, deps: [{ token: i1.MenuService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.8", type: MenuComponent, selector: "ngx-editor-menu", inputs: { toolbar: "toolbar", colorPresets: "colorPresets", disabled: "disabled", editor: "editor", customMenuRef: "customMenuRef", dropdownPlacement: "dropdownPlacement" }, providers: [MenuService], ngImport: i0, template: "<div\n  class=\"NgxEditor__MenuBar\"\n  [ngClass]=\"{ 'NgxEditor--Disabled': disabled, 'NgxEditor__MenuBar--Reverse': dropdownPlacement === 'top' }\"\n>\n  <ng-container *ngFor=\"let toolbarItem of toolbar; let lastToolbarItem = last; trackBy: trackByIndex\">\n    <ng-container *ngFor=\"let item of toolbarItem; let lastItem = last; trackBy: trackByIndex\">\n      <!-- toggle icons -->\n      <ngx-toggle-command [toolbarItem]=\"item\" [class]=\"iconContainerClass\" *ngIf=\"toggleCommands.includes(item)\">\n      </ngx-toggle-command>\n\n      <ngx-insert-command [toolbarItem]=\"item\" [class]=\"iconContainerClass\" *ngIf=\"insertCommands.includes(item)\">\n      </ngx-insert-command>\n\n      <!-- link -->\n      <ng-container *ngIf=\"isLinkItem(item)\">\n        <ngx-link [class]=\"iconContainerClass\" [options]=\"getLinkOptions(item)\"></ngx-link>\n      </ng-container>\n\n      <!-- image -->\n      <ngx-image [class]=\"iconContainerClass\" *ngIf=\"item === 'image'\"> </ngx-image>\n\n      <!-- dropdown -->\n      <ng-container *ngIf=\"isDropDown(item)\">\n        <ngx-dropdown\n          *ngFor=\"let dropdownItem of getDropdownItems(item) | keyvalue; trackBy: trackByIndex\"\n          [class]=\"dropdownContainerClass\"\n          [group]=\"dropdownItem.key\"\n          [items]=\"dropdownItem.value\"\n        >\n        </ngx-dropdown>\n      </ng-container>\n\n      <!-- text color picker -->\n      <ngx-color-picker\n        [class]=\"iconContainerClass\"\n        *ngIf=\"item === 'text_color'\"\n        type=\"text_color\"\n        [presets]=\"presets\"\n      >\n      </ngx-color-picker>\n      <!-- background color picker -->\n      <ngx-color-picker\n        [class]=\"iconContainerClass\"\n        *ngIf=\"item === 'background_color'\"\n        type=\"background_color\"\n        [presets]=\"presets\"\n      >\n      </ngx-color-picker>\n\n      <!-- seperator -->\n      <div [class]=\"seperatorClass\" *ngIf=\"lastItem && !lastToolbarItem\"></div>\n    </ng-container>\n  </ng-container>\n\n  <!-- custom menu -->\n  <ng-container *ngIf=\"customMenuRef\">\n    <ng-container [ngTemplateOutlet]=\"customMenuRef\"></ng-container>\n  </ng-container>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i3.ToggleCommandComponent, selector: "ngx-toggle-command", inputs: ["toolbarItem"] }, { kind: "component", type: i4.InsertCommandComponent, selector: "ngx-insert-command", inputs: ["toolbarItem"] }, { kind: "component", type: i5.LinkComponent, selector: "ngx-link", inputs: ["options"] }, { kind: "component", type: i6.DropdownComponent, selector: "ngx-dropdown", inputs: ["group", "items"] }, { kind: "component", type: i7.ImageComponent, selector: "ngx-image" }, { kind: "component", type: i8.ColorPickerComponent, selector: "ngx-color-picker", inputs: ["presets", "type"] }, { kind: "pipe", type: i2.KeyValuePipe, name: "keyvalue" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.8", ngImport: i0, type: MenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-editor-menu', providers: [MenuService], template: "<div\n  class=\"NgxEditor__MenuBar\"\n  [ngClass]=\"{ 'NgxEditor--Disabled': disabled, 'NgxEditor__MenuBar--Reverse': dropdownPlacement === 'top' }\"\n>\n  <ng-container *ngFor=\"let toolbarItem of toolbar; let lastToolbarItem = last; trackBy: trackByIndex\">\n    <ng-container *ngFor=\"let item of toolbarItem; let lastItem = last; trackBy: trackByIndex\">\n      <!-- toggle icons -->\n      <ngx-toggle-command [toolbarItem]=\"item\" [class]=\"iconContainerClass\" *ngIf=\"toggleCommands.includes(item)\">\n      </ngx-toggle-command>\n\n      <ngx-insert-command [toolbarItem]=\"item\" [class]=\"iconContainerClass\" *ngIf=\"insertCommands.includes(item)\">\n      </ngx-insert-command>\n\n      <!-- link -->\n      <ng-container *ngIf=\"isLinkItem(item)\">\n        <ngx-link [class]=\"iconContainerClass\" [options]=\"getLinkOptions(item)\"></ngx-link>\n      </ng-container>\n\n      <!-- image -->\n      <ngx-image [class]=\"iconContainerClass\" *ngIf=\"item === 'image'\"> </ngx-image>\n\n      <!-- dropdown -->\n      <ng-container *ngIf=\"isDropDown(item)\">\n        <ngx-dropdown\n          *ngFor=\"let dropdownItem of getDropdownItems(item) | keyvalue; trackBy: trackByIndex\"\n          [class]=\"dropdownContainerClass\"\n          [group]=\"dropdownItem.key\"\n          [items]=\"dropdownItem.value\"\n        >\n        </ngx-dropdown>\n      </ng-container>\n\n      <!-- text color picker -->\n      <ngx-color-picker\n        [class]=\"iconContainerClass\"\n        *ngIf=\"item === 'text_color'\"\n        type=\"text_color\"\n        [presets]=\"presets\"\n      >\n      </ngx-color-picker>\n      <!-- background color picker -->\n      <ngx-color-picker\n        [class]=\"iconContainerClass\"\n        *ngIf=\"item === 'background_color'\"\n        type=\"background_color\"\n        [presets]=\"presets\"\n      >\n      </ngx-color-picker>\n\n      <!-- seperator -->\n      <div [class]=\"seperatorClass\" *ngIf=\"lastItem && !lastToolbarItem\"></div>\n    </ng-container>\n  </ng-container>\n\n  <!-- custom menu -->\n  <ng-container *ngIf=\"customMenuRef\">\n    <ng-container [ngTemplateOutlet]=\"customMenuRef\"></ng-container>\n  </ng-container>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.MenuService }], propDecorators: { toolbar: [{
                type: Input
            }], colorPresets: [{
                type: Input
            }], disabled: [{
                type: Input
            }], editor: [{
                type: Input
            }], customMenuRef: [{
                type: Input
            }], dropdownPlacement: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,