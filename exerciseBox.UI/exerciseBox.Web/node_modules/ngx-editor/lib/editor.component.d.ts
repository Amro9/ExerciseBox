import { ElementRef, OnDestroy, OnInit, EventEmitter, Renderer2, SimpleChanges, OnChanges, Injector } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import Editor from './Editor';
import { HTML } from './trustedTypesUtil';
import * as i0 from "@angular/core";
export declare class NgxEditorComponent implements ControlValueAccessor, OnInit, OnChanges, OnDestroy {
    private renderer;
    private injector;
    private elementRef;
    constructor(renderer: Renderer2, injector: Injector, elementRef: ElementRef<HTMLElement>);
    private ngxEditor;
    editor: Editor;
    outputFormat: 'doc' | 'html';
    placeholder: string;
    focusOut: EventEmitter<void>;
    focusIn: EventEmitter<void>;
    private unsubscribe;
    private onChange;
    private onTouched;
    writeValue(value: Record<string, any> | HTML | null): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    private handleChange;
    private setMeta;
    private setPlaceholder;
    private registerPlugins;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxEditorComponent, "ngx-editor", never, { "editor": { "alias": "editor"; "required": false; }; "outputFormat": { "alias": "outputFormat"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; }, { "focusOut": "focusOut"; "focusIn": "focusIn"; }, never, ["*"], false, never>;
}
